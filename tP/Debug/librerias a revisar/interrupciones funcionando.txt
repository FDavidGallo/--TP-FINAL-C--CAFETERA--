/*
 * GccApplication1.c
 *
 * Created: 26/4/2024 22:21:09
 * Author : Usuario
 */ 
#include <avr/io.h>
#include <avr/interrupt.h>
#include "UART.h"
#include <avr/io.h>
#include <avr/interrupt.h>
#include "pines.h"
 volatile int myChar =2; // Variable global que será modificada por la interrupción del timer
 volatile int timerCounter;
 volatile int pinState;

// Configuración del Timer1 para interrumpir cada cierto intervalo
void setupTimer1() {
	TCCR1A = 0; // Poner registros a 0
	TCCR1B = 0; // Poner registros a 0

	// Establecer a CTC (Clear Timer on Compare Match)
	TCCR1B |= (1 << WGM12);

	// Establecer el valor de comparación para el intervalo deseado
	OCR1A = 15624; // Este valor es un ejemplo, ajusta según la frecuencia del reloj y el intervalo deseado

	// Habilitar la interrupción por comparación de Timer1
	TIMSK1 |= (1 << OCIE1A);

	// Establecer el prescaler a 1024 y arrancar el timer
	TCCR1B |= (1 << CS12) | (1 << CS10);
}
 
// ISR para Timer1 Compare Match
ISR(TIMER1_COMPA_vect) {
	cli();
	// Cambiar el valor de myChar aquí
	myChar = 0;
	uart_send_newline();
}

int main(void) {
	ConfigurarBotones();
	setupTimer1(); // Configurar el Timer
	Timer0_init();
	 // Habilitar interrupciones globales
    uart_init();
	while(1) {
		sei();
		// El código principal va aquí
		// Puedes verificar el valor de myChar y hacer algo con él
		char Buffer[2];
		_delay_ms(4444);
		sprintf(Buffer, "%d", myChar);
		uart_send_string(Buffer);
	}
	
}
ISR(TIMER0_COMPA_vect) {
	// Incrementar contador de tiempo
	cli();
	timerCounter++;

	// Leer estado de los pines PD3 y PD4
	pinState = PIND & ((1 << PD3) | (1 << PD4));

	// Si ambos pines están en bajo y el contador ha alcanzado 5000 (5 segundos)
	if (pinState == 0 && timerCounter >= 5000) {
		// Aquí se coloca el código a ejecutar cuando se cumple la condición
		// ...
		uart_send_newline();
		uart_send_string(" UwU ");
		uart_send_newline();
		myChar = 4;
		// Reiniciar contador
		timerCounter = 0;
	}
}

/*
#include "ADC.h"
#include "UART.h"
#include "timer.h"
#include "pines.h"
//#include "ADC.h"
volatile char Pepe;
int main(void)
{  uart_init();
	ConfigurarBotones();
	ConfigurarPinesSensores();;
   uart_send_newline();
   Timer0_init();
   Timer1_init();
   
    /* Replace with your application code 
    while (1) 
    {void uart_send_char(Pepe);
    }
}
ISR(TIMER1_COMPA_vect) {
	// Aquí se coloca el código a ejecutar cada 300 ms
	// ...
	uart_send_string(" OwO ");
	Pepe='A';
	
}
*/

