
tP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00001722  000017b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001722  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  00800162  00800162  00001818  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001874  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  000018b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027e4  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f3f  00000000  00000000  00004350  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018b4  00000000  00000000  0000528f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006cc  00000000  00000000  00006b44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ac5  00000000  00000000  00007210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000111f  00000000  00000000  00007cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  00008df4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 99 04 	jmp	0x932	; 0x932 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e2       	ldi	r30, 0x22	; 34
      7c:	f7 e1       	ldi	r31, 0x17	; 23
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 36       	cpi	r26, 0x62	; 98
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a2 e6       	ldi	r26, 0x62	; 98
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 3a       	cpi	r26, 0xAF	; 175
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 38 06 	call	0xc70	; 0xc70 <main>
      9e:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <iniciar_ADC>:


#include "ADC.h"

void iniciar_ADC(void){
ADMUX |= (1 << REFS0); // Voltaje de referencia AVCC con capacitor externo en AREF (tension de referencia)
      a6:	ec e7       	ldi	r30, 0x7C	; 124
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	80 81       	ld	r24, Z
      ac:	80 64       	ori	r24, 0x40	; 64
      ae:	80 83       	st	Z, r24
ADMUX &= ~(1 << ADLAR); // ADC derecho justificado, los bits mas significativos se ubicaran en los bits mas altos del registo de resultado ADC
      b0:	80 81       	ld	r24, Z
      b2:	8f 7d       	andi	r24, 0xDF	; 223
      b4:	80 83       	st	Z, r24
ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //Prescaler en 128, divide la frecuencia del ADC por 128, esto hace que la conversion sea mas lenta pero precisa.
      b6:	ea e7       	ldi	r30, 0x7A	; 122
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	80 81       	ld	r24, Z
      bc:	87 60       	ori	r24, 0x07	; 7
      be:	80 83       	st	Z, r24
ADCSRA |= (1 << ADEN); // Habilita el ADC, el bit ADEN en 1 permite que se realicen las conversiones ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
      c6:	08 95       	ret

000000c8 <leer_ADC>:
}

void leer_ADC(char canal){
ADMUX &= 0xF0; // Limpiar bits de selección de canal, hace una AND con 0xF0 (11110000) es para asegurar que los bits de seleccion de canal esten en 0 antes de seleccionarlos
      c8:	ec e7       	ldi	r30, 0x7C	; 124
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	90 81       	ld	r25, Z
      ce:	90 7f       	andi	r25, 0xF0	; 240
      d0:	90 83       	st	Z, r25
ADMUX |= (0x00+canal); // Selecciona el pin analogico que deseamos, en el main por ej utilizamos con canales a0 (canal 0) y a1 (canal 1)
      d2:	90 81       	ld	r25, Z
      d4:	89 2b       	or	r24, r25
      d6:	80 83       	st	Z, r24
ADCSRA |= (1 << ADSC); // Iniciar conversión
      d8:	ea e7       	ldi	r30, 0x7A	; 122
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	80 81       	ld	r24, Z
      de:	80 64       	ori	r24, 0x40	; 64
      e0:	80 83       	st	Z, r24
while(ADCSRA & (1 << ADSC)); // Espera a que termine la conversión
      e2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
      e6:	86 fd       	sbrc	r24, 6
      e8:	fc cf       	rjmp	.-8      	; 0xe2 <leer_ADC+0x1a>
      ea:	08 95       	ret

000000ec <i2c_init>:

#include "i2c.h"
int ejecucionUnica = 1;

void i2c_init() { //Se encarga de inicializar el bus I2C en modo maestro con una velocidad de transmisión de 100 kHz
	TWBR = 25; // Frecuencia de reloj de 16MHz / (16 + 2 * TWBR * 1) = 100 kHz {con 25242kHz}
      ec:	89 e1       	ldi	r24, 0x19	; 25
      ee:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWSR = 0;  // Prescaler de 1
      f2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
      f6:	08 95       	ret

000000f8 <i2c_start>:
}

void i2c_start(){	//Envía una condición de inicio al bus I2C.
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTA); // Condición de inicio
      f8:	84 ea       	ldi	r24, 0xA4	; 164
      fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT))); // Verificar la condición de inicio
      fe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     102:	88 23       	and	r24, r24
     104:	e4 f7       	brge	.-8      	; 0xfe <i2c_start+0x6>
}
     106:	08 95       	ret

00000108 <i2c_write>:
	//TWINT (para limpiar la bandera de interrupción), 
	//TWEN (para habilitar el módulo I2C) y TWSTA (para enviar la condición de inicio). 

void i2c_write(char x){	//Se utiliza para escribir un byte de datos en el bus I2C. 
	TWDR = x; // Mover valor a I2C
     108:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN); // Habilite I2C y borra la interrupción
     10c:	84 e8       	ldi	r24, 0x84	; 132
     10e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));
     112:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     116:	88 23       	and	r24, r24
     118:	e4 f7       	brge	.-8      	; 0x112 <i2c_write+0xa>
}
     11a:	08 95       	ret

0000011c <i2c_stop>:

void i2c_stop(){	//Envía una condición de parada al bus I2C, indicando el final de la transmisión.
	TWCR = (1<<TWSTO)|(1<<TWINT)|(1<<TWEN);
     11c:	84 e9       	ldi	r24, 0x94	; 148
     11e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (TWCR&(1<TWSTO));	
     122:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     126:	80 fd       	sbrc	r24, 0
     128:	fc cf       	rjmp	.-8      	; 0x122 <i2c_stop+0x6>
}
     12a:	08 95       	ret

0000012c <enviarPulsoEnable>:
#include "LCD_I2C.h"
#include <util/delay.h>

void enviarPulsoEnable()
{
TWDR |= 0x02;					//---PIN En la pantalla LCD en = 1; -----Enclavar datos en el registro de datos LCD usando una señal de alta a baja
     12c:	eb eb       	ldi	r30, 0xBB	; 187
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	82 60       	ori	r24, 0x02	; 2
     134:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//---Habilita I2C y borra la interrupción- Esta linea y la siguiente simepre van despues de querer mandar un coamndo por TDWR
     136:	84 e8       	ldi	r24, 0x84	; 132
     138:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));	//---Siempre poner despues de la linea anterior al mandar datos por TWDR
     13c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     140:	88 23       	and	r24, r24
     142:	e4 f7       	brge	.-8      	; 0x13c <enviarPulsoEnable+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     144:	89 ef       	ldi	r24, 0xF9	; 249
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	01 97       	sbiw	r24, 0x01	; 1
     14a:	f1 f7       	brne	.-4      	; 0x148 <enviarPulsoEnable+0x1c>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <enviarPulsoEnable+0x22>
     14e:	00 00       	nop
_delay_ms(1);
TWDR &= ~0x02;					//---PIN del Enable de la LCD en = 0;
     150:	eb eb       	ldi	r30, 0xBB	; 187
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	8d 7f       	andi	r24, 0xFD	; 253
     158:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//---Habilita I2C y borra la interrupción
     15a:	84 e8       	ldi	r24, 0x84	; 132
     15c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     160:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     164:	88 23       	and	r24, r24
     166:	e4 f7       	brge	.-8      	; 0x160 <enviarPulsoEnable+0x34>
}
     168:	08 95       	ret

0000016a <enviarComando4Bits>:

void enviarComando4Bits(char v1)
{
TWDR &=~0x01;					//PIN RS de la pantalla LCD rs = 0; ----Seleccionar registro como registro de comando
     16a:	eb eb       	ldi	r30, 0xBB	; 187
     16c:	f0 e0       	ldi	r31, 0x00	; 0
     16e:	90 81       	ld	r25, Z
     170:	9e 7f       	andi	r25, 0xFE	; 254
     172:	90 83       	st	Z, r25
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     174:	94 e8       	ldi	r25, 0x84	; 132
     176:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     17a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     17e:	99 23       	and	r25, r25
     180:	e4 f7       	brge	.-8      	; 0x17a <enviarComando4Bits+0x10>
TWDR &= 0x0F;					//----Enmascaramiento de 4 bits superiores y envío a LCD
     182:	eb eb       	ldi	r30, 0xBB	; 187
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	90 81       	ld	r25, Z
     188:	9f 70       	andi	r25, 0x0F	; 15
     18a:	90 83       	st	Z, r25
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     18c:	94 e8       	ldi	r25, 0x84	; 132
     18e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     192:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     196:	99 23       	and	r25, r25
     198:	e4 f7       	brge	.-8      	; 0x192 <enviarComando4Bits+0x28>
TWDR |= (v1 & 0xF0);			//----
     19a:	eb eb       	ldi	r30, 0xBB	; 187
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	90 81       	ld	r25, Z
     1a0:	80 7f       	andi	r24, 0xF0	; 240
     1a2:	89 2b       	or	r24, r25
     1a4:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     1a6:	84 e8       	ldi	r24, 0x84	; 132
     1a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     1ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1b0:	88 23       	and	r24, r24
     1b2:	e4 f7       	brge	.-8      	; 0x1ac <enviarComando4Bits+0x42>
enviarPulsoEnable();
     1b4:	0e 94 96 00 	call	0x12c	; 0x12c <enviarPulsoEnable>
     1b8:	08 95       	ret

000001ba <enviarComando>:
}

void enviarComando(char v2)
{
     1ba:	cf 93       	push	r28
     1bc:	c8 2f       	mov	r28, r24
TWDR&=~0x01;					//rs = 0; ----Seleccionar registro como registro de comando
     1be:	eb eb       	ldi	r30, 0xBB	; 187
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 81       	ld	r24, Z
     1c4:	8e 7f       	andi	r24, 0xFE	; 254
     1c6:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     1c8:	84 e8       	ldi	r24, 0x84	; 132
     1ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     1ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1d2:	88 23       	and	r24, r24
     1d4:	e4 f7       	brge	.-8      	; 0x1ce <enviarComando+0x14>

TWDR &= 0x0F;                   //----borrando los 4 bits superiores
     1d6:	eb eb       	ldi	r30, 0xBB	; 187
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	80 81       	ld	r24, Z
     1dc:	8f 70       	andi	r24, 0x0F	; 15
     1de:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     1e0:	84 e8       	ldi	r24, 0x84	; 132
     1e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     1e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1ea:	88 23       	and	r24, r24
     1ec:	e4 f7       	brge	.-8      	; 0x1e6 <enviarComando+0x2c>
TWDR |= (v2 & 0xF0);			//----Enmascaramiento de 4 bits superiores y envío a LCD
     1ee:	eb eb       	ldi	r30, 0xBB	; 187
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	80 81       	ld	r24, Z
     1f4:	9c 2f       	mov	r25, r28
     1f6:	90 7f       	andi	r25, 0xF0	; 240
     1f8:	89 2b       	or	r24, r25
     1fa:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     1fc:	84 e8       	ldi	r24, 0x84	; 132
     1fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     202:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     206:	88 23       	and	r24, r24
     208:	e4 f7       	brge	.-8      	; 0x202 <enviarComando+0x48>
enviarPulsoEnable();
     20a:	0e 94 96 00 	call	0x12c	; 0x12c <enviarPulsoEnable>
	
TWDR &= 0x0F;                    //----borrando los 4 bits superiores
     20e:	eb eb       	ldi	r30, 0xBB	; 187
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	8f 70       	andi	r24, 0x0F	; 15
     216:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     218:	84 e8       	ldi	r24, 0x84	; 132
     21a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     21e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     222:	88 23       	and	r24, r24
     224:	e4 f7       	brge	.-8      	; 0x21e <enviarComando+0x64>
TWDR |= ((v2 & 0x0F)<<4);		//----Enmascaramiento de 4 bits inferiores y envío a LCD
     226:	eb eb       	ldi	r30, 0xBB	; 187
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	20 81       	ld	r18, Z
     22c:	30 e1       	ldi	r19, 0x10	; 16
     22e:	c3 9f       	mul	r28, r19
     230:	c0 01       	movw	r24, r0
     232:	11 24       	eor	r1, r1
     234:	82 2b       	or	r24, r18
     236:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilite I2C y borra la interrupción
     238:	84 e8       	ldi	r24, 0x84	; 132
     23a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     23e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     242:	88 23       	and	r24, r24
     244:	e4 f7       	brge	.-8      	; 0x23e <enviarComando+0x84>
enviarPulsoEnable();
     246:	0e 94 96 00 	call	0x12c	; 0x12c <enviarPulsoEnable>
}
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <escribirDato>:

void escribirDato(char v3)
{
     24e:	cf 93       	push	r28
     250:	c8 2f       	mov	r28, r24
TWDR|=0x01;						//RS = 1; ----Selecciona registro como registro de comando
     252:	eb eb       	ldi	r30, 0xBB	; 187
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	81 60       	ori	r24, 0x01	; 1
     25a:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     25c:	84 e8       	ldi	r24, 0x84	; 132
     25e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     262:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     266:	88 23       	and	r24, r24
     268:	e4 f7       	brge	.-8      	; 0x262 <escribirDato+0x14>
TWDR &= 0x0F;				    //----borrando los 4 bits superiores
     26a:	eb eb       	ldi	r30, 0xBB	; 187
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	80 81       	ld	r24, Z
     270:	8f 70       	andi	r24, 0x0F	; 15
     272:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     274:	84 e8       	ldi	r24, 0x84	; 132
     276:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     27a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     27e:	88 23       	and	r24, r24
     280:	e4 f7       	brge	.-8      	; 0x27a <escribirDato+0x2c>
TWDR |= (v3 & 0xF0);			//----Enmascaramiento de 4 bits superiores y envío a LCD
     282:	eb eb       	ldi	r30, 0xBB	; 187
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	9c 2f       	mov	r25, r28
     28a:	90 7f       	andi	r25, 0xF0	; 240
     28c:	89 2b       	or	r24, r25
     28e:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     290:	84 e8       	ldi	r24, 0x84	; 132
     292:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     296:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     29a:	88 23       	and	r24, r24
     29c:	e4 f7       	brge	.-8      	; 0x296 <escribirDato+0x48>
enviarPulsoEnable();
     29e:	0e 94 96 00 	call	0x12c	; 0x12c <enviarPulsoEnable>
	
TWDR &= 0x0F;					//----borrando los 4 bits superiores
     2a2:	eb eb       	ldi	r30, 0xBB	; 187
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	80 81       	ld	r24, Z
     2a8:	8f 70       	andi	r24, 0x0F	; 15
     2aa:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     2ac:	84 e8       	ldi	r24, 0x84	; 132
     2ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     2b2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2b6:	88 23       	and	r24, r24
     2b8:	e4 f7       	brge	.-8      	; 0x2b2 <escribirDato+0x64>
TWDR |= ((v3 & 0x0F)<<4);		//----Enmascaramiento de 4 bits inferiores y envío a LCD
     2ba:	eb eb       	ldi	r30, 0xBB	; 187
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	20 81       	ld	r18, Z
     2c0:	30 e1       	ldi	r19, 0x10	; 16
     2c2:	c3 9f       	mul	r28, r19
     2c4:	c0 01       	movw	r24, r0
     2c6:	11 24       	eor	r1, r1
     2c8:	82 2b       	or	r24, r18
     2ca:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     2cc:	84 e8       	ldi	r24, 0x84	; 132
     2ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     2d2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2d6:	88 23       	and	r24, r24
     2d8:	e4 f7       	brge	.-8      	; 0x2d2 <escribirDato+0x84>
enviarPulsoEnable();
     2da:	0e 94 96 00 	call	0x12c	; 0x12c <enviarPulsoEnable>
}
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <lcd_init>:

void lcd_init() {
i2c_init(); //inciamos la comunicación i2c
     2e2:	0e 94 76 00 	call	0xec	; 0xec <i2c_init>
i2c_start(); //Iniciamos el i2c
     2e6:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_start>
i2c_write(0x40); //Dirección del PCF8574
     2ea:	80 e4       	ldi	r24, 0x40	; 64
     2ec:	0e 94 84 00 	call	0x108	; 0x108 <i2c_write>
     2f0:	81 ee       	ldi	r24, 0xE1	; 225
     2f2:	94 e0       	ldi	r25, 0x04	; 4
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <lcd_init+0x12>
     2f8:	00 c0       	rjmp	.+0      	; 0x2fa <lcd_init+0x18>
     2fa:	00 00       	nop
// Inicialización del LCD de 20x4 en modo 4 bits.
_delay_ms(5);
enviarComando4Bits(0x30); // 3 veces
     2fc:	80 e3       	ldi	r24, 0x30	; 48
     2fe:	0e 94 b5 00 	call	0x16a	; 0x16a <enviarComando4Bits>
     302:	81 ee       	ldi	r24, 0xE1	; 225
     304:	94 e0       	ldi	r25, 0x04	; 4
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <lcd_init+0x24>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <lcd_init+0x2a>
     30c:	00 00       	nop
_delay_ms(5);
enviarComando4Bits(0x30);
     30e:	80 e3       	ldi	r24, 0x30	; 48
     310:	0e 94 b5 00 	call	0x16a	; 0x16a <enviarComando4Bits>
enviarComando4Bits(0x20); // Modo 4 bits
     314:	80 e2       	ldi	r24, 0x20	; 32
     316:	0e 94 b5 00 	call	0x16a	; 0x16a <enviarComando4Bits>
     31a:	81 ee       	ldi	r24, 0xE1	; 225
     31c:	94 e0       	ldi	r25, 0x04	; 4
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	f1 f7       	brne	.-4      	; 0x31e <lcd_init+0x3c>
     322:	00 c0       	rjmp	.+0      	; 0x324 <lcd_init+0x42>
     324:	00 00       	nop
_delay_ms(5);
	
// Configuración del LCD de 20x4
enviarComando(0x28);      // Función de 4 bits, 2 líneas, fuente 5x8
     326:	88 e2       	ldi	r24, 0x28	; 40
     328:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enviarComando>
enviarComando(0x0C);      // Encender el display, apagar el cursor
     32c:	8c e0       	ldi	r24, 0x0C	; 12
     32e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enviarComando>
enviarComando(0x01);      // Borrar pantalla
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enviarComando>
enviarComando(0x06);      // Desplazamiento del cursor a la derecha
     338:	86 e0       	ldi	r24, 0x06	; 6
     33a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enviarComando>
enviarComando(0x80);      // Posiciona el cursor en la primera línea, primera posición
     33e:	80 e8       	ldi	r24, 0x80	; 128
     340:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enviarComando>
     344:	08 95       	ret

00000346 <escribirEnLCD>:
}

void escribirEnLCD(char *c)
{
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	ec 01       	movw	r28, r24
while(*c != 0)			//----Espere hasta que todas las cadenas pasen a la pantalla LCD.
     34c:	03 c0       	rjmp	.+6      	; 0x354 <escribirEnLCD+0xe>
escribirDato(*c++);		//----Enviar la cadena a la pantalla LCD
     34e:	21 96       	adiw	r28, 0x01	; 1
     350:	0e 94 27 01 	call	0x24e	; 0x24e <escribirDato>
enviarComando(0x80);      // Posiciona el cursor en la primera línea, primera posición
}

void escribirEnLCD(char *c)
{
while(*c != 0)			//----Espere hasta que todas las cadenas pasen a la pantalla LCD.
     354:	88 81       	ld	r24, Y
     356:	81 11       	cpse	r24, r1
     358:	fa cf       	rjmp	.-12     	; 0x34e <escribirEnLCD+0x8>
escribirDato(*c++);		//----Enviar la cadena a la pantalla LCD
}
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <TWI_ini>:

//????????????? TWI
void TWI_ini(void)
{
	//??????? ???????? ???????? ??????
	TWBR=0x05;//???????? ??? ???????? ???????? ??????: 5
     360:	85 e0       	ldi	r24, 0x05	; 5
     362:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     366:	08 95       	ret

00000368 <TWI_Start>:
void TWI_Start(void)
{
	//?????????? ?????? TWI: TWEN=1
	//????????? ???? ????????? "Start": TWSTA=1
	//????????? ???? ?????????? TWI: TWINT=1
	TWCR=(1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     368:	84 ea       	ldi	r24, 0xA4	; 164
     36a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(~TWCR&(1<<TWINT));//????????? ?????????? ????????
     36e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     372:	88 23       	and	r24, r24
     374:	e4 f7       	brge	.-8      	; 0x36e <TWI_Start+0x6>
}
     376:	08 95       	ret

00000378 <TWI_Sendbyte>:

//???????? ?????
void TWI_Sendbyte(unsigned char byte)
{
	TWDR=byte;//???????? ???? ? ??????? ??????
     378:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	//?????????? ?????? TWI
	//????????? ???? ?????????? TWI
	TWCR=(1<<TWEN)|(1<<TWINT);
     37c:	84 e8       	ldi	r24, 0x84	; 132
     37e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(~TWCR&(1<<TWINT));//????????? ?????????? ????????
     382:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     386:	88 23       	and	r24, r24
     388:	e4 f7       	brge	.-8      	; 0x382 <TWI_Sendbyte+0xa>
}
     38a:	08 95       	ret

0000038c <TWI_Receivebytes>:
//????? ??????
void TWI_Receivebytes()
{
   //...............................18 ???..................................
   //????? ??????? ????? ?????? 
   TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);//?????????? "ACK": TWEA=1
     38c:	84 ec       	ldi	r24, 0xC4	; 196
     38e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
   while(~TWCR&(1<<TWINT));//????????? ?????????? ????????
     392:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     396:	88 23       	and	r24, r24
     398:	e4 f7       	brge	.-8      	; 0x392 <TWI_Receivebytes+0x6>
   a1=TWDR;//?????????? ??????? ???? ?? MCP3421 ? ?????????? a1=TWDR;
     39a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	a0 e0       	ldi	r26, 0x00	; 0
     3a2:	b0 e0       	ldi	r27, 0x00	; 0
     3a4:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <a1>
     3a8:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <a1+0x1>
     3ac:	a0 93 71 01 	sts	0x0171, r26	; 0x800171 <a1+0x2>
     3b0:	b0 93 72 01 	sts	0x0172, r27	; 0x800172 <a1+0x3>
   //????? ??????? ????? ??????
   TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);//?????????? "ACK": TWEA=1
     3b4:	84 ec       	ldi	r24, 0xC4	; 196
     3b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
   while(~TWCR&(1<<TWINT));//????????? ?????????? ????????
     3ba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3be:	88 23       	and	r24, r24
     3c0:	e4 f7       	brge	.-8      	; 0x3ba <TWI_Receivebytes+0x2e>
   a2=TWDR;//?????????? ??????? ???? ?? MCP3421 ? ?????????? a1=TWDR;
     3c2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	a0 e0       	ldi	r26, 0x00	; 0
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <a2>
     3d0:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <a2+0x1>
     3d4:	a0 93 79 01 	sts	0x0179, r26	; 0x800179 <a2+0x2>
     3d8:	b0 93 7a 01 	sts	0x017A, r27	; 0x80017a <a2+0x3>
   //????? ???????? ????? ??????
   TWCR=(1<<TWINT)|(1<<TWEN);//?????????? "NACK": TWEA ?? ?????????
     3dc:	84 e8       	ldi	r24, 0x84	; 132
     3de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
   while(~TWCR&(1<<TWINT));//????????? ?????????? ????????
     3e2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3e6:	88 23       	and	r24, r24
     3e8:	e4 f7       	brge	.-8      	; 0x3e2 <TWI_Receivebytes+0x56>
   a3=TWDR;//?????????? ??????? ???? ?? MCP3421 ? ?????????? a2
     3ea:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	a0 e0       	ldi	r26, 0x00	; 0
     3f2:	b0 e0       	ldi	r27, 0x00	; 0
     3f4:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <a3>
     3f8:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <a3+0x1>
     3fc:	a0 93 75 01 	sts	0x0175, r26	; 0x800175 <a3+0x2>
     400:	b0 93 76 01 	sts	0x0176, r27	; 0x800176 <a3+0x3>
     404:	08 95       	ret

00000406 <TWI_Stop>:
void TWI_Stop(void)
{
	//?????????? ?????? TWI: TWEN=1
	//????????? ???? ????????? "Stop": TWSTO=1
	//????????? ???? ?????????? TWI: TWINT=1
	TWCR=(1<<TWEN)|(1<<TWSTO)|(1<<TWINT);
     406:	84 e9       	ldi	r24, 0x94	; 148
     408:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     40c:	08 95       	ret

0000040e <MCP3421_config>:
}

//????????? MCP3421
void MCP3421_config(void)
{
	TWI_Start();
     40e:	0e 94 b4 01 	call	0x368	; 0x368 <TWI_Start>
	TWI_Sendbyte(0b11010000);//?????????? ????? MCP3421: 1101000 + 0 ??????
     412:	80 ed       	ldi	r24, 0xD0	; 208
     414:	0e 94 bc 01 	call	0x378	; 0x378 <TWI_Sendbyte>
	TWI_Sendbyte(0b00011100);//?????????? ??????. ????: 00011100
     418:	8c e1       	ldi	r24, 0x1C	; 28
     41a:	0e 94 bc 01 	call	0x378	; 0x378 <TWI_Sendbyte>
	TWI_Stop();
     41e:	0e 94 03 02 	call	0x406	; 0x406 <TWI_Stop>
     422:	08 95       	ret

00000424 <MCP3421_read>:
}

//????????? ?????? ?? MCP3421

int MCP3421_read(void)
{
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
	TWI_ini(); //INCIALIZA EL TWI (TIENE UNA CONFIGURACIÓN ESPECIAL, NO HAY QUE TOCAR)
     428:	0e 94 b0 01 	call	0x360	; 0x360 <TWI_ini>
	MCP3421_config(); //configura el sensor MCP3421
     42c:	0e 94 07 02 	call	0x40e	; 0x40e <MCP3421_config>
	TWI_Start();
     430:	0e 94 b4 01 	call	0x368	; 0x368 <TWI_Start>
	TWI_Sendbyte(0b11010001);//?????????? ????? MCP3421: 1101000 + 1 ??????
     434:	81 ed       	ldi	r24, 0xD1	; 209
     436:	0e 94 bc 01 	call	0x378	; 0x378 <TWI_Sendbyte>
    TWI_Receivebytes();//??????? ????? ? ??????????? ?????????
     43a:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_Receivebytes>
	int Resultado = (((int)a1 << 10) | ((int)a2 << 2) | ((int)a3 >> 6))-2;
     43e:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <a1>
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	92 2f       	mov	r25, r18
     448:	99 0f       	add	r25, r25
     44a:	99 0f       	add	r25, r25
     44c:	c0 91 77 01 	lds	r28, 0x0177	; 0x800177 <a2>
     450:	d0 91 78 01 	lds	r29, 0x0178	; 0x800178 <a2+0x1>
     454:	cc 0f       	add	r28, r28
     456:	dd 1f       	adc	r29, r29
     458:	cc 0f       	add	r28, r28
     45a:	dd 1f       	adc	r29, r29
     45c:	c8 2b       	or	r28, r24
     45e:	d9 2b       	or	r29, r25
     460:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <a3>
     464:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <a3+0x1>
     468:	08 2e       	mov	r0, r24
     46a:	89 2f       	mov	r24, r25
     46c:	00 0c       	add	r0, r0
     46e:	88 1f       	adc	r24, r24
     470:	99 0b       	sbc	r25, r25
     472:	00 0c       	add	r0, r0
     474:	88 1f       	adc	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	c8 2b       	or	r28, r24
     47a:	d9 2b       	or	r29, r25
     47c:	22 97       	sbiw	r28, 0x02	; 2
    TWI_Stop();
     47e:	0e 94 03 02 	call	0x406	; 0x406 <TWI_Stop>
	return Resultado; 
}
     482:	ce 01       	movw	r24, r28
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	08 95       	ret

0000048a <i2c_read>:
	int MedicionTemperatura = atoi(buf);
	char buffer[10]; // Espacio para la cadena de caracteres
	sprintf(buffer, "%d", MedicionTemperatura); // Convierte el entero a una cadena
	uart_send_string(buffer);
	;
};
     48a:	94 ea       	ldi	r25, 0xA4	; 164
     48c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     490:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     494:	99 23       	and	r25, r25
     496:	e4 f7       	brge	.-8      	; 0x490 <i2c_read+0x6>
     498:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     49c:	9b 7f       	andi	r25, 0xFB	; 251
     49e:	98 30       	cpi	r25, 0x08	; 8
     4a0:	09 f0       	breq	.+2      	; 0x4a4 <i2c_read+0x1a>
     4a2:	57 c0       	rjmp	.+174    	; 0x552 <i2c_read+0xc8>
     4a4:	90 e9       	ldi	r25, 0x90	; 144
     4a6:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     4aa:	94 e8       	ldi	r25, 0x84	; 132
     4ac:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     4b0:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     4b4:	99 23       	and	r25, r25
     4b6:	e4 f7       	brge	.-8      	; 0x4b0 <i2c_read+0x26>
     4b8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     4bc:	9b 7f       	andi	r25, 0xFB	; 251
     4be:	98 31       	cpi	r25, 0x18	; 24
     4c0:	09 f0       	breq	.+2      	; 0x4c4 <i2c_read+0x3a>
     4c2:	47 c0       	rjmp	.+142    	; 0x552 <i2c_read+0xc8>
     4c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     4c8:	84 e8       	ldi	r24, 0x84	; 132
     4ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     4ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     4d2:	88 23       	and	r24, r24
     4d4:	e4 f7       	brge	.-8      	; 0x4ce <i2c_read+0x44>
     4d6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     4da:	8b 7f       	andi	r24, 0xFB	; 251
     4dc:	88 32       	cpi	r24, 0x28	; 40
     4de:	c9 f5       	brne	.+114    	; 0x552 <i2c_read+0xc8>
     4e0:	84 ea       	ldi	r24, 0xA4	; 164
     4e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     4e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     4ea:	88 23       	and	r24, r24
     4ec:	e4 f7       	brge	.-8      	; 0x4e6 <i2c_read+0x5c>
     4ee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     4f2:	8b 7f       	andi	r24, 0xFB	; 251
     4f4:	80 31       	cpi	r24, 0x10	; 16
     4f6:	69 f5       	brne	.+90     	; 0x552 <i2c_read+0xc8>
     4f8:	81 e9       	ldi	r24, 0x91	; 145
     4fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     4fe:	84 e8       	ldi	r24, 0x84	; 132
     500:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     504:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     508:	88 23       	and	r24, r24
     50a:	e4 f7       	brge	.-8      	; 0x504 <i2c_read+0x7a>
     50c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     510:	8b 7f       	andi	r24, 0xFB	; 251
     512:	80 34       	cpi	r24, 0x40	; 64
     514:	f1 f4       	brne	.+60     	; 0x552 <i2c_read+0xc8>
     516:	15 c0       	rjmp	.+42     	; 0x542 <i2c_read+0xb8>
     518:	21 15       	cp	r18, r1
     51a:	31 05       	cpc	r19, r1
     51c:	21 f4       	brne	.+8      	; 0x526 <i2c_read+0x9c>
     51e:	84 e8       	ldi	r24, 0x84	; 132
     520:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     524:	03 c0       	rjmp	.+6      	; 0x52c <i2c_read+0xa2>
     526:	84 ec       	ldi	r24, 0xC4	; 196
     528:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     52c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     530:	88 23       	and	r24, r24
     532:	e4 f7       	brge	.-8      	; 0x52c <i2c_read+0xa2>
     534:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     538:	fb 01       	movw	r30, r22
     53a:	80 83       	st	Z, r24
     53c:	a9 01       	movw	r20, r18
     53e:	6f 5f       	subi	r22, 0xFF	; 255
     540:	7f 4f       	sbci	r23, 0xFF	; 255
     542:	9a 01       	movw	r18, r20
     544:	21 50       	subi	r18, 0x01	; 1
     546:	31 09       	sbc	r19, r1
     548:	45 2b       	or	r20, r21
     54a:	31 f7       	brne	.-52     	; 0x518 <i2c_read+0x8e>
     54c:	84 e9       	ldi	r24, 0x94	; 148
     54e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     552:	08 95       	ret

00000554 <i2c_wwrite>:
     554:	94 ea       	ldi	r25, 0xA4	; 164
     556:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     55a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     55e:	99 23       	and	r25, r25
     560:	e4 f7       	brge	.-8      	; 0x55a <i2c_wwrite+0x6>
     562:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     566:	9b 7f       	andi	r25, 0xFB	; 251
     568:	98 30       	cpi	r25, 0x08	; 8
     56a:	d1 f5       	brne	.+116    	; 0x5e0 <i2c_wwrite+0x8c>
     56c:	90 e9       	ldi	r25, 0x90	; 144
     56e:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     572:	94 e8       	ldi	r25, 0x84	; 132
     574:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     578:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     57c:	99 23       	and	r25, r25
     57e:	e4 f7       	brge	.-8      	; 0x578 <i2c_wwrite+0x24>
     580:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     584:	9b 7f       	andi	r25, 0xFB	; 251
     586:	98 31       	cpi	r25, 0x18	; 24
     588:	59 f5       	brne	.+86     	; 0x5e0 <i2c_wwrite+0x8c>
     58a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     58e:	84 e8       	ldi	r24, 0x84	; 132
     590:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     594:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     598:	88 23       	and	r24, r24
     59a:	e4 f7       	brge	.-8      	; 0x594 <i2c_wwrite+0x40>
     59c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     5a0:	8b 7f       	andi	r24, 0xFB	; 251
     5a2:	88 32       	cpi	r24, 0x28	; 40
     5a4:	e9 f4       	brne	.+58     	; 0x5e0 <i2c_wwrite+0x8c>
     5a6:	14 c0       	rjmp	.+40     	; 0x5d0 <i2c_wwrite+0x7c>
     5a8:	fb 01       	movw	r30, r22
     5aa:	31 96       	adiw	r30, 0x01	; 1
     5ac:	db 01       	movw	r26, r22
     5ae:	8c 91       	ld	r24, X
     5b0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     5b4:	84 e8       	ldi	r24, 0x84	; 132
     5b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5ba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5be:	88 23       	and	r24, r24
     5c0:	e4 f7       	brge	.-8      	; 0x5ba <i2c_wwrite+0x66>
     5c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     5c6:	a9 01       	movw	r20, r18
     5c8:	8b 7f       	andi	r24, 0xFB	; 251
     5ca:	88 32       	cpi	r24, 0x28	; 40
     5cc:	49 f4       	brne	.+18     	; 0x5e0 <i2c_wwrite+0x8c>
     5ce:	bf 01       	movw	r22, r30
     5d0:	9a 01       	movw	r18, r20
     5d2:	21 50       	subi	r18, 0x01	; 1
     5d4:	31 09       	sbc	r19, r1
     5d6:	45 2b       	or	r20, r21
     5d8:	39 f7       	brne	.-50     	; 0x5a8 <i2c_wwrite+0x54>
     5da:	84 e9       	ldi	r24, 0x94	; 148
     5dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5e0:	08 95       	ret

000005e2 <mcp_set_adc_resolution>:
     5e2:	1f 93       	push	r17
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	1f 92       	push	r1
     5ea:	cd b7       	in	r28, 0x3d	; 61
     5ec:	de b7       	in	r29, 0x3e	; 62
     5ee:	18 2f       	mov	r17, r24
     5f0:	41 e0       	ldi	r20, 0x01	; 1
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	be 01       	movw	r22, r28
     5f6:	6f 5f       	subi	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	0e 94 45 02 	call	0x48a	; 0x48a <i2c_read>
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	28 2f       	mov	r18, r24
     604:	2f 79       	andi	r18, 0x9F	; 159
     606:	30 e2       	ldi	r19, 0x20	; 32
     608:	13 9f       	mul	r17, r19
     60a:	c0 01       	movw	r24, r0
     60c:	11 24       	eor	r1, r1
     60e:	82 2b       	or	r24, r18
     610:	89 83       	std	Y+1, r24	; 0x01
     612:	41 e0       	ldi	r20, 0x01	; 1
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	be 01       	movw	r22, r28
     618:	6f 5f       	subi	r22, 0xFF	; 255
     61a:	7f 4f       	sbci	r23, 0xFF	; 255
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	0e 94 aa 02 	call	0x554	; 0x554 <i2c_wwrite>
     622:	0f 90       	pop	r0
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	08 95       	ret

0000062c <mcp_set_power_mode>:
     62c:	1f 93       	push	r17
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	1f 92       	push	r1
     634:	cd b7       	in	r28, 0x3d	; 61
     636:	de b7       	in	r29, 0x3e	; 62
     638:	18 2f       	mov	r17, r24
     63a:	41 e0       	ldi	r20, 0x01	; 1
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	be 01       	movw	r22, r28
     640:	6f 5f       	subi	r22, 0xFF	; 255
     642:	7f 4f       	sbci	r23, 0xFF	; 255
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	0e 94 45 02 	call	0x48a	; 0x48a <i2c_read>
     64a:	89 81       	ldd	r24, Y+1	; 0x01
     64c:	8e 7f       	andi	r24, 0xFE	; 254
     64e:	18 2b       	or	r17, r24
     650:	19 83       	std	Y+1, r17	; 0x01
     652:	41 e0       	ldi	r20, 0x01	; 1
     654:	50 e0       	ldi	r21, 0x00	; 0
     656:	be 01       	movw	r22, r28
     658:	6f 5f       	subi	r22, 0xFF	; 255
     65a:	7f 4f       	sbci	r23, 0xFF	; 255
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	0e 94 aa 02 	call	0x554	; 0x554 <i2c_wwrite>
     662:	0f 90       	pop	r0
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	08 95       	ret

0000066c <mcp_read_temp_float>:
     66c:	ef 92       	push	r14
     66e:	ff 92       	push	r15
     670:	1f 93       	push	r17
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	00 d0       	rcall	.+0      	; 0x678 <mcp_read_temp_float+0xc>
     678:	cd b7       	in	r28, 0x3d	; 61
     67a:	de b7       	in	r29, 0x3e	; 62
     67c:	42 e0       	ldi	r20, 0x02	; 2
     67e:	50 e0       	ldi	r21, 0x00	; 0
     680:	be 01       	movw	r22, r28
     682:	6f 5f       	subi	r22, 0xFF	; 255
     684:	7f 4f       	sbci	r23, 0xFF	; 255
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	0e 94 45 02 	call	0x48a	; 0x48a <i2c_read>
     68c:	e9 80       	ldd	r14, Y+1	; 0x01
     68e:	fa 80       	ldd	r15, Y+2	; 0x02
     690:	b7 01       	movw	r22, r14
     692:	77 27       	eor	r23, r23
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__floatunsisf>
     69c:	1f 2d       	mov	r17, r15
     69e:	f7 fe       	sbrs	r15, 7
     6a0:	06 c0       	rjmp	.+12     	; 0x6ae <mcp_read_temp_float+0x42>
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	40 e0       	ldi	r20, 0x00	; 0
     6a8:	5f e3       	ldi	r21, 0x3F	; 63
     6aa:	0e 94 48 06 	call	0xc90	; 0xc90 <__addsf3>
     6ae:	16 ff       	sbrs	r17, 6
     6b0:	06 c0       	rjmp	.+12     	; 0x6be <mcp_read_temp_float+0x52>
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	40 e8       	ldi	r20, 0x80	; 128
     6b8:	5e e3       	ldi	r21, 0x3E	; 62
     6ba:	0e 94 48 06 	call	0xc90	; 0xc90 <__addsf3>
     6be:	15 ff       	sbrs	r17, 5
     6c0:	06 c0       	rjmp	.+12     	; 0x6ce <mcp_read_temp_float+0x62>
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	40 e0       	ldi	r20, 0x00	; 0
     6c8:	5e e3       	ldi	r21, 0x3E	; 62
     6ca:	0e 94 48 06 	call	0xc90	; 0xc90 <__addsf3>
     6ce:	14 ff       	sbrs	r17, 4
     6d0:	06 c0       	rjmp	.+12     	; 0x6de <mcp_read_temp_float+0x72>
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	40 e8       	ldi	r20, 0x80	; 128
     6d8:	5d e3       	ldi	r21, 0x3D	; 61
     6da:	0e 94 48 06 	call	0xc90	; 0xc90 <__addsf3>
     6de:	0f 90       	pop	r0
     6e0:	0f 90       	pop	r0
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	ff 90       	pop	r15
     6ea:	ef 90       	pop	r14
     6ec:	08 95       	ret

000006ee <LeerTemperatura>:
int LeerTemperatura(void){
     6ee:	8f 92       	push	r8
     6f0:	9f 92       	push	r9
     6f2:	af 92       	push	r10
     6f4:	bf 92       	push	r11
     6f6:	cf 92       	push	r12
     6f8:	df 92       	push	r13
     6fa:	ef 92       	push	r14
     6fc:	ff 92       	push	r15
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
     70a:	aa 97       	sbiw	r28, 0x2a	; 42
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	f8 94       	cli
     710:	de bf       	out	0x3e, r29	; 62
     712:	0f be       	out	0x3f, r0	; 63
     714:	cd bf       	out	0x3d, r28	; 61
	int i=1;
char buf[32];
uart_init();
     716:	0e 94 4c 04 	call	0x898	; 0x898 <uart_init>
//init MCP9800 sensor
mcp_init();
mcp_set_adc_resolution(MCP_ADC_RES_12);
     71a:	83 e0       	ldi	r24, 0x03	; 3
     71c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <mcp_set_adc_resolution>
mcp_set_power_mode(MCP_POWER_UP);
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	0e 94 16 03 	call	0x62c	; 0x62c <mcp_set_power_mode>
for (i=1; i<=250; i++)
     726:	01 e0       	ldi	r16, 0x01	; 1
     728:	10 e0       	ldi	r17, 0x00	; 0
     72a:	3c c0       	rjmp	.+120    	; 0x7a4 <LeerTemperatura+0xb6>
{
	float temp = mcp_read_temp_float();
     72c:	0e 94 36 03 	call	0x66c	; 0x66c <mcp_read_temp_float>
     730:	4b 01       	movw	r8, r22
     732:	5c 01       	movw	r10, r24
	int temp_whole = (int)temp; // Extract whole number part
     734:	0e 94 26 07 	call	0xe4c	; 0xe4c <__fixsfsi>
     738:	6b 01       	movw	r12, r22
     73a:	7c 01       	movw	r14, r24
	int temp_frac = (int)((temp - temp_whole) * 10000); // Extract fractional part with desired precision
     73c:	07 2e       	mov	r0, r23
     73e:	00 0c       	add	r0, r0
     740:	88 0b       	sbc	r24, r24
     742:	99 0b       	sbc	r25, r25
     744:	0e 94 5e 07 	call	0xebc	; 0xebc <__floatsisf>
     748:	9b 01       	movw	r18, r22
     74a:	ac 01       	movw	r20, r24
     74c:	c5 01       	movw	r24, r10
     74e:	b4 01       	movw	r22, r8
     750:	0e 94 47 06 	call	0xc8e	; 0xc8e <__subsf3>
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e4       	ldi	r19, 0x40	; 64
     758:	4c e1       	ldi	r20, 0x1C	; 28
     75a:	56 e4       	ldi	r21, 0x46	; 70
     75c:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__mulsf3>
     760:	0e 94 26 07 	call	0xe4c	; 0xe4c <__fixsfsi>
     764:	9b 01       	movw	r18, r22
	if(temp_frac < 0) temp_frac = -temp_frac; // Ensure the fractional part is positive
     766:	77 23       	and	r23, r23
     768:	24 f4       	brge	.+8      	; 0x772 <LeerTemperatura+0x84>
     76a:	22 27       	eor	r18, r18
     76c:	33 27       	eor	r19, r19
     76e:	26 1b       	sub	r18, r22
     770:	37 0b       	sbc	r19, r23
	// Now print both parts separately
	sprintf(buf, "%d.%04d", temp_whole, temp_frac);
     772:	3f 93       	push	r19
     774:	2f 93       	push	r18
     776:	df 92       	push	r13
     778:	cf 92       	push	r12
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	9f 93       	push	r25
     780:	8f 93       	push	r24
     782:	ce 01       	movw	r24, r28
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	9f 93       	push	r25
     788:	8f 93       	push	r24
     78a:	0e 94 a5 08 	call	0x114a	; 0x114a <sprintf>
	// Send the temperature string over UART
	uart_send_string("");
     78e:	87 e1       	ldi	r24, 0x17	; 23
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	0e 94 5f 04 	call	0x8be	; 0x8be <uart_send_string>
uart_init();
//init MCP9800 sensor
mcp_init();
mcp_set_adc_resolution(MCP_ADC_RES_12);
mcp_set_power_mode(MCP_POWER_UP);
for (i=1; i<=250; i++)
     796:	0f 5f       	subi	r16, 0xFF	; 255
     798:	1f 4f       	sbci	r17, 0xFF	; 255
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	de bf       	out	0x3e, r29	; 62
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	cd bf       	out	0x3d, r28	; 61
     7a4:	0b 3f       	cpi	r16, 0xFB	; 251
     7a6:	11 05       	cpc	r17, r1
     7a8:	0c f2       	brlt	.-126    	; 0x72c <LeerTemperatura+0x3e>
	// Now print both parts separately
	sprintf(buf, "%d.%04d", temp_whole, temp_frac);
	// Send the temperature string over UART
	uart_send_string("");
}
uart_send_string("");
     7aa:	87 e1       	ldi	r24, 0x17	; 23
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	0e 94 5f 04 	call	0x8be	; 0x8be <uart_send_string>
//uart_send_string("Temperatura: ");
//uart_send_string(buf);
//uart_send_newline();
// Convert the formatted string to an integer
int MedicionTemperatura = atoi(buf);
     7b2:	ce 01       	movw	r24, r28
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <atoi>
char buffer[10]; // Espacio para la cadena de caracteres
sprintf(buffer, "%d", MedicionTemperatura); // Convierte el entero a una cadena
     7ba:	9f 93       	push	r25
     7bc:	8f 93       	push	r24
     7be:	88 e1       	ldi	r24, 0x18	; 24
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	9f 93       	push	r25
     7c4:	8f 93       	push	r24
     7c6:	8e 01       	movw	r16, r28
     7c8:	0f 5d       	subi	r16, 0xDF	; 223
     7ca:	1f 4f       	sbci	r17, 0xFF	; 255
     7cc:	1f 93       	push	r17
     7ce:	0f 93       	push	r16
     7d0:	0e 94 a5 08 	call	0x114a	; 0x114a <sprintf>
MedicionTemperatura = atoi(buffer);
     7d4:	c8 01       	movw	r24, r16
     7d6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <atoi>
    return MedicionTemperatura;}
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	aa 96       	adiw	r28, 0x2a	; 42
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	f8 94       	cli
     7ec:	de bf       	out	0x3e, r29	; 62
     7ee:	0f be       	out	0x3f, r0	; 63
     7f0:	cd bf       	out	0x3d, r28	; 61
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	ff 90       	pop	r15
     7fc:	ef 90       	pop	r14
     7fe:	df 90       	pop	r13
     800:	cf 90       	pop	r12
     802:	bf 90       	pop	r11
     804:	af 90       	pop	r10
     806:	9f 90       	pop	r9
     808:	8f 90       	pop	r8
     80a:	08 95       	ret

0000080c <ConfigurarPinesSensores>:
	uint8_t BotonSeleccionar = 0; // Estado del sensor de la taza (0 o 1)
	uint8_t BotonAceptar = 0; // Estado del sensor de la puerta (0 o 1)
	char Buffer[2];
void ConfigurarPinesSensores() {
	// ConfiGURAMOS CIERTOS PINES DEL PUERTO D COMO ENTRADAS DIGITALES
	DDRD &= ~(1 << PD3); // PD3 
     80c:	8a b1       	in	r24, 0x0a	; 10
     80e:	87 7f       	andi	r24, 0xF7	; 247
     810:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << PD4); // PD4
     812:	8a b1       	in	r24, 0x0a	; 10
     814:	8f 7e       	andi	r24, 0xEF	; 239
     816:	8a b9       	out	0x0a, r24	; 10
	
	// Activamos las resistencias de pull-up internas
	// esto quiere decir que los sensores actuan por nivel bajo
	PORTD |= (1 << PD3); // PD3
     818:	8b b1       	in	r24, 0x0b	; 11
     81a:	88 60       	ori	r24, 0x08	; 8
     81c:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << PD4); // PD4
     81e:	8b b1       	in	r24, 0x0b	; 11
     820:	80 61       	ori	r24, 0x10	; 16
     822:	8b b9       	out	0x0b, r24	; 11
     824:	08 95       	ret

00000826 <LeerSensorPuerta>:

}

int LeerSensorPuerta(void){   //NOTA: SE DA POR ENTENDIDO QUE SESNSOR PUERTA ESTÁ EN EL PIN PD3
						   //      Y SENSOR TAZA EN PD4
  SensorPuerta = !((PIND & (1 << PD4)) ? 1 : 0); // Obtiene el nivel  lógico del sensor de la puerta
     826:	89 b1       	in	r24, 0x09	; 9
     828:	82 95       	swap	r24
     82a:	8f 70       	andi	r24, 0x0F	; 15
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	89 27       	eor	r24, r25
     830:	81 70       	andi	r24, 0x01	; 1
     832:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <SensorPuerta>
  return SensorPuerta;
}
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	08 95       	ret

0000083a <LeerSensorTaza>:

int LeerSensorTaza(void){   //NOTA: SE DA POR ENTENDIDO QUE SESNSOR PUERTA ESTÁ EN EL PIN PD3
	//      Y SENSOR TAZA EN PD4
	SensorTaza = !((PIND & (1 << PD3)) ? 1 : 0); // Obtiene el nivel lógico de SensorTaza
     83a:	89 b1       	in	r24, 0x09	; 9
     83c:	86 95       	lsr	r24
     83e:	86 95       	lsr	r24
     840:	86 95       	lsr	r24
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	89 27       	eor	r24, r25
     846:	81 70       	andi	r24, 0x01	; 1
     848:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <SensorTaza>
	return SensorTaza;
}
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	08 95       	ret

00000850 <ConfigurarBotones>:
void ConfigurarBotones(void){
	DDRD &= ~(1 << PPD5); // PD5 como entrada
     850:	8a b1       	in	r24, 0x0a	; 10
     852:	8f 7d       	andi	r24, 0xDF	; 223
     854:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << PPD6); // PD6 como entrada
     856:	8a b1       	in	r24, 0x0a	; 10
     858:	8f 7b       	andi	r24, 0xBF	; 191
     85a:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PPD5); // Resistencia de pull up
     85c:	8b b1       	in	r24, 0x0b	; 11
     85e:	80 62       	ori	r24, 0x20	; 32
     860:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << PPD6); // Resistencia de pull up
     862:	8b b1       	in	r24, 0x0b	; 11
     864:	80 64       	ori	r24, 0x40	; 64
     866:	8b b9       	out	0x0b, r24	; 11
     868:	08 95       	ret

0000086a <LeerBotonSeleccionar>:
}
int LeerBotonSeleccionar(void){   //NOTA: SE DA POR ENTENDIDO QUE SESNSOR PUERTA ESTÁ EN EL PIN PD3
	//      Y SENSOR TAZA EN PD4
	BotonSeleccionar = !((PIND & (1 << PPD5)) ? 1 : 0); // Obtiene el nivel  lógico del sensor de la puerta
     86a:	89 b1       	in	r24, 0x09	; 9
     86c:	82 95       	swap	r24
     86e:	86 95       	lsr	r24
     870:	87 70       	andi	r24, 0x07	; 7
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	89 27       	eor	r24, r25
     876:	81 70       	andi	r24, 0x01	; 1
     878:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <BotonSeleccionar>
	return BotonSeleccionar;
}
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	08 95       	ret

00000880 <LeerBotonAceptar>:

int LeerBotonAceptar(void){   //NOTA: SE DA POR ENTENDIDO QUE SESNSOR PUERTA ESTÁ EN EL PIN PD3
	//      Y SENSOR TAZA EN PD4
	BotonAceptar = !((PIND & (1 << PPD6)) ? 1 : 0); // Obtiene el nivel lógico de SensorTaza
     880:	89 b1       	in	r24, 0x09	; 9
     882:	82 95       	swap	r24
     884:	86 95       	lsr	r24
     886:	86 95       	lsr	r24
     888:	83 70       	andi	r24, 0x03	; 3
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	89 27       	eor	r24, r25
     88e:	81 70       	andi	r24, 0x01	; 1
     890:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
	return BotonAceptar;
}	
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	08 95       	ret

00000898 <uart_init>:

#include "UART.h"
void uart_init() {
	// Configurar la velocidad de transmisión a 9600
	UBRR0H = 0;
     898:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 103;
     89c:	87 e6       	ldi	r24, 0x67	; 103
     89e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilitar el transmisor y el receptor
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);
     8a2:	88 e1       	ldi	r24, 0x18	; 24
     8a4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// Configurar el formato del trama: 8 bits de datos, 1 bit de parada
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     8a8:	86 e0       	ldi	r24, 0x06	; 6
     8aa:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     8ae:	08 95       	ret

000008b0 <uart_send_char>:
}

// Enviar un solo carácter por la UART
void uart_send_char(char c) {
	while (!(UCSR0A & (1 << UDRE0))); // Esperar hasta que el buffer esté vacío
     8b0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     8b4:	95 ff       	sbrs	r25, 5
     8b6:	fc cf       	rjmp	.-8      	; 0x8b0 <uart_send_char>
	UDR0 = c;
     8b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     8bc:	08 95       	ret

000008be <uart_send_string>:
}

// Enviar una cadena (texto) terminada en nulo por la UART
void uart_send_string(const char* str) {
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	ec 01       	movw	r28, r24
	while (*str) {
     8c4:	03 c0       	rjmp	.+6      	; 0x8cc <uart_send_string+0xe>
		uart_send_char(*str);
     8c6:	0e 94 58 04 	call	0x8b0	; 0x8b0 <uart_send_char>
		str++;
     8ca:	21 96       	adiw	r28, 0x01	; 1
	UDR0 = c;
}

// Enviar una cadena (texto) terminada en nulo por la UART
void uart_send_string(const char* str) {
	while (*str) {
     8cc:	88 81       	ld	r24, Y
     8ce:	81 11       	cpse	r24, r1
     8d0:	fa cf       	rjmp	.-12     	; 0x8c6 <uart_send_string+0x8>
		uart_send_char(*str);
		str++;
	}
}
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	08 95       	ret

000008d8 <uart_send_newline>:

// Enviar un carácter de salto de línea por la UART
void uart_send_newline() {
	uart_send_char(13);
     8d8:	8d e0       	ldi	r24, 0x0D	; 13
     8da:	0e 94 58 04 	call	0x8b0	; 0x8b0 <uart_send_char>
	uart_send_char(10);
     8de:	8a e0       	ldi	r24, 0x0A	; 10
     8e0:	0e 94 58 04 	call	0x8b0	; 0x8b0 <uart_send_char>
     8e4:	08 95       	ret

000008e6 <MenuNivelesLcd>:
 uint8_t Simultaneidad = 0; // ¿Hay simultaneidad de presionamiento de los botones por más de 5 segundos? (0 o 1)
											
// Configurar el Timer1 para que interrumpa 

void MenuNivelesLcd(void){ //Esto se ejecuta só´lo si se han presionado "Seleccionar" y "Aceptar" por más de 5 segundos
	lcd_init(); // Iniciamos comunicación con el lcd
     8e6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_init>
	escribirEnLCD(" Medidas");
     8ea:	8b e1       	ldi	r24, 0x1B	; 27
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
     8f2:	27 e6       	ldi	r18, 0x67	; 103
     8f4:	89 eb       	ldi	r24, 0xB9	; 185
     8f6:	95 e6       	ldi	r25, 0x65	; 101
     8f8:	21 50       	subi	r18, 0x01	; 1
     8fa:	80 40       	sbci	r24, 0x00	; 0
     8fc:	90 40       	sbci	r25, 0x00	; 0
     8fe:	e1 f7       	brne	.-8      	; 0x8f8 <MenuNivelesLcd+0x12>
     900:	00 c0       	rjmp	.+0      	; 0x902 <__stack+0x3>
     902:	00 00       	nop
	_delay_ms(33333);
	i2c_stop(); // cerramos la comunicación i2c
     904:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_stop>
     908:	08 95       	ret

0000090a <IniciarTemporizador>:
}
void IniciarTemporizador(void) {
	TCCR1B |= (1 << WGM12); // Modo CTC
     90a:	e1 e8       	ldi	r30, 0x81	; 129
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	80 81       	ld	r24, Z
     910:	88 60       	ori	r24, 0x08	; 8
     912:	80 83       	st	Z, r24
	OCR1A = 64; // 
     914:	80 e4       	ldi	r24, 0x40	; 64
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     91c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 |= (1 << OCIE1A); // Habilitar interrupción por comparación
     920:	af e6       	ldi	r26, 0x6F	; 111
     922:	b0 e0       	ldi	r27, 0x00	; 0
     924:	8c 91       	ld	r24, X
     926:	82 60       	ori	r24, 0x02	; 2
     928:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS11) | (1 << CS10); // 
     92a:	80 81       	ld	r24, Z
     92c:	83 60       	ori	r24, 0x03	; 3
     92e:	80 83       	st	Z, r24
     930:	08 95       	ret

00000932 <__vector_11>:
}

// Rutina de servicio de interrupción para EL TEMPORIZADOR
ISR(TIMER1_COMPA_vect) {
     932:	1f 92       	push	r1
     934:	0f 92       	push	r0
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	0f 92       	push	r0
     93a:	11 24       	eor	r1, r1
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	2f 93       	push	r18
     942:	3f 93       	push	r19
     944:	4f 93       	push	r20
     946:	5f 93       	push	r21
     948:	6f 93       	push	r22
     94a:	7f 93       	push	r23
     94c:	8f 93       	push	r24
     94e:	9f 93       	push	r25
     950:	af 93       	push	r26
     952:	bf 93       	push	r27
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	ef 93       	push	r30
     95a:	ff 93       	push	r31
	if ((BotonSeleccionarr == 1) && (BotonAceptarr == 1)) {
     95c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <BotonSeleccionarr>
     960:	81 30       	cpi	r24, 0x01	; 1
     962:	81 f4       	brne	.+32     	; 0x984 <__vector_11+0x52>
     964:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <BotonAceptarr>
     968:	81 30       	cpi	r24, 0x01	; 1
     96a:	61 f4       	brne	.+24     	; 0x984 <__vector_11+0x52>
	     ContadorTiempo++;
     96c:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <ContadorTiempo>
     970:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <ContadorTiempo+0x1>
     974:	01 96       	adiw	r24, 0x01	; 1
     976:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <ContadorTiempo+0x1>
     97a:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <ContadorTiempo>
		 Simultaneidad=0;
     97e:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <Simultaneidad>
     982:	06 c0       	rjmp	.+12     	; 0x990 <__vector_11+0x5e>
		 
		} else {
		 // Reiniciar contador si el botón no está presionado
		ContadorTiempo=0;
     984:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <ContadorTiempo+0x1>
     988:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <ContadorTiempo>
		Simultaneidad=0;
     98c:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <Simultaneidad>
	}

		 // Incrementar el contador de tiempo

	if (ContadorTiempo == 18999) { // 4978 m ~5 seg
     990:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <ContadorTiempo>
     994:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <ContadorTiempo+0x1>
     998:	87 33       	cpi	r24, 0x37	; 55
     99a:	2a e4       	ldi	r18, 0x4A	; 74
     99c:	92 07       	cpc	r25, r18
     99e:	b1 f5       	brne	.+108    	; 0xa0c <__vector_11+0xda>
		int Segundos=ContadorTiempo/3756; // Para que el resultado dé, mas o menos, en segundos
     9a0:	6c ea       	ldi	r22, 0xAC	; 172
     9a2:	7e e0       	ldi	r23, 0x0E	; 14
     9a4:	0e 94 57 08 	call	0x10ae	; 0x10ae <__divmodhi4>
		 sprintf(Buffer, "%d", Segundos); // Convierte el entero a una cadena
     9a8:	7f 93       	push	r23
     9aa:	6f 93       	push	r22
     9ac:	08 e1       	ldi	r16, 0x18	; 24
     9ae:	11 e0       	ldi	r17, 0x01	; 1
     9b0:	1f 93       	push	r17
     9b2:	0f 93       	push	r16
     9b4:	c5 e9       	ldi	r28, 0x95	; 149
     9b6:	d1 e0       	ldi	r29, 0x01	; 1
     9b8:	df 93       	push	r29
     9ba:	cf 93       	push	r28
     9bc:	0e 94 a5 08 	call	0x114a	; 0x114a <sprintf>
		// MenuNivelesLcd();
		 Simultaneidad=1; // 
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <Simultaneidad>
		 uart_send_newline();
     9c6:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <uart_send_newline>
		 ContadorTiempo = 0; // Reiniciar el contador de tiempo
     9ca:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <ContadorTiempo+0x1>
     9ce:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <ContadorTiempo>
		 sprintf(Buffer, "%d", Simultaneidad); // Convierte el entero a una cadena
     9d2:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <Simultaneidad>
     9d6:	1f 92       	push	r1
     9d8:	8f 93       	push	r24
     9da:	1f 93       	push	r17
     9dc:	0f 93       	push	r16
     9de:	df 93       	push	r29
     9e0:	cf 93       	push	r28
     9e2:	0e 94 a5 08 	call	0x114a	; 0x114a <sprintf>
		 uart_send_string(Buffer);
     9e6:	ce 01       	movw	r24, r28
     9e8:	0e 94 5f 04 	call	0x8be	; 0x8be <uart_send_string>
		 lcd_init();
     9ec:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_init>
		 escribirEnLCD("AAAAA");
     9f0:	84 e2       	ldi	r24, 0x24	; 36
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
		 i2c_stop();
     9f8:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_stop>
     9fc:	8d b7       	in	r24, 0x3d	; 61
     9fe:	9e b7       	in	r25, 0x3e	; 62
     a00:	0c 96       	adiw	r24, 0x0c	; 12
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	f8 94       	cli
     a06:	9e bf       	out	0x3e, r25	; 62
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	8d bf       	out	0x3d, r24	; 61
	}
}
     a0c:	ff 91       	pop	r31
     a0e:	ef 91       	pop	r30
     a10:	df 91       	pop	r29
     a12:	cf 91       	pop	r28
     a14:	bf 91       	pop	r27
     a16:	af 91       	pop	r26
     a18:	9f 91       	pop	r25
     a1a:	8f 91       	pop	r24
     a1c:	7f 91       	pop	r23
     a1e:	6f 91       	pop	r22
     a20:	5f 91       	pop	r21
     a22:	4f 91       	pop	r20
     a24:	3f 91       	pop	r19
     a26:	2f 91       	pop	r18
     a28:	1f 91       	pop	r17
     a2a:	0f 91       	pop	r16
     a2c:	0f 90       	pop	r0
     a2e:	0f be       	out	0x3f, r0	; 63
     a30:	0f 90       	pop	r0
     a32:	1f 90       	pop	r1
     a34:	18 95       	reti

00000a36 <LeerBotones>:

void LeerBotones(void) {
	BotonSeleccionarr = LeerBotonSeleccionar();
     a36:	0e 94 35 04 	call	0x86a	; 0x86a <LeerBotonSeleccionar>
     a3a:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <BotonSeleccionarr>
	BotonAceptarr = LeerBotonAceptar();
     a3e:	0e 94 40 04 	call	0x880	; 0x880 <LeerBotonAceptar>
     a42:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <BotonAceptarr>

	if (BotonSeleccionarr == 1) {
     a46:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <BotonSeleccionarr>
     a4a:	81 30       	cpi	r24, 0x01	; 1
     a4c:	09 f0       	breq	.+2      	; 0xa50 <LeerBotones+0x1a>
     a4e:	47 c0       	rjmp	.+142    	; 0xade <LeerBotones+0xa8>
		SelectorMenuLCD = SelectorMenuLCD + 1;
     a50:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <SelectorMenuLCD>
     a54:	8f 5f       	subi	r24, 0xFF	; 255
     a56:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <SelectorMenuLCD>
		if (SelectorMenuLCD == 5) {
     a5a:	85 30       	cpi	r24, 0x05	; 5
     a5c:	61 f4       	brne	.+24     	; 0xa76 <LeerBotones+0x40>
			SelectorMenuLCD = 1;
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <SelectorMenuLCD>
     a64:	08 c0       	rjmp	.+16     	; 0xa76 <LeerBotones+0x40>
		}

		while (BotonSeleccionarr == 1) {  // Para evitar rebotes
			if (Simultaneidad==0){
     a66:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <Simultaneidad>
     a6a:	81 11       	cpse	r24, r1
     a6c:	04 c0       	rjmp	.+8      	; 0xa76 <LeerBotones+0x40>
			BotonSeleccionarr = LeerBotonSeleccionar();}  // Esperar a que se suelte el botón
     a6e:	0e 94 35 04 	call	0x86a	; 0x86a <LeerBotonSeleccionar>
     a72:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <BotonSeleccionarr>
		SelectorMenuLCD = SelectorMenuLCD + 1;
		if (SelectorMenuLCD == 5) {
			SelectorMenuLCD = 1;
		}

		while (BotonSeleccionarr == 1) {  // Para evitar rebotes
     a76:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <BotonSeleccionarr>
     a7a:	81 30       	cpi	r24, 0x01	; 1
     a7c:	a1 f3       	breq	.-24     	; 0xa66 <LeerBotones+0x30>
			if (Simultaneidad==0){
			BotonSeleccionarr = LeerBotonSeleccionar();}  // Esperar a que se suelte el botón
		}

		
		if (Simultaneidad==0){
     a7e:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <Simultaneidad>
     a82:	81 11       	cpse	r24, r1
     a84:	2c c0       	rjmp	.+88     	; 0xade <LeerBotones+0xa8>
			lcd_init(); // Inicializar el LCD
     a86:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_init>
			switch (SelectorMenuLCD) {
     a8a:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <SelectorMenuLCD>
     a8e:	82 30       	cpi	r24, 0x02	; 2
     a90:	71 f0       	breq	.+28     	; 0xaae <LeerBotones+0x78>
     a92:	18 f4       	brcc	.+6      	; 0xa9a <LeerBotones+0x64>
     a94:	81 30       	cpi	r24, 0x01	; 1
     a96:	31 f0       	breq	.+12     	; 0xaa4 <LeerBotones+0x6e>
     a98:	19 c0       	rjmp	.+50     	; 0xacc <LeerBotones+0x96>
     a9a:	83 30       	cpi	r24, 0x03	; 3
     a9c:	69 f0       	breq	.+26     	; 0xab8 <LeerBotones+0x82>
     a9e:	84 30       	cpi	r24, 0x04	; 4
     aa0:	81 f0       	breq	.+32     	; 0xac2 <LeerBotones+0x8c>
     aa2:	14 c0       	rjmp	.+40     	; 0xacc <LeerBotones+0x96>
			case 1:
			escribirEnLCD(" Bebida 1");
     aa4:	8a e2       	ldi	r24, 0x2A	; 42
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
			break;
     aac:	16 c0       	rjmp	.+44     	; 0xada <LeerBotones+0xa4>
			case 2:
			escribirEnLCD(" Bebida 2");
     aae:	84 e3       	ldi	r24, 0x34	; 52
     ab0:	91 e0       	ldi	r25, 0x01	; 1
     ab2:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
			break;
     ab6:	11 c0       	rjmp	.+34     	; 0xada <LeerBotones+0xa4>
			case 3:
			escribirEnLCD(" Bebida 3");
     ab8:	8e e3       	ldi	r24, 0x3E	; 62
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
			break;
     ac0:	0c c0       	rjmp	.+24     	; 0xada <LeerBotones+0xa4>
			case 4:
			escribirEnLCD(" Bebida 4");
     ac2:	88 e4       	ldi	r24, 0x48	; 72
     ac4:	91 e0       	ldi	r25, 0x01	; 1
     ac6:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
			break;
     aca:	07 c0       	rjmp	.+14     	; 0xada <LeerBotones+0xa4>
			default:
			SelectorMenuLCD=1;
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <SelectorMenuLCD>
			escribirEnLCD(" Bebida 1");
     ad2:	8a e2       	ldi	r24, 0x2A	; 42
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
			break;
		}
		i2c_stop();}
     ada:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_stop>
     ade:	08 95       	ret

00000ae0 <LeerSensores>:
	}
}
void LeerSensores(void){
	 SensorrTaza=LeerSensorTaza();
     ae0:	0e 94 1d 04 	call	0x83a	; 0x83a <LeerSensorTaza>
     ae4:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <SensorrTaza>
	 SensorrPuerta=LeerSensorPuerta();
     ae8:	0e 94 13 04 	call	0x826	; 0x826 <LeerSensorPuerta>
     aec:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <SensorrPuerta>
     af0:	08 95       	ret

00000af2 <MedicionPolvos>:
	 } 
void MedicionPolvos(void){
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
	leer_ADC(0); // Lee el valor del pin PC0
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 64 00 	call	0xc8	; 0xc8 <leer_ADC>
	NivelPolvo1 = ((float)ADC/1023)*100; // Guarda el valor del ADC en porcentaje (por eso dividimos por la resolución y por 100)
     afe:	c8 e7       	ldi	r28, 0x78	; 120
     b00:	d0 e0       	ldi	r29, 0x00	; 0
     b02:	68 81       	ld	r22, Y
     b04:	79 81       	ldd	r23, Y+1	; 0x01
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__floatunsisf>
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	30 ec       	ldi	r19, 0xC0	; 192
     b12:	4f e7       	ldi	r20, 0x7F	; 127
     b14:	54 e4       	ldi	r21, 0x44	; 68
     b16:	0e 94 b4 06 	call	0xd68	; 0xd68 <__divsf3>
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	48 ec       	ldi	r20, 0xC8	; 200
     b20:	52 e4       	ldi	r21, 0x42	; 66
     b22:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__mulsf3>
     b26:	0e 94 26 07 	call	0xe4c	; 0xe4c <__fixsfsi>
     b2a:	70 93 8c 01 	sts	0x018C, r23	; 0x80018c <NivelPolvo1+0x1>
     b2e:	60 93 8b 01 	sts	0x018B, r22	; 0x80018b <NivelPolvo1>
    leer_ADC(1); // Lee el valor del pin PC0
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 94 64 00 	call	0xc8	; 0xc8 <leer_ADC>
    NivelPolvo2 = ((float)ADC/1023)*100; // Guarda el valor del ADC en porcentaje (por eso dividimos por la resolución y por 100)
     b3a:	68 81       	ld	r22, Y
     b3c:	79 81       	ldd	r23, Y+1	; 0x01
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__floatunsisf>
     b46:	20 e0       	ldi	r18, 0x00	; 0
     b48:	30 ec       	ldi	r19, 0xC0	; 192
     b4a:	4f e7       	ldi	r20, 0x7F	; 127
     b4c:	54 e4       	ldi	r21, 0x44	; 68
     b4e:	0e 94 b4 06 	call	0xd68	; 0xd68 <__divsf3>
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	48 ec       	ldi	r20, 0xC8	; 200
     b58:	52 e4       	ldi	r21, 0x42	; 66
     b5a:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__mulsf3>
     b5e:	0e 94 26 07 	call	0xe4c	; 0xe4c <__fixsfsi>
     b62:	70 93 94 01 	sts	0x0194, r23	; 0x800194 <NivelPolvo2+0x1>
     b66:	60 93 93 01 	sts	0x0193, r22	; 0x800193 <NivelPolvo2>
	 leer_ADC(2); // Lee el valor del pin PC0
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 64 00 	call	0xc8	; 0xc8 <leer_ADC>
	 NivelPolvo3 = ((float)ADC/1023)*100; // Guarda el valor del ADC en porcentaje (por eso dividimos por la resolución y por 100)
     b72:	68 81       	ld	r22, Y
     b74:	79 81       	ldd	r23, Y+1	; 0x01
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__floatunsisf>
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 ec       	ldi	r19, 0xC0	; 192
     b82:	4f e7       	ldi	r20, 0x7F	; 127
     b84:	54 e4       	ldi	r21, 0x44	; 68
     b86:	0e 94 b4 06 	call	0xd68	; 0xd68 <__divsf3>
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	48 ec       	ldi	r20, 0xC8	; 200
     b90:	52 e4       	ldi	r21, 0x42	; 66
     b92:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__mulsf3>
     b96:	0e 94 26 07 	call	0xe4c	; 0xe4c <__fixsfsi>
     b9a:	70 93 92 01 	sts	0x0192, r23	; 0x800192 <NivelPolvo3+0x1>
     b9e:	60 93 91 01 	sts	0x0191, r22	; 0x800191 <NivelPolvo3>
	leer_ADC(3); // Lee el valor del pin PC0
     ba2:	83 e0       	ldi	r24, 0x03	; 3
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0e 94 64 00 	call	0xc8	; 0xc8 <leer_ADC>
	 NivelPolvo4 = ((float)ADC/1023)*100; // Guarda el valor del ADC en porcentaje (por eso dividimos por la resolución y por 100)
     baa:	68 81       	ld	r22, Y
     bac:	79 81       	ldd	r23, Y+1	; 0x01
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__floatunsisf>
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 ec       	ldi	r19, 0xC0	; 192
     bba:	4f e7       	ldi	r20, 0x7F	; 127
     bbc:	54 e4       	ldi	r21, 0x44	; 68
     bbe:	0e 94 b4 06 	call	0xd68	; 0xd68 <__divsf3>
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	48 ec       	ldi	r20, 0xC8	; 200
     bc8:	52 e4       	ldi	r21, 0x42	; 66
     bca:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__mulsf3>
     bce:	0e 94 26 07 	call	0xe4c	; 0xe4c <__fixsfsi>
     bd2:	70 93 90 01 	sts	0x0190, r23	; 0x800190 <NivelPolvo4+0x1>
     bd6:	60 93 8f 01 	sts	0x018F, r22	; 0x80018f <NivelPolvo4>
	};	
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	08 95       	ret

00000be0 <MedirBidon>:
void MedirBidon(void){
	TWI_ini(); //INCIALIZA EL i2c del mcp3421 (TIENE UNA CONFIGURACIÓN ESPECIAL, NO HAY QUE TOCAR)
     be0:	0e 94 b0 01 	call	0x360	; 0x360 <TWI_ini>
	MCP3421_config(); //configura el sensor MCP3421
     be4:	0e 94 07 02 	call	0x40e	; 0x40e <MCP3421_config>
	MCP3421_read(); //Leemos el dato
     be8:	0e 94 12 02 	call	0x424	; 0x424 <MCP3421_read>
	PesoBidon = (((int)a1 << 10) | ((int)a2 << 2) | ((int)a3 >> 6))-2;
     bec:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <a1>
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	38 2f       	mov	r19, r24
     bf6:	33 0f       	add	r19, r19
     bf8:	33 0f       	add	r19, r19
     bfa:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <a2>
     bfe:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <a2+0x1>
     c02:	88 0f       	add	r24, r24
     c04:	99 1f       	adc	r25, r25
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	82 2b       	or	r24, r18
     c0c:	93 2b       	or	r25, r19
     c0e:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <a3>
     c12:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <a3+0x1>
     c16:	02 2e       	mov	r0, r18
     c18:	23 2f       	mov	r18, r19
     c1a:	00 0c       	add	r0, r0
     c1c:	22 1f       	adc	r18, r18
     c1e:	33 0b       	sbc	r19, r19
     c20:	00 0c       	add	r0, r0
     c22:	22 1f       	adc	r18, r18
     c24:	33 1f       	adc	r19, r19
     c26:	82 2b       	or	r24, r18
     c28:	93 2b       	or	r25, r19
     c2a:	02 97       	sbiw	r24, 0x02	; 2
     c2c:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <PesoBidon+0x1>
     c30:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <PesoBidon>
	TWI_Stop(); //cerramos 
     c34:	0e 94 03 02 	call	0x406	; 0x406 <TWI_Stop>
	TemperaturaBidon=LeerTemperatura();
     c38:	0e 94 77 03 	call	0x6ee	; 0x6ee <LeerTemperatura>
     c3c:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <TemperaturaBidon+0x1>
     c40:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <TemperaturaBidon>
     c44:	08 95       	ret

00000c46 <MedirVariables>:
	}
void MedirVariables(void){
		MedicionPolvos();
     c46:	0e 94 79 05 	call	0xaf2	; 0xaf2 <MedicionPolvos>
		MedirBidon();
     c4a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MedirBidon>
        LeerSensores();
     c4e:	0e 94 70 05 	call	0xae0	; 0xae0 <LeerSensores>
		LeerBotones();
     c52:	0e 94 1b 05 	call	0xa36	; 0xa36 <LeerBotones>
     c56:	08 95       	ret

00000c58 <ConfiguracionIncial>:
	}
void ConfiguracionIncial(void){
	   iniciar_ADC();					// Inicializamos el ADC
     c58:	0e 94 53 00 	call	0xa6	; 0xa6 <iniciar_ADC>
       uart_init();						//Inicializamos la uart
     c5c:	0e 94 4c 04 	call	0x898	; 0x898 <uart_init>
	   ConfigurarPinesSensores();		//Configuramos los pines de los sensores 
     c60:	0e 94 06 04 	call	0x80c	; 0x80c <ConfigurarPinesSensores>
	   ConfigurarBotones();				//Configuramos los botones.
     c64:	0e 94 28 04 	call	0x850	; 0x850 <ConfigurarBotones>
	   IniciarTemporizador();           // Configuramos el timer.
     c68:	0e 94 85 04 	call	0x90a	; 0x90a <IniciarTemporizador>
	   sei();                           // Habilitar interrupciones globales
     c6c:	78 94       	sei
     c6e:	08 95       	ret

00000c70 <main>:
   }
   
   
   int main(void){
	   ConfiguracionIncial();//Configuramos todo
     c70:	0e 94 2c 06 	call	0xc58	; 0xc58 <ConfiguracionIncial>
	while(1){	 
		if (Simultaneidad!=0){ //Si se presionaron simultaneamente "Aceptar" y "Seleccionar" por almenos 5 segundos,
     c74:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <Simultaneidad>
     c78:	88 23       	and	r24, r24
     c7a:	31 f0       	breq	.+12     	; 0xc88 <main+0x18>
			MenuNivelesLcd();  // el LCD debe mostrar todas las mediciones
     c7c:	0e 94 73 04 	call	0x8e6	; 0x8e6 <MenuNivelesLcd>
			uart_send_string("aaaaaaaaaaaaaa");
     c80:	82 e5       	ldi	r24, 0x52	; 82
     c82:	91 e0       	ldi	r25, 0x01	; 1
     c84:	0e 94 5f 04 	call	0x8be	; 0x8be <uart_send_string>
		}
	MedirVariables();// Sensamos todas nuestras variables
     c88:	0e 94 23 06 	call	0xc46	; 0xc46 <MedirVariables>
	

	}
     c8c:	f3 cf       	rjmp	.-26     	; 0xc74 <main+0x4>

00000c8e <__subsf3>:
     c8e:	50 58       	subi	r21, 0x80	; 128

00000c90 <__addsf3>:
     c90:	bb 27       	eor	r27, r27
     c92:	aa 27       	eor	r26, r26
     c94:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__addsf3x>
     c98:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__fp_round>
     c9c:	0e 94 a2 07 	call	0xf44	; 0xf44 <__fp_pscA>
     ca0:	38 f0       	brcs	.+14     	; 0xcb0 <__addsf3+0x20>
     ca2:	0e 94 a9 07 	call	0xf52	; 0xf52 <__fp_pscB>
     ca6:	20 f0       	brcs	.+8      	; 0xcb0 <__addsf3+0x20>
     ca8:	39 f4       	brne	.+14     	; 0xcb8 <__addsf3+0x28>
     caa:	9f 3f       	cpi	r25, 0xFF	; 255
     cac:	19 f4       	brne	.+6      	; 0xcb4 <__addsf3+0x24>
     cae:	26 f4       	brtc	.+8      	; 0xcb8 <__addsf3+0x28>
     cb0:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__fp_nan>
     cb4:	0e f4       	brtc	.+2      	; 0xcb8 <__addsf3+0x28>
     cb6:	e0 95       	com	r30
     cb8:	e7 fb       	bst	r30, 7
     cba:	0c 94 99 07 	jmp	0xf32	; 0xf32 <__fp_inf>

00000cbe <__addsf3x>:
     cbe:	e9 2f       	mov	r30, r25
     cc0:	0e 94 c1 07 	call	0xf82	; 0xf82 <__fp_split3>
     cc4:	58 f3       	brcs	.-42     	; 0xc9c <__addsf3+0xc>
     cc6:	ba 17       	cp	r27, r26
     cc8:	62 07       	cpc	r22, r18
     cca:	73 07       	cpc	r23, r19
     ccc:	84 07       	cpc	r24, r20
     cce:	95 07       	cpc	r25, r21
     cd0:	20 f0       	brcs	.+8      	; 0xcda <__addsf3x+0x1c>
     cd2:	79 f4       	brne	.+30     	; 0xcf2 <__addsf3x+0x34>
     cd4:	a6 f5       	brtc	.+104    	; 0xd3e <__addsf3x+0x80>
     cd6:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__fp_zero>
     cda:	0e f4       	brtc	.+2      	; 0xcde <__addsf3x+0x20>
     cdc:	e0 95       	com	r30
     cde:	0b 2e       	mov	r0, r27
     ce0:	ba 2f       	mov	r27, r26
     ce2:	a0 2d       	mov	r26, r0
     ce4:	0b 01       	movw	r0, r22
     ce6:	b9 01       	movw	r22, r18
     ce8:	90 01       	movw	r18, r0
     cea:	0c 01       	movw	r0, r24
     cec:	ca 01       	movw	r24, r20
     cee:	a0 01       	movw	r20, r0
     cf0:	11 24       	eor	r1, r1
     cf2:	ff 27       	eor	r31, r31
     cf4:	59 1b       	sub	r21, r25
     cf6:	99 f0       	breq	.+38     	; 0xd1e <__addsf3x+0x60>
     cf8:	59 3f       	cpi	r21, 0xF9	; 249
     cfa:	50 f4       	brcc	.+20     	; 0xd10 <__addsf3x+0x52>
     cfc:	50 3e       	cpi	r21, 0xE0	; 224
     cfe:	68 f1       	brcs	.+90     	; 0xd5a <__addsf3x+0x9c>
     d00:	1a 16       	cp	r1, r26
     d02:	f0 40       	sbci	r31, 0x00	; 0
     d04:	a2 2f       	mov	r26, r18
     d06:	23 2f       	mov	r18, r19
     d08:	34 2f       	mov	r19, r20
     d0a:	44 27       	eor	r20, r20
     d0c:	58 5f       	subi	r21, 0xF8	; 248
     d0e:	f3 cf       	rjmp	.-26     	; 0xcf6 <__addsf3x+0x38>
     d10:	46 95       	lsr	r20
     d12:	37 95       	ror	r19
     d14:	27 95       	ror	r18
     d16:	a7 95       	ror	r26
     d18:	f0 40       	sbci	r31, 0x00	; 0
     d1a:	53 95       	inc	r21
     d1c:	c9 f7       	brne	.-14     	; 0xd10 <__addsf3x+0x52>
     d1e:	7e f4       	brtc	.+30     	; 0xd3e <__addsf3x+0x80>
     d20:	1f 16       	cp	r1, r31
     d22:	ba 0b       	sbc	r27, r26
     d24:	62 0b       	sbc	r22, r18
     d26:	73 0b       	sbc	r23, r19
     d28:	84 0b       	sbc	r24, r20
     d2a:	ba f0       	brmi	.+46     	; 0xd5a <__addsf3x+0x9c>
     d2c:	91 50       	subi	r25, 0x01	; 1
     d2e:	a1 f0       	breq	.+40     	; 0xd58 <__addsf3x+0x9a>
     d30:	ff 0f       	add	r31, r31
     d32:	bb 1f       	adc	r27, r27
     d34:	66 1f       	adc	r22, r22
     d36:	77 1f       	adc	r23, r23
     d38:	88 1f       	adc	r24, r24
     d3a:	c2 f7       	brpl	.-16     	; 0xd2c <__addsf3x+0x6e>
     d3c:	0e c0       	rjmp	.+28     	; 0xd5a <__addsf3x+0x9c>
     d3e:	ba 0f       	add	r27, r26
     d40:	62 1f       	adc	r22, r18
     d42:	73 1f       	adc	r23, r19
     d44:	84 1f       	adc	r24, r20
     d46:	48 f4       	brcc	.+18     	; 0xd5a <__addsf3x+0x9c>
     d48:	87 95       	ror	r24
     d4a:	77 95       	ror	r23
     d4c:	67 95       	ror	r22
     d4e:	b7 95       	ror	r27
     d50:	f7 95       	ror	r31
     d52:	9e 3f       	cpi	r25, 0xFE	; 254
     d54:	08 f0       	brcs	.+2      	; 0xd58 <__addsf3x+0x9a>
     d56:	b0 cf       	rjmp	.-160    	; 0xcb8 <__addsf3+0x28>
     d58:	93 95       	inc	r25
     d5a:	88 0f       	add	r24, r24
     d5c:	08 f0       	brcs	.+2      	; 0xd60 <__addsf3x+0xa2>
     d5e:	99 27       	eor	r25, r25
     d60:	ee 0f       	add	r30, r30
     d62:	97 95       	ror	r25
     d64:	87 95       	ror	r24
     d66:	08 95       	ret

00000d68 <__divsf3>:
     d68:	0e 94 c8 06 	call	0xd90	; 0xd90 <__divsf3x>
     d6c:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__fp_round>
     d70:	0e 94 a9 07 	call	0xf52	; 0xf52 <__fp_pscB>
     d74:	58 f0       	brcs	.+22     	; 0xd8c <__divsf3+0x24>
     d76:	0e 94 a2 07 	call	0xf44	; 0xf44 <__fp_pscA>
     d7a:	40 f0       	brcs	.+16     	; 0xd8c <__divsf3+0x24>
     d7c:	29 f4       	brne	.+10     	; 0xd88 <__divsf3+0x20>
     d7e:	5f 3f       	cpi	r21, 0xFF	; 255
     d80:	29 f0       	breq	.+10     	; 0xd8c <__divsf3+0x24>
     d82:	0c 94 99 07 	jmp	0xf32	; 0xf32 <__fp_inf>
     d86:	51 11       	cpse	r21, r1
     d88:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__fp_szero>
     d8c:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__fp_nan>

00000d90 <__divsf3x>:
     d90:	0e 94 c1 07 	call	0xf82	; 0xf82 <__fp_split3>
     d94:	68 f3       	brcs	.-38     	; 0xd70 <__divsf3+0x8>

00000d96 <__divsf3_pse>:
     d96:	99 23       	and	r25, r25
     d98:	b1 f3       	breq	.-20     	; 0xd86 <__divsf3+0x1e>
     d9a:	55 23       	and	r21, r21
     d9c:	91 f3       	breq	.-28     	; 0xd82 <__divsf3+0x1a>
     d9e:	95 1b       	sub	r25, r21
     da0:	55 0b       	sbc	r21, r21
     da2:	bb 27       	eor	r27, r27
     da4:	aa 27       	eor	r26, r26
     da6:	62 17       	cp	r22, r18
     da8:	73 07       	cpc	r23, r19
     daa:	84 07       	cpc	r24, r20
     dac:	38 f0       	brcs	.+14     	; 0xdbc <__divsf3_pse+0x26>
     dae:	9f 5f       	subi	r25, 0xFF	; 255
     db0:	5f 4f       	sbci	r21, 0xFF	; 255
     db2:	22 0f       	add	r18, r18
     db4:	33 1f       	adc	r19, r19
     db6:	44 1f       	adc	r20, r20
     db8:	aa 1f       	adc	r26, r26
     dba:	a9 f3       	breq	.-22     	; 0xda6 <__divsf3_pse+0x10>
     dbc:	35 d0       	rcall	.+106    	; 0xe28 <__divsf3_pse+0x92>
     dbe:	0e 2e       	mov	r0, r30
     dc0:	3a f0       	brmi	.+14     	; 0xdd0 <__divsf3_pse+0x3a>
     dc2:	e0 e8       	ldi	r30, 0x80	; 128
     dc4:	32 d0       	rcall	.+100    	; 0xe2a <__divsf3_pse+0x94>
     dc6:	91 50       	subi	r25, 0x01	; 1
     dc8:	50 40       	sbci	r21, 0x00	; 0
     dca:	e6 95       	lsr	r30
     dcc:	00 1c       	adc	r0, r0
     dce:	ca f7       	brpl	.-14     	; 0xdc2 <__divsf3_pse+0x2c>
     dd0:	2b d0       	rcall	.+86     	; 0xe28 <__divsf3_pse+0x92>
     dd2:	fe 2f       	mov	r31, r30
     dd4:	29 d0       	rcall	.+82     	; 0xe28 <__divsf3_pse+0x92>
     dd6:	66 0f       	add	r22, r22
     dd8:	77 1f       	adc	r23, r23
     dda:	88 1f       	adc	r24, r24
     ddc:	bb 1f       	adc	r27, r27
     dde:	26 17       	cp	r18, r22
     de0:	37 07       	cpc	r19, r23
     de2:	48 07       	cpc	r20, r24
     de4:	ab 07       	cpc	r26, r27
     de6:	b0 e8       	ldi	r27, 0x80	; 128
     de8:	09 f0       	breq	.+2      	; 0xdec <__divsf3_pse+0x56>
     dea:	bb 0b       	sbc	r27, r27
     dec:	80 2d       	mov	r24, r0
     dee:	bf 01       	movw	r22, r30
     df0:	ff 27       	eor	r31, r31
     df2:	93 58       	subi	r25, 0x83	; 131
     df4:	5f 4f       	sbci	r21, 0xFF	; 255
     df6:	3a f0       	brmi	.+14     	; 0xe06 <__divsf3_pse+0x70>
     df8:	9e 3f       	cpi	r25, 0xFE	; 254
     dfa:	51 05       	cpc	r21, r1
     dfc:	78 f0       	brcs	.+30     	; 0xe1c <__divsf3_pse+0x86>
     dfe:	0c 94 99 07 	jmp	0xf32	; 0xf32 <__fp_inf>
     e02:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__fp_szero>
     e06:	5f 3f       	cpi	r21, 0xFF	; 255
     e08:	e4 f3       	brlt	.-8      	; 0xe02 <__divsf3_pse+0x6c>
     e0a:	98 3e       	cpi	r25, 0xE8	; 232
     e0c:	d4 f3       	brlt	.-12     	; 0xe02 <__divsf3_pse+0x6c>
     e0e:	86 95       	lsr	r24
     e10:	77 95       	ror	r23
     e12:	67 95       	ror	r22
     e14:	b7 95       	ror	r27
     e16:	f7 95       	ror	r31
     e18:	9f 5f       	subi	r25, 0xFF	; 255
     e1a:	c9 f7       	brne	.-14     	; 0xe0e <__divsf3_pse+0x78>
     e1c:	88 0f       	add	r24, r24
     e1e:	91 1d       	adc	r25, r1
     e20:	96 95       	lsr	r25
     e22:	87 95       	ror	r24
     e24:	97 f9       	bld	r25, 7
     e26:	08 95       	ret
     e28:	e1 e0       	ldi	r30, 0x01	; 1
     e2a:	66 0f       	add	r22, r22
     e2c:	77 1f       	adc	r23, r23
     e2e:	88 1f       	adc	r24, r24
     e30:	bb 1f       	adc	r27, r27
     e32:	62 17       	cp	r22, r18
     e34:	73 07       	cpc	r23, r19
     e36:	84 07       	cpc	r24, r20
     e38:	ba 07       	cpc	r27, r26
     e3a:	20 f0       	brcs	.+8      	; 0xe44 <__divsf3_pse+0xae>
     e3c:	62 1b       	sub	r22, r18
     e3e:	73 0b       	sbc	r23, r19
     e40:	84 0b       	sbc	r24, r20
     e42:	ba 0b       	sbc	r27, r26
     e44:	ee 1f       	adc	r30, r30
     e46:	88 f7       	brcc	.-30     	; 0xe2a <__divsf3_pse+0x94>
     e48:	e0 95       	com	r30
     e4a:	08 95       	ret

00000e4c <__fixsfsi>:
     e4c:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__fixunssfsi>
     e50:	68 94       	set
     e52:	b1 11       	cpse	r27, r1
     e54:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__fp_szero>
     e58:	08 95       	ret

00000e5a <__fixunssfsi>:
     e5a:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fp_splitA>
     e5e:	88 f0       	brcs	.+34     	; 0xe82 <__fixunssfsi+0x28>
     e60:	9f 57       	subi	r25, 0x7F	; 127
     e62:	98 f0       	brcs	.+38     	; 0xe8a <__fixunssfsi+0x30>
     e64:	b9 2f       	mov	r27, r25
     e66:	99 27       	eor	r25, r25
     e68:	b7 51       	subi	r27, 0x17	; 23
     e6a:	b0 f0       	brcs	.+44     	; 0xe98 <__fixunssfsi+0x3e>
     e6c:	e1 f0       	breq	.+56     	; 0xea6 <__fixunssfsi+0x4c>
     e6e:	66 0f       	add	r22, r22
     e70:	77 1f       	adc	r23, r23
     e72:	88 1f       	adc	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	1a f0       	brmi	.+6      	; 0xe7e <__fixunssfsi+0x24>
     e78:	ba 95       	dec	r27
     e7a:	c9 f7       	brne	.-14     	; 0xe6e <__fixunssfsi+0x14>
     e7c:	14 c0       	rjmp	.+40     	; 0xea6 <__fixunssfsi+0x4c>
     e7e:	b1 30       	cpi	r27, 0x01	; 1
     e80:	91 f0       	breq	.+36     	; 0xea6 <__fixunssfsi+0x4c>
     e82:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__fp_zero>
     e86:	b1 e0       	ldi	r27, 0x01	; 1
     e88:	08 95       	ret
     e8a:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__fp_zero>
     e8e:	67 2f       	mov	r22, r23
     e90:	78 2f       	mov	r23, r24
     e92:	88 27       	eor	r24, r24
     e94:	b8 5f       	subi	r27, 0xF8	; 248
     e96:	39 f0       	breq	.+14     	; 0xea6 <__fixunssfsi+0x4c>
     e98:	b9 3f       	cpi	r27, 0xF9	; 249
     e9a:	cc f3       	brlt	.-14     	; 0xe8e <__fixunssfsi+0x34>
     e9c:	86 95       	lsr	r24
     e9e:	77 95       	ror	r23
     ea0:	67 95       	ror	r22
     ea2:	b3 95       	inc	r27
     ea4:	d9 f7       	brne	.-10     	; 0xe9c <__fixunssfsi+0x42>
     ea6:	3e f4       	brtc	.+14     	; 0xeb6 <__fixunssfsi+0x5c>
     ea8:	90 95       	com	r25
     eaa:	80 95       	com	r24
     eac:	70 95       	com	r23
     eae:	61 95       	neg	r22
     eb0:	7f 4f       	sbci	r23, 0xFF	; 255
     eb2:	8f 4f       	sbci	r24, 0xFF	; 255
     eb4:	9f 4f       	sbci	r25, 0xFF	; 255
     eb6:	08 95       	ret

00000eb8 <__floatunsisf>:
     eb8:	e8 94       	clt
     eba:	09 c0       	rjmp	.+18     	; 0xece <__floatsisf+0x12>

00000ebc <__floatsisf>:
     ebc:	97 fb       	bst	r25, 7
     ebe:	3e f4       	brtc	.+14     	; 0xece <__floatsisf+0x12>
     ec0:	90 95       	com	r25
     ec2:	80 95       	com	r24
     ec4:	70 95       	com	r23
     ec6:	61 95       	neg	r22
     ec8:	7f 4f       	sbci	r23, 0xFF	; 255
     eca:	8f 4f       	sbci	r24, 0xFF	; 255
     ecc:	9f 4f       	sbci	r25, 0xFF	; 255
     ece:	99 23       	and	r25, r25
     ed0:	a9 f0       	breq	.+42     	; 0xefc <__floatsisf+0x40>
     ed2:	f9 2f       	mov	r31, r25
     ed4:	96 e9       	ldi	r25, 0x96	; 150
     ed6:	bb 27       	eor	r27, r27
     ed8:	93 95       	inc	r25
     eda:	f6 95       	lsr	r31
     edc:	87 95       	ror	r24
     ede:	77 95       	ror	r23
     ee0:	67 95       	ror	r22
     ee2:	b7 95       	ror	r27
     ee4:	f1 11       	cpse	r31, r1
     ee6:	f8 cf       	rjmp	.-16     	; 0xed8 <__floatsisf+0x1c>
     ee8:	fa f4       	brpl	.+62     	; 0xf28 <__floatsisf+0x6c>
     eea:	bb 0f       	add	r27, r27
     eec:	11 f4       	brne	.+4      	; 0xef2 <__floatsisf+0x36>
     eee:	60 ff       	sbrs	r22, 0
     ef0:	1b c0       	rjmp	.+54     	; 0xf28 <__floatsisf+0x6c>
     ef2:	6f 5f       	subi	r22, 0xFF	; 255
     ef4:	7f 4f       	sbci	r23, 0xFF	; 255
     ef6:	8f 4f       	sbci	r24, 0xFF	; 255
     ef8:	9f 4f       	sbci	r25, 0xFF	; 255
     efa:	16 c0       	rjmp	.+44     	; 0xf28 <__floatsisf+0x6c>
     efc:	88 23       	and	r24, r24
     efe:	11 f0       	breq	.+4      	; 0xf04 <__floatsisf+0x48>
     f00:	96 e9       	ldi	r25, 0x96	; 150
     f02:	11 c0       	rjmp	.+34     	; 0xf26 <__floatsisf+0x6a>
     f04:	77 23       	and	r23, r23
     f06:	21 f0       	breq	.+8      	; 0xf10 <__floatsisf+0x54>
     f08:	9e e8       	ldi	r25, 0x8E	; 142
     f0a:	87 2f       	mov	r24, r23
     f0c:	76 2f       	mov	r23, r22
     f0e:	05 c0       	rjmp	.+10     	; 0xf1a <__floatsisf+0x5e>
     f10:	66 23       	and	r22, r22
     f12:	71 f0       	breq	.+28     	; 0xf30 <__floatsisf+0x74>
     f14:	96 e8       	ldi	r25, 0x86	; 134
     f16:	86 2f       	mov	r24, r22
     f18:	70 e0       	ldi	r23, 0x00	; 0
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	2a f0       	brmi	.+10     	; 0xf28 <__floatsisf+0x6c>
     f1e:	9a 95       	dec	r25
     f20:	66 0f       	add	r22, r22
     f22:	77 1f       	adc	r23, r23
     f24:	88 1f       	adc	r24, r24
     f26:	da f7       	brpl	.-10     	; 0xf1e <__floatsisf+0x62>
     f28:	88 0f       	add	r24, r24
     f2a:	96 95       	lsr	r25
     f2c:	87 95       	ror	r24
     f2e:	97 f9       	bld	r25, 7
     f30:	08 95       	ret

00000f32 <__fp_inf>:
     f32:	97 f9       	bld	r25, 7
     f34:	9f 67       	ori	r25, 0x7F	; 127
     f36:	80 e8       	ldi	r24, 0x80	; 128
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	08 95       	ret

00000f3e <__fp_nan>:
     f3e:	9f ef       	ldi	r25, 0xFF	; 255
     f40:	80 ec       	ldi	r24, 0xC0	; 192
     f42:	08 95       	ret

00000f44 <__fp_pscA>:
     f44:	00 24       	eor	r0, r0
     f46:	0a 94       	dec	r0
     f48:	16 16       	cp	r1, r22
     f4a:	17 06       	cpc	r1, r23
     f4c:	18 06       	cpc	r1, r24
     f4e:	09 06       	cpc	r0, r25
     f50:	08 95       	ret

00000f52 <__fp_pscB>:
     f52:	00 24       	eor	r0, r0
     f54:	0a 94       	dec	r0
     f56:	12 16       	cp	r1, r18
     f58:	13 06       	cpc	r1, r19
     f5a:	14 06       	cpc	r1, r20
     f5c:	05 06       	cpc	r0, r21
     f5e:	08 95       	ret

00000f60 <__fp_round>:
     f60:	09 2e       	mov	r0, r25
     f62:	03 94       	inc	r0
     f64:	00 0c       	add	r0, r0
     f66:	11 f4       	brne	.+4      	; 0xf6c <__fp_round+0xc>
     f68:	88 23       	and	r24, r24
     f6a:	52 f0       	brmi	.+20     	; 0xf80 <__fp_round+0x20>
     f6c:	bb 0f       	add	r27, r27
     f6e:	40 f4       	brcc	.+16     	; 0xf80 <__fp_round+0x20>
     f70:	bf 2b       	or	r27, r31
     f72:	11 f4       	brne	.+4      	; 0xf78 <__fp_round+0x18>
     f74:	60 ff       	sbrs	r22, 0
     f76:	04 c0       	rjmp	.+8      	; 0xf80 <__fp_round+0x20>
     f78:	6f 5f       	subi	r22, 0xFF	; 255
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	8f 4f       	sbci	r24, 0xFF	; 255
     f7e:	9f 4f       	sbci	r25, 0xFF	; 255
     f80:	08 95       	ret

00000f82 <__fp_split3>:
     f82:	57 fd       	sbrc	r21, 7
     f84:	90 58       	subi	r25, 0x80	; 128
     f86:	44 0f       	add	r20, r20
     f88:	55 1f       	adc	r21, r21
     f8a:	59 f0       	breq	.+22     	; 0xfa2 <__fp_splitA+0x10>
     f8c:	5f 3f       	cpi	r21, 0xFF	; 255
     f8e:	71 f0       	breq	.+28     	; 0xfac <__fp_splitA+0x1a>
     f90:	47 95       	ror	r20

00000f92 <__fp_splitA>:
     f92:	88 0f       	add	r24, r24
     f94:	97 fb       	bst	r25, 7
     f96:	99 1f       	adc	r25, r25
     f98:	61 f0       	breq	.+24     	; 0xfb2 <__fp_splitA+0x20>
     f9a:	9f 3f       	cpi	r25, 0xFF	; 255
     f9c:	79 f0       	breq	.+30     	; 0xfbc <__fp_splitA+0x2a>
     f9e:	87 95       	ror	r24
     fa0:	08 95       	ret
     fa2:	12 16       	cp	r1, r18
     fa4:	13 06       	cpc	r1, r19
     fa6:	14 06       	cpc	r1, r20
     fa8:	55 1f       	adc	r21, r21
     faa:	f2 cf       	rjmp	.-28     	; 0xf90 <__fp_split3+0xe>
     fac:	46 95       	lsr	r20
     fae:	f1 df       	rcall	.-30     	; 0xf92 <__fp_splitA>
     fb0:	08 c0       	rjmp	.+16     	; 0xfc2 <__fp_splitA+0x30>
     fb2:	16 16       	cp	r1, r22
     fb4:	17 06       	cpc	r1, r23
     fb6:	18 06       	cpc	r1, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	f1 cf       	rjmp	.-30     	; 0xf9e <__fp_splitA+0xc>
     fbc:	86 95       	lsr	r24
     fbe:	71 05       	cpc	r23, r1
     fc0:	61 05       	cpc	r22, r1
     fc2:	08 94       	sec
     fc4:	08 95       	ret

00000fc6 <__fp_zero>:
     fc6:	e8 94       	clt

00000fc8 <__fp_szero>:
     fc8:	bb 27       	eor	r27, r27
     fca:	66 27       	eor	r22, r22
     fcc:	77 27       	eor	r23, r23
     fce:	cb 01       	movw	r24, r22
     fd0:	97 f9       	bld	r25, 7
     fd2:	08 95       	ret

00000fd4 <__mulsf3>:
     fd4:	0e 94 fd 07 	call	0xffa	; 0xffa <__mulsf3x>
     fd8:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__fp_round>
     fdc:	0e 94 a2 07 	call	0xf44	; 0xf44 <__fp_pscA>
     fe0:	38 f0       	brcs	.+14     	; 0xff0 <__mulsf3+0x1c>
     fe2:	0e 94 a9 07 	call	0xf52	; 0xf52 <__fp_pscB>
     fe6:	20 f0       	brcs	.+8      	; 0xff0 <__mulsf3+0x1c>
     fe8:	95 23       	and	r25, r21
     fea:	11 f0       	breq	.+4      	; 0xff0 <__mulsf3+0x1c>
     fec:	0c 94 99 07 	jmp	0xf32	; 0xf32 <__fp_inf>
     ff0:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__fp_nan>
     ff4:	11 24       	eor	r1, r1
     ff6:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__fp_szero>

00000ffa <__mulsf3x>:
     ffa:	0e 94 c1 07 	call	0xf82	; 0xf82 <__fp_split3>
     ffe:	70 f3       	brcs	.-36     	; 0xfdc <__mulsf3+0x8>

00001000 <__mulsf3_pse>:
    1000:	95 9f       	mul	r25, r21
    1002:	c1 f3       	breq	.-16     	; 0xff4 <__mulsf3+0x20>
    1004:	95 0f       	add	r25, r21
    1006:	50 e0       	ldi	r21, 0x00	; 0
    1008:	55 1f       	adc	r21, r21
    100a:	62 9f       	mul	r22, r18
    100c:	f0 01       	movw	r30, r0
    100e:	72 9f       	mul	r23, r18
    1010:	bb 27       	eor	r27, r27
    1012:	f0 0d       	add	r31, r0
    1014:	b1 1d       	adc	r27, r1
    1016:	63 9f       	mul	r22, r19
    1018:	aa 27       	eor	r26, r26
    101a:	f0 0d       	add	r31, r0
    101c:	b1 1d       	adc	r27, r1
    101e:	aa 1f       	adc	r26, r26
    1020:	64 9f       	mul	r22, r20
    1022:	66 27       	eor	r22, r22
    1024:	b0 0d       	add	r27, r0
    1026:	a1 1d       	adc	r26, r1
    1028:	66 1f       	adc	r22, r22
    102a:	82 9f       	mul	r24, r18
    102c:	22 27       	eor	r18, r18
    102e:	b0 0d       	add	r27, r0
    1030:	a1 1d       	adc	r26, r1
    1032:	62 1f       	adc	r22, r18
    1034:	73 9f       	mul	r23, r19
    1036:	b0 0d       	add	r27, r0
    1038:	a1 1d       	adc	r26, r1
    103a:	62 1f       	adc	r22, r18
    103c:	83 9f       	mul	r24, r19
    103e:	a0 0d       	add	r26, r0
    1040:	61 1d       	adc	r22, r1
    1042:	22 1f       	adc	r18, r18
    1044:	74 9f       	mul	r23, r20
    1046:	33 27       	eor	r19, r19
    1048:	a0 0d       	add	r26, r0
    104a:	61 1d       	adc	r22, r1
    104c:	23 1f       	adc	r18, r19
    104e:	84 9f       	mul	r24, r20
    1050:	60 0d       	add	r22, r0
    1052:	21 1d       	adc	r18, r1
    1054:	82 2f       	mov	r24, r18
    1056:	76 2f       	mov	r23, r22
    1058:	6a 2f       	mov	r22, r26
    105a:	11 24       	eor	r1, r1
    105c:	9f 57       	subi	r25, 0x7F	; 127
    105e:	50 40       	sbci	r21, 0x00	; 0
    1060:	9a f0       	brmi	.+38     	; 0x1088 <__mulsf3_pse+0x88>
    1062:	f1 f0       	breq	.+60     	; 0x10a0 <__mulsf3_pse+0xa0>
    1064:	88 23       	and	r24, r24
    1066:	4a f0       	brmi	.+18     	; 0x107a <__mulsf3_pse+0x7a>
    1068:	ee 0f       	add	r30, r30
    106a:	ff 1f       	adc	r31, r31
    106c:	bb 1f       	adc	r27, r27
    106e:	66 1f       	adc	r22, r22
    1070:	77 1f       	adc	r23, r23
    1072:	88 1f       	adc	r24, r24
    1074:	91 50       	subi	r25, 0x01	; 1
    1076:	50 40       	sbci	r21, 0x00	; 0
    1078:	a9 f7       	brne	.-22     	; 0x1064 <__mulsf3_pse+0x64>
    107a:	9e 3f       	cpi	r25, 0xFE	; 254
    107c:	51 05       	cpc	r21, r1
    107e:	80 f0       	brcs	.+32     	; 0x10a0 <__mulsf3_pse+0xa0>
    1080:	0c 94 99 07 	jmp	0xf32	; 0xf32 <__fp_inf>
    1084:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__fp_szero>
    1088:	5f 3f       	cpi	r21, 0xFF	; 255
    108a:	e4 f3       	brlt	.-8      	; 0x1084 <__mulsf3_pse+0x84>
    108c:	98 3e       	cpi	r25, 0xE8	; 232
    108e:	d4 f3       	brlt	.-12     	; 0x1084 <__mulsf3_pse+0x84>
    1090:	86 95       	lsr	r24
    1092:	77 95       	ror	r23
    1094:	67 95       	ror	r22
    1096:	b7 95       	ror	r27
    1098:	f7 95       	ror	r31
    109a:	e7 95       	ror	r30
    109c:	9f 5f       	subi	r25, 0xFF	; 255
    109e:	c1 f7       	brne	.-16     	; 0x1090 <__mulsf3_pse+0x90>
    10a0:	fe 2b       	or	r31, r30
    10a2:	88 0f       	add	r24, r24
    10a4:	91 1d       	adc	r25, r1
    10a6:	96 95       	lsr	r25
    10a8:	87 95       	ror	r24
    10aa:	97 f9       	bld	r25, 7
    10ac:	08 95       	ret

000010ae <__divmodhi4>:
    10ae:	97 fb       	bst	r25, 7
    10b0:	07 2e       	mov	r0, r23
    10b2:	16 f4       	brtc	.+4      	; 0x10b8 <__divmodhi4+0xa>
    10b4:	00 94       	com	r0
    10b6:	07 d0       	rcall	.+14     	; 0x10c6 <__divmodhi4_neg1>
    10b8:	77 fd       	sbrc	r23, 7
    10ba:	09 d0       	rcall	.+18     	; 0x10ce <__divmodhi4_neg2>
    10bc:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__udivmodhi4>
    10c0:	07 fc       	sbrc	r0, 7
    10c2:	05 d0       	rcall	.+10     	; 0x10ce <__divmodhi4_neg2>
    10c4:	3e f4       	brtc	.+14     	; 0x10d4 <__divmodhi4_exit>

000010c6 <__divmodhi4_neg1>:
    10c6:	90 95       	com	r25
    10c8:	81 95       	neg	r24
    10ca:	9f 4f       	sbci	r25, 0xFF	; 255
    10cc:	08 95       	ret

000010ce <__divmodhi4_neg2>:
    10ce:	70 95       	com	r23
    10d0:	61 95       	neg	r22
    10d2:	7f 4f       	sbci	r23, 0xFF	; 255

000010d4 <__divmodhi4_exit>:
    10d4:	08 95       	ret

000010d6 <__udivmodhi4>:
    10d6:	aa 1b       	sub	r26, r26
    10d8:	bb 1b       	sub	r27, r27
    10da:	51 e1       	ldi	r21, 0x11	; 17
    10dc:	07 c0       	rjmp	.+14     	; 0x10ec <__udivmodhi4_ep>

000010de <__udivmodhi4_loop>:
    10de:	aa 1f       	adc	r26, r26
    10e0:	bb 1f       	adc	r27, r27
    10e2:	a6 17       	cp	r26, r22
    10e4:	b7 07       	cpc	r27, r23
    10e6:	10 f0       	brcs	.+4      	; 0x10ec <__udivmodhi4_ep>
    10e8:	a6 1b       	sub	r26, r22
    10ea:	b7 0b       	sbc	r27, r23

000010ec <__udivmodhi4_ep>:
    10ec:	88 1f       	adc	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	5a 95       	dec	r21
    10f2:	a9 f7       	brne	.-22     	; 0x10de <__udivmodhi4_loop>
    10f4:	80 95       	com	r24
    10f6:	90 95       	com	r25
    10f8:	bc 01       	movw	r22, r24
    10fa:	cd 01       	movw	r24, r26
    10fc:	08 95       	ret

000010fe <atoi>:
    10fe:	fc 01       	movw	r30, r24
    1100:	88 27       	eor	r24, r24
    1102:	99 27       	eor	r25, r25
    1104:	e8 94       	clt
    1106:	21 91       	ld	r18, Z+
    1108:	20 32       	cpi	r18, 0x20	; 32
    110a:	e9 f3       	breq	.-6      	; 0x1106 <atoi+0x8>
    110c:	29 30       	cpi	r18, 0x09	; 9
    110e:	10 f0       	brcs	.+4      	; 0x1114 <atoi+0x16>
    1110:	2e 30       	cpi	r18, 0x0E	; 14
    1112:	c8 f3       	brcs	.-14     	; 0x1106 <atoi+0x8>
    1114:	2b 32       	cpi	r18, 0x2B	; 43
    1116:	41 f0       	breq	.+16     	; 0x1128 <atoi+0x2a>
    1118:	2d 32       	cpi	r18, 0x2D	; 45
    111a:	39 f4       	brne	.+14     	; 0x112a <atoi+0x2c>
    111c:	68 94       	set
    111e:	04 c0       	rjmp	.+8      	; 0x1128 <atoi+0x2a>
    1120:	0e 94 9d 08 	call	0x113a	; 0x113a <__mulhi_const_10>
    1124:	82 0f       	add	r24, r18
    1126:	91 1d       	adc	r25, r1
    1128:	21 91       	ld	r18, Z+
    112a:	20 53       	subi	r18, 0x30	; 48
    112c:	2a 30       	cpi	r18, 0x0A	; 10
    112e:	c0 f3       	brcs	.-16     	; 0x1120 <atoi+0x22>
    1130:	1e f4       	brtc	.+6      	; 0x1138 <atoi+0x3a>
    1132:	90 95       	com	r25
    1134:	81 95       	neg	r24
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	08 95       	ret

0000113a <__mulhi_const_10>:
    113a:	7a e0       	ldi	r23, 0x0A	; 10
    113c:	97 9f       	mul	r25, r23
    113e:	90 2d       	mov	r25, r0
    1140:	87 9f       	mul	r24, r23
    1142:	80 2d       	mov	r24, r0
    1144:	91 0d       	add	r25, r1
    1146:	11 24       	eor	r1, r1
    1148:	08 95       	ret

0000114a <sprintf>:
    114a:	ae e0       	ldi	r26, 0x0E	; 14
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	eb ea       	ldi	r30, 0xAB	; 171
    1150:	f8 e0       	ldi	r31, 0x08	; 8
    1152:	0c 94 66 0b 	jmp	0x16cc	; 0x16cc <__prologue_saves__+0x1c>
    1156:	0d 89       	ldd	r16, Y+21	; 0x15
    1158:	1e 89       	ldd	r17, Y+22	; 0x16
    115a:	86 e0       	ldi	r24, 0x06	; 6
    115c:	8c 83       	std	Y+4, r24	; 0x04
    115e:	1a 83       	std	Y+2, r17	; 0x02
    1160:	09 83       	std	Y+1, r16	; 0x01
    1162:	8f ef       	ldi	r24, 0xFF	; 255
    1164:	9f e7       	ldi	r25, 0x7F	; 127
    1166:	9e 83       	std	Y+6, r25	; 0x06
    1168:	8d 83       	std	Y+5, r24	; 0x05
    116a:	ae 01       	movw	r20, r28
    116c:	47 5e       	subi	r20, 0xE7	; 231
    116e:	5f 4f       	sbci	r21, 0xFF	; 255
    1170:	6f 89       	ldd	r22, Y+23	; 0x17
    1172:	78 8d       	ldd	r23, Y+24	; 0x18
    1174:	ce 01       	movw	r24, r28
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	0e 94 c7 08 	call	0x118e	; 0x118e <vfprintf>
    117c:	ef 81       	ldd	r30, Y+7	; 0x07
    117e:	f8 85       	ldd	r31, Y+8	; 0x08
    1180:	e0 0f       	add	r30, r16
    1182:	f1 1f       	adc	r31, r17
    1184:	10 82       	st	Z, r1
    1186:	2e 96       	adiw	r28, 0x0e	; 14
    1188:	e4 e0       	ldi	r30, 0x04	; 4
    118a:	0c 94 82 0b 	jmp	0x1704	; 0x1704 <__epilogue_restores__+0x1c>

0000118e <vfprintf>:
    118e:	ab e0       	ldi	r26, 0x0B	; 11
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	ed ec       	ldi	r30, 0xCD	; 205
    1194:	f8 e0       	ldi	r31, 0x08	; 8
    1196:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <__prologue_saves__>
    119a:	6c 01       	movw	r12, r24
    119c:	7b 01       	movw	r14, r22
    119e:	8a 01       	movw	r16, r20
    11a0:	fc 01       	movw	r30, r24
    11a2:	17 82       	std	Z+7, r1	; 0x07
    11a4:	16 82       	std	Z+6, r1	; 0x06
    11a6:	83 81       	ldd	r24, Z+3	; 0x03
    11a8:	81 ff       	sbrs	r24, 1
    11aa:	cc c1       	rjmp	.+920    	; 0x1544 <vfprintf+0x3b6>
    11ac:	ce 01       	movw	r24, r28
    11ae:	01 96       	adiw	r24, 0x01	; 1
    11b0:	3c 01       	movw	r6, r24
    11b2:	f6 01       	movw	r30, r12
    11b4:	93 81       	ldd	r25, Z+3	; 0x03
    11b6:	f7 01       	movw	r30, r14
    11b8:	93 fd       	sbrc	r25, 3
    11ba:	85 91       	lpm	r24, Z+
    11bc:	93 ff       	sbrs	r25, 3
    11be:	81 91       	ld	r24, Z+
    11c0:	7f 01       	movw	r14, r30
    11c2:	88 23       	and	r24, r24
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <vfprintf+0x3a>
    11c6:	ba c1       	rjmp	.+884    	; 0x153c <vfprintf+0x3ae>
    11c8:	85 32       	cpi	r24, 0x25	; 37
    11ca:	39 f4       	brne	.+14     	; 0x11da <vfprintf+0x4c>
    11cc:	93 fd       	sbrc	r25, 3
    11ce:	85 91       	lpm	r24, Z+
    11d0:	93 ff       	sbrs	r25, 3
    11d2:	81 91       	ld	r24, Z+
    11d4:	7f 01       	movw	r14, r30
    11d6:	85 32       	cpi	r24, 0x25	; 37
    11d8:	29 f4       	brne	.+10     	; 0x11e4 <vfprintf+0x56>
    11da:	b6 01       	movw	r22, r12
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 be 0a 	call	0x157c	; 0x157c <fputc>
    11e2:	e7 cf       	rjmp	.-50     	; 0x11b2 <vfprintf+0x24>
    11e4:	91 2c       	mov	r9, r1
    11e6:	21 2c       	mov	r2, r1
    11e8:	31 2c       	mov	r3, r1
    11ea:	ff e1       	ldi	r31, 0x1F	; 31
    11ec:	f3 15       	cp	r31, r3
    11ee:	d8 f0       	brcs	.+54     	; 0x1226 <vfprintf+0x98>
    11f0:	8b 32       	cpi	r24, 0x2B	; 43
    11f2:	79 f0       	breq	.+30     	; 0x1212 <vfprintf+0x84>
    11f4:	38 f4       	brcc	.+14     	; 0x1204 <vfprintf+0x76>
    11f6:	80 32       	cpi	r24, 0x20	; 32
    11f8:	79 f0       	breq	.+30     	; 0x1218 <vfprintf+0x8a>
    11fa:	83 32       	cpi	r24, 0x23	; 35
    11fc:	a1 f4       	brne	.+40     	; 0x1226 <vfprintf+0x98>
    11fe:	23 2d       	mov	r18, r3
    1200:	20 61       	ori	r18, 0x10	; 16
    1202:	1d c0       	rjmp	.+58     	; 0x123e <vfprintf+0xb0>
    1204:	8d 32       	cpi	r24, 0x2D	; 45
    1206:	61 f0       	breq	.+24     	; 0x1220 <vfprintf+0x92>
    1208:	80 33       	cpi	r24, 0x30	; 48
    120a:	69 f4       	brne	.+26     	; 0x1226 <vfprintf+0x98>
    120c:	23 2d       	mov	r18, r3
    120e:	21 60       	ori	r18, 0x01	; 1
    1210:	16 c0       	rjmp	.+44     	; 0x123e <vfprintf+0xb0>
    1212:	83 2d       	mov	r24, r3
    1214:	82 60       	ori	r24, 0x02	; 2
    1216:	38 2e       	mov	r3, r24
    1218:	e3 2d       	mov	r30, r3
    121a:	e4 60       	ori	r30, 0x04	; 4
    121c:	3e 2e       	mov	r3, r30
    121e:	2a c0       	rjmp	.+84     	; 0x1274 <vfprintf+0xe6>
    1220:	f3 2d       	mov	r31, r3
    1222:	f8 60       	ori	r31, 0x08	; 8
    1224:	1d c0       	rjmp	.+58     	; 0x1260 <vfprintf+0xd2>
    1226:	37 fc       	sbrc	r3, 7
    1228:	2d c0       	rjmp	.+90     	; 0x1284 <vfprintf+0xf6>
    122a:	20 ed       	ldi	r18, 0xD0	; 208
    122c:	28 0f       	add	r18, r24
    122e:	2a 30       	cpi	r18, 0x0A	; 10
    1230:	40 f0       	brcs	.+16     	; 0x1242 <vfprintf+0xb4>
    1232:	8e 32       	cpi	r24, 0x2E	; 46
    1234:	b9 f4       	brne	.+46     	; 0x1264 <vfprintf+0xd6>
    1236:	36 fc       	sbrc	r3, 6
    1238:	81 c1       	rjmp	.+770    	; 0x153c <vfprintf+0x3ae>
    123a:	23 2d       	mov	r18, r3
    123c:	20 64       	ori	r18, 0x40	; 64
    123e:	32 2e       	mov	r3, r18
    1240:	19 c0       	rjmp	.+50     	; 0x1274 <vfprintf+0xe6>
    1242:	36 fe       	sbrs	r3, 6
    1244:	06 c0       	rjmp	.+12     	; 0x1252 <vfprintf+0xc4>
    1246:	8a e0       	ldi	r24, 0x0A	; 10
    1248:	98 9e       	mul	r9, r24
    124a:	20 0d       	add	r18, r0
    124c:	11 24       	eor	r1, r1
    124e:	92 2e       	mov	r9, r18
    1250:	11 c0       	rjmp	.+34     	; 0x1274 <vfprintf+0xe6>
    1252:	ea e0       	ldi	r30, 0x0A	; 10
    1254:	2e 9e       	mul	r2, r30
    1256:	20 0d       	add	r18, r0
    1258:	11 24       	eor	r1, r1
    125a:	22 2e       	mov	r2, r18
    125c:	f3 2d       	mov	r31, r3
    125e:	f0 62       	ori	r31, 0x20	; 32
    1260:	3f 2e       	mov	r3, r31
    1262:	08 c0       	rjmp	.+16     	; 0x1274 <vfprintf+0xe6>
    1264:	8c 36       	cpi	r24, 0x6C	; 108
    1266:	21 f4       	brne	.+8      	; 0x1270 <vfprintf+0xe2>
    1268:	83 2d       	mov	r24, r3
    126a:	80 68       	ori	r24, 0x80	; 128
    126c:	38 2e       	mov	r3, r24
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <vfprintf+0xe6>
    1270:	88 36       	cpi	r24, 0x68	; 104
    1272:	41 f4       	brne	.+16     	; 0x1284 <vfprintf+0xf6>
    1274:	f7 01       	movw	r30, r14
    1276:	93 fd       	sbrc	r25, 3
    1278:	85 91       	lpm	r24, Z+
    127a:	93 ff       	sbrs	r25, 3
    127c:	81 91       	ld	r24, Z+
    127e:	7f 01       	movw	r14, r30
    1280:	81 11       	cpse	r24, r1
    1282:	b3 cf       	rjmp	.-154    	; 0x11ea <vfprintf+0x5c>
    1284:	98 2f       	mov	r25, r24
    1286:	9f 7d       	andi	r25, 0xDF	; 223
    1288:	95 54       	subi	r25, 0x45	; 69
    128a:	93 30       	cpi	r25, 0x03	; 3
    128c:	28 f4       	brcc	.+10     	; 0x1298 <vfprintf+0x10a>
    128e:	0c 5f       	subi	r16, 0xFC	; 252
    1290:	1f 4f       	sbci	r17, 0xFF	; 255
    1292:	9f e3       	ldi	r25, 0x3F	; 63
    1294:	99 83       	std	Y+1, r25	; 0x01
    1296:	0d c0       	rjmp	.+26     	; 0x12b2 <vfprintf+0x124>
    1298:	83 36       	cpi	r24, 0x63	; 99
    129a:	31 f0       	breq	.+12     	; 0x12a8 <vfprintf+0x11a>
    129c:	83 37       	cpi	r24, 0x73	; 115
    129e:	71 f0       	breq	.+28     	; 0x12bc <vfprintf+0x12e>
    12a0:	83 35       	cpi	r24, 0x53	; 83
    12a2:	09 f0       	breq	.+2      	; 0x12a6 <vfprintf+0x118>
    12a4:	59 c0       	rjmp	.+178    	; 0x1358 <vfprintf+0x1ca>
    12a6:	21 c0       	rjmp	.+66     	; 0x12ea <vfprintf+0x15c>
    12a8:	f8 01       	movw	r30, r16
    12aa:	80 81       	ld	r24, Z
    12ac:	89 83       	std	Y+1, r24	; 0x01
    12ae:	0e 5f       	subi	r16, 0xFE	; 254
    12b0:	1f 4f       	sbci	r17, 0xFF	; 255
    12b2:	88 24       	eor	r8, r8
    12b4:	83 94       	inc	r8
    12b6:	91 2c       	mov	r9, r1
    12b8:	53 01       	movw	r10, r6
    12ba:	13 c0       	rjmp	.+38     	; 0x12e2 <vfprintf+0x154>
    12bc:	28 01       	movw	r4, r16
    12be:	f2 e0       	ldi	r31, 0x02	; 2
    12c0:	4f 0e       	add	r4, r31
    12c2:	51 1c       	adc	r5, r1
    12c4:	f8 01       	movw	r30, r16
    12c6:	a0 80       	ld	r10, Z
    12c8:	b1 80       	ldd	r11, Z+1	; 0x01
    12ca:	36 fe       	sbrs	r3, 6
    12cc:	03 c0       	rjmp	.+6      	; 0x12d4 <vfprintf+0x146>
    12ce:	69 2d       	mov	r22, r9
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <vfprintf+0x14a>
    12d4:	6f ef       	ldi	r22, 0xFF	; 255
    12d6:	7f ef       	ldi	r23, 0xFF	; 255
    12d8:	c5 01       	movw	r24, r10
    12da:	0e 94 b3 0a 	call	0x1566	; 0x1566 <strnlen>
    12de:	4c 01       	movw	r8, r24
    12e0:	82 01       	movw	r16, r4
    12e2:	f3 2d       	mov	r31, r3
    12e4:	ff 77       	andi	r31, 0x7F	; 127
    12e6:	3f 2e       	mov	r3, r31
    12e8:	16 c0       	rjmp	.+44     	; 0x1316 <vfprintf+0x188>
    12ea:	28 01       	movw	r4, r16
    12ec:	22 e0       	ldi	r18, 0x02	; 2
    12ee:	42 0e       	add	r4, r18
    12f0:	51 1c       	adc	r5, r1
    12f2:	f8 01       	movw	r30, r16
    12f4:	a0 80       	ld	r10, Z
    12f6:	b1 80       	ldd	r11, Z+1	; 0x01
    12f8:	36 fe       	sbrs	r3, 6
    12fa:	03 c0       	rjmp	.+6      	; 0x1302 <vfprintf+0x174>
    12fc:	69 2d       	mov	r22, r9
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <vfprintf+0x178>
    1302:	6f ef       	ldi	r22, 0xFF	; 255
    1304:	7f ef       	ldi	r23, 0xFF	; 255
    1306:	c5 01       	movw	r24, r10
    1308:	0e 94 a8 0a 	call	0x1550	; 0x1550 <strnlen_P>
    130c:	4c 01       	movw	r8, r24
    130e:	f3 2d       	mov	r31, r3
    1310:	f0 68       	ori	r31, 0x80	; 128
    1312:	3f 2e       	mov	r3, r31
    1314:	82 01       	movw	r16, r4
    1316:	33 fc       	sbrc	r3, 3
    1318:	1b c0       	rjmp	.+54     	; 0x1350 <vfprintf+0x1c2>
    131a:	82 2d       	mov	r24, r2
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	88 16       	cp	r8, r24
    1320:	99 06       	cpc	r9, r25
    1322:	b0 f4       	brcc	.+44     	; 0x1350 <vfprintf+0x1c2>
    1324:	b6 01       	movw	r22, r12
    1326:	80 e2       	ldi	r24, 0x20	; 32
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	0e 94 be 0a 	call	0x157c	; 0x157c <fputc>
    132e:	2a 94       	dec	r2
    1330:	f4 cf       	rjmp	.-24     	; 0x131a <vfprintf+0x18c>
    1332:	f5 01       	movw	r30, r10
    1334:	37 fc       	sbrc	r3, 7
    1336:	85 91       	lpm	r24, Z+
    1338:	37 fe       	sbrs	r3, 7
    133a:	81 91       	ld	r24, Z+
    133c:	5f 01       	movw	r10, r30
    133e:	b6 01       	movw	r22, r12
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	0e 94 be 0a 	call	0x157c	; 0x157c <fputc>
    1346:	21 10       	cpse	r2, r1
    1348:	2a 94       	dec	r2
    134a:	21 e0       	ldi	r18, 0x01	; 1
    134c:	82 1a       	sub	r8, r18
    134e:	91 08       	sbc	r9, r1
    1350:	81 14       	cp	r8, r1
    1352:	91 04       	cpc	r9, r1
    1354:	71 f7       	brne	.-36     	; 0x1332 <vfprintf+0x1a4>
    1356:	e8 c0       	rjmp	.+464    	; 0x1528 <vfprintf+0x39a>
    1358:	84 36       	cpi	r24, 0x64	; 100
    135a:	11 f0       	breq	.+4      	; 0x1360 <vfprintf+0x1d2>
    135c:	89 36       	cpi	r24, 0x69	; 105
    135e:	41 f5       	brne	.+80     	; 0x13b0 <vfprintf+0x222>
    1360:	f8 01       	movw	r30, r16
    1362:	37 fe       	sbrs	r3, 7
    1364:	07 c0       	rjmp	.+14     	; 0x1374 <vfprintf+0x1e6>
    1366:	60 81       	ld	r22, Z
    1368:	71 81       	ldd	r23, Z+1	; 0x01
    136a:	82 81       	ldd	r24, Z+2	; 0x02
    136c:	93 81       	ldd	r25, Z+3	; 0x03
    136e:	0c 5f       	subi	r16, 0xFC	; 252
    1370:	1f 4f       	sbci	r17, 0xFF	; 255
    1372:	08 c0       	rjmp	.+16     	; 0x1384 <vfprintf+0x1f6>
    1374:	60 81       	ld	r22, Z
    1376:	71 81       	ldd	r23, Z+1	; 0x01
    1378:	07 2e       	mov	r0, r23
    137a:	00 0c       	add	r0, r0
    137c:	88 0b       	sbc	r24, r24
    137e:	99 0b       	sbc	r25, r25
    1380:	0e 5f       	subi	r16, 0xFE	; 254
    1382:	1f 4f       	sbci	r17, 0xFF	; 255
    1384:	f3 2d       	mov	r31, r3
    1386:	ff 76       	andi	r31, 0x6F	; 111
    1388:	3f 2e       	mov	r3, r31
    138a:	97 ff       	sbrs	r25, 7
    138c:	09 c0       	rjmp	.+18     	; 0x13a0 <vfprintf+0x212>
    138e:	90 95       	com	r25
    1390:	80 95       	com	r24
    1392:	70 95       	com	r23
    1394:	61 95       	neg	r22
    1396:	7f 4f       	sbci	r23, 0xFF	; 255
    1398:	8f 4f       	sbci	r24, 0xFF	; 255
    139a:	9f 4f       	sbci	r25, 0xFF	; 255
    139c:	f0 68       	ori	r31, 0x80	; 128
    139e:	3f 2e       	mov	r3, r31
    13a0:	2a e0       	ldi	r18, 0x0A	; 10
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	a3 01       	movw	r20, r6
    13a6:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__ultoa_invert>
    13aa:	88 2e       	mov	r8, r24
    13ac:	86 18       	sub	r8, r6
    13ae:	45 c0       	rjmp	.+138    	; 0x143a <vfprintf+0x2ac>
    13b0:	85 37       	cpi	r24, 0x75	; 117
    13b2:	31 f4       	brne	.+12     	; 0x13c0 <vfprintf+0x232>
    13b4:	23 2d       	mov	r18, r3
    13b6:	2f 7e       	andi	r18, 0xEF	; 239
    13b8:	b2 2e       	mov	r11, r18
    13ba:	2a e0       	ldi	r18, 0x0A	; 10
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	25 c0       	rjmp	.+74     	; 0x140a <vfprintf+0x27c>
    13c0:	93 2d       	mov	r25, r3
    13c2:	99 7f       	andi	r25, 0xF9	; 249
    13c4:	b9 2e       	mov	r11, r25
    13c6:	8f 36       	cpi	r24, 0x6F	; 111
    13c8:	c1 f0       	breq	.+48     	; 0x13fa <vfprintf+0x26c>
    13ca:	18 f4       	brcc	.+6      	; 0x13d2 <vfprintf+0x244>
    13cc:	88 35       	cpi	r24, 0x58	; 88
    13ce:	79 f0       	breq	.+30     	; 0x13ee <vfprintf+0x260>
    13d0:	b5 c0       	rjmp	.+362    	; 0x153c <vfprintf+0x3ae>
    13d2:	80 37       	cpi	r24, 0x70	; 112
    13d4:	19 f0       	breq	.+6      	; 0x13dc <vfprintf+0x24e>
    13d6:	88 37       	cpi	r24, 0x78	; 120
    13d8:	21 f0       	breq	.+8      	; 0x13e2 <vfprintf+0x254>
    13da:	b0 c0       	rjmp	.+352    	; 0x153c <vfprintf+0x3ae>
    13dc:	e9 2f       	mov	r30, r25
    13de:	e0 61       	ori	r30, 0x10	; 16
    13e0:	be 2e       	mov	r11, r30
    13e2:	b4 fe       	sbrs	r11, 4
    13e4:	0d c0       	rjmp	.+26     	; 0x1400 <vfprintf+0x272>
    13e6:	fb 2d       	mov	r31, r11
    13e8:	f4 60       	ori	r31, 0x04	; 4
    13ea:	bf 2e       	mov	r11, r31
    13ec:	09 c0       	rjmp	.+18     	; 0x1400 <vfprintf+0x272>
    13ee:	34 fe       	sbrs	r3, 4
    13f0:	0a c0       	rjmp	.+20     	; 0x1406 <vfprintf+0x278>
    13f2:	29 2f       	mov	r18, r25
    13f4:	26 60       	ori	r18, 0x06	; 6
    13f6:	b2 2e       	mov	r11, r18
    13f8:	06 c0       	rjmp	.+12     	; 0x1406 <vfprintf+0x278>
    13fa:	28 e0       	ldi	r18, 0x08	; 8
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	05 c0       	rjmp	.+10     	; 0x140a <vfprintf+0x27c>
    1400:	20 e1       	ldi	r18, 0x10	; 16
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	02 c0       	rjmp	.+4      	; 0x140a <vfprintf+0x27c>
    1406:	20 e1       	ldi	r18, 0x10	; 16
    1408:	32 e0       	ldi	r19, 0x02	; 2
    140a:	f8 01       	movw	r30, r16
    140c:	b7 fe       	sbrs	r11, 7
    140e:	07 c0       	rjmp	.+14     	; 0x141e <vfprintf+0x290>
    1410:	60 81       	ld	r22, Z
    1412:	71 81       	ldd	r23, Z+1	; 0x01
    1414:	82 81       	ldd	r24, Z+2	; 0x02
    1416:	93 81       	ldd	r25, Z+3	; 0x03
    1418:	0c 5f       	subi	r16, 0xFC	; 252
    141a:	1f 4f       	sbci	r17, 0xFF	; 255
    141c:	06 c0       	rjmp	.+12     	; 0x142a <vfprintf+0x29c>
    141e:	60 81       	ld	r22, Z
    1420:	71 81       	ldd	r23, Z+1	; 0x01
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	0e 5f       	subi	r16, 0xFE	; 254
    1428:	1f 4f       	sbci	r17, 0xFF	; 255
    142a:	a3 01       	movw	r20, r6
    142c:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__ultoa_invert>
    1430:	88 2e       	mov	r8, r24
    1432:	86 18       	sub	r8, r6
    1434:	fb 2d       	mov	r31, r11
    1436:	ff 77       	andi	r31, 0x7F	; 127
    1438:	3f 2e       	mov	r3, r31
    143a:	36 fe       	sbrs	r3, 6
    143c:	0d c0       	rjmp	.+26     	; 0x1458 <vfprintf+0x2ca>
    143e:	23 2d       	mov	r18, r3
    1440:	2e 7f       	andi	r18, 0xFE	; 254
    1442:	a2 2e       	mov	r10, r18
    1444:	89 14       	cp	r8, r9
    1446:	58 f4       	brcc	.+22     	; 0x145e <vfprintf+0x2d0>
    1448:	34 fe       	sbrs	r3, 4
    144a:	0b c0       	rjmp	.+22     	; 0x1462 <vfprintf+0x2d4>
    144c:	32 fc       	sbrc	r3, 2
    144e:	09 c0       	rjmp	.+18     	; 0x1462 <vfprintf+0x2d4>
    1450:	83 2d       	mov	r24, r3
    1452:	8e 7e       	andi	r24, 0xEE	; 238
    1454:	a8 2e       	mov	r10, r24
    1456:	05 c0       	rjmp	.+10     	; 0x1462 <vfprintf+0x2d4>
    1458:	b8 2c       	mov	r11, r8
    145a:	a3 2c       	mov	r10, r3
    145c:	03 c0       	rjmp	.+6      	; 0x1464 <vfprintf+0x2d6>
    145e:	b8 2c       	mov	r11, r8
    1460:	01 c0       	rjmp	.+2      	; 0x1464 <vfprintf+0x2d6>
    1462:	b9 2c       	mov	r11, r9
    1464:	a4 fe       	sbrs	r10, 4
    1466:	0f c0       	rjmp	.+30     	; 0x1486 <vfprintf+0x2f8>
    1468:	fe 01       	movw	r30, r28
    146a:	e8 0d       	add	r30, r8
    146c:	f1 1d       	adc	r31, r1
    146e:	80 81       	ld	r24, Z
    1470:	80 33       	cpi	r24, 0x30	; 48
    1472:	21 f4       	brne	.+8      	; 0x147c <vfprintf+0x2ee>
    1474:	9a 2d       	mov	r25, r10
    1476:	99 7e       	andi	r25, 0xE9	; 233
    1478:	a9 2e       	mov	r10, r25
    147a:	09 c0       	rjmp	.+18     	; 0x148e <vfprintf+0x300>
    147c:	a2 fe       	sbrs	r10, 2
    147e:	06 c0       	rjmp	.+12     	; 0x148c <vfprintf+0x2fe>
    1480:	b3 94       	inc	r11
    1482:	b3 94       	inc	r11
    1484:	04 c0       	rjmp	.+8      	; 0x148e <vfprintf+0x300>
    1486:	8a 2d       	mov	r24, r10
    1488:	86 78       	andi	r24, 0x86	; 134
    148a:	09 f0       	breq	.+2      	; 0x148e <vfprintf+0x300>
    148c:	b3 94       	inc	r11
    148e:	a3 fc       	sbrc	r10, 3
    1490:	11 c0       	rjmp	.+34     	; 0x14b4 <vfprintf+0x326>
    1492:	a0 fe       	sbrs	r10, 0
    1494:	06 c0       	rjmp	.+12     	; 0x14a2 <vfprintf+0x314>
    1496:	b2 14       	cp	r11, r2
    1498:	88 f4       	brcc	.+34     	; 0x14bc <vfprintf+0x32e>
    149a:	28 0c       	add	r2, r8
    149c:	92 2c       	mov	r9, r2
    149e:	9b 18       	sub	r9, r11
    14a0:	0e c0       	rjmp	.+28     	; 0x14be <vfprintf+0x330>
    14a2:	b2 14       	cp	r11, r2
    14a4:	60 f4       	brcc	.+24     	; 0x14be <vfprintf+0x330>
    14a6:	b6 01       	movw	r22, r12
    14a8:	80 e2       	ldi	r24, 0x20	; 32
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	0e 94 be 0a 	call	0x157c	; 0x157c <fputc>
    14b0:	b3 94       	inc	r11
    14b2:	f7 cf       	rjmp	.-18     	; 0x14a2 <vfprintf+0x314>
    14b4:	b2 14       	cp	r11, r2
    14b6:	18 f4       	brcc	.+6      	; 0x14be <vfprintf+0x330>
    14b8:	2b 18       	sub	r2, r11
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <vfprintf+0x332>
    14bc:	98 2c       	mov	r9, r8
    14be:	21 2c       	mov	r2, r1
    14c0:	a4 fe       	sbrs	r10, 4
    14c2:	10 c0       	rjmp	.+32     	; 0x14e4 <vfprintf+0x356>
    14c4:	b6 01       	movw	r22, r12
    14c6:	80 e3       	ldi	r24, 0x30	; 48
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	0e 94 be 0a 	call	0x157c	; 0x157c <fputc>
    14ce:	a2 fe       	sbrs	r10, 2
    14d0:	17 c0       	rjmp	.+46     	; 0x1500 <vfprintf+0x372>
    14d2:	a1 fc       	sbrc	r10, 1
    14d4:	03 c0       	rjmp	.+6      	; 0x14dc <vfprintf+0x34e>
    14d6:	88 e7       	ldi	r24, 0x78	; 120
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <vfprintf+0x352>
    14dc:	88 e5       	ldi	r24, 0x58	; 88
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	b6 01       	movw	r22, r12
    14e2:	0c c0       	rjmp	.+24     	; 0x14fc <vfprintf+0x36e>
    14e4:	8a 2d       	mov	r24, r10
    14e6:	86 78       	andi	r24, 0x86	; 134
    14e8:	59 f0       	breq	.+22     	; 0x1500 <vfprintf+0x372>
    14ea:	a1 fe       	sbrs	r10, 1
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <vfprintf+0x364>
    14ee:	8b e2       	ldi	r24, 0x2B	; 43
    14f0:	01 c0       	rjmp	.+2      	; 0x14f4 <vfprintf+0x366>
    14f2:	80 e2       	ldi	r24, 0x20	; 32
    14f4:	a7 fc       	sbrc	r10, 7
    14f6:	8d e2       	ldi	r24, 0x2D	; 45
    14f8:	b6 01       	movw	r22, r12
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	0e 94 be 0a 	call	0x157c	; 0x157c <fputc>
    1500:	89 14       	cp	r8, r9
    1502:	38 f4       	brcc	.+14     	; 0x1512 <vfprintf+0x384>
    1504:	b6 01       	movw	r22, r12
    1506:	80 e3       	ldi	r24, 0x30	; 48
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 94 be 0a 	call	0x157c	; 0x157c <fputc>
    150e:	9a 94       	dec	r9
    1510:	f7 cf       	rjmp	.-18     	; 0x1500 <vfprintf+0x372>
    1512:	8a 94       	dec	r8
    1514:	f3 01       	movw	r30, r6
    1516:	e8 0d       	add	r30, r8
    1518:	f1 1d       	adc	r31, r1
    151a:	80 81       	ld	r24, Z
    151c:	b6 01       	movw	r22, r12
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	0e 94 be 0a 	call	0x157c	; 0x157c <fputc>
    1524:	81 10       	cpse	r8, r1
    1526:	f5 cf       	rjmp	.-22     	; 0x1512 <vfprintf+0x384>
    1528:	22 20       	and	r2, r2
    152a:	09 f4       	brne	.+2      	; 0x152e <vfprintf+0x3a0>
    152c:	42 ce       	rjmp	.-892    	; 0x11b2 <vfprintf+0x24>
    152e:	b6 01       	movw	r22, r12
    1530:	80 e2       	ldi	r24, 0x20	; 32
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	0e 94 be 0a 	call	0x157c	; 0x157c <fputc>
    1538:	2a 94       	dec	r2
    153a:	f6 cf       	rjmp	.-20     	; 0x1528 <vfprintf+0x39a>
    153c:	f6 01       	movw	r30, r12
    153e:	86 81       	ldd	r24, Z+6	; 0x06
    1540:	97 81       	ldd	r25, Z+7	; 0x07
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <vfprintf+0x3ba>
    1544:	8f ef       	ldi	r24, 0xFF	; 255
    1546:	9f ef       	ldi	r25, 0xFF	; 255
    1548:	2b 96       	adiw	r28, 0x0b	; 11
    154a:	e2 e1       	ldi	r30, 0x12	; 18
    154c:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__epilogue_restores__>

00001550 <strnlen_P>:
    1550:	fc 01       	movw	r30, r24
    1552:	05 90       	lpm	r0, Z+
    1554:	61 50       	subi	r22, 0x01	; 1
    1556:	70 40       	sbci	r23, 0x00	; 0
    1558:	01 10       	cpse	r0, r1
    155a:	d8 f7       	brcc	.-10     	; 0x1552 <strnlen_P+0x2>
    155c:	80 95       	com	r24
    155e:	90 95       	com	r25
    1560:	8e 0f       	add	r24, r30
    1562:	9f 1f       	adc	r25, r31
    1564:	08 95       	ret

00001566 <strnlen>:
    1566:	fc 01       	movw	r30, r24
    1568:	61 50       	subi	r22, 0x01	; 1
    156a:	70 40       	sbci	r23, 0x00	; 0
    156c:	01 90       	ld	r0, Z+
    156e:	01 10       	cpse	r0, r1
    1570:	d8 f7       	brcc	.-10     	; 0x1568 <strnlen+0x2>
    1572:	80 95       	com	r24
    1574:	90 95       	com	r25
    1576:	8e 0f       	add	r24, r30
    1578:	9f 1f       	adc	r25, r31
    157a:	08 95       	ret

0000157c <fputc>:
    157c:	0f 93       	push	r16
    157e:	1f 93       	push	r17
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	fb 01       	movw	r30, r22
    1586:	23 81       	ldd	r18, Z+3	; 0x03
    1588:	21 fd       	sbrc	r18, 1
    158a:	03 c0       	rjmp	.+6      	; 0x1592 <fputc+0x16>
    158c:	8f ef       	ldi	r24, 0xFF	; 255
    158e:	9f ef       	ldi	r25, 0xFF	; 255
    1590:	2c c0       	rjmp	.+88     	; 0x15ea <fputc+0x6e>
    1592:	22 ff       	sbrs	r18, 2
    1594:	16 c0       	rjmp	.+44     	; 0x15c2 <fputc+0x46>
    1596:	46 81       	ldd	r20, Z+6	; 0x06
    1598:	57 81       	ldd	r21, Z+7	; 0x07
    159a:	24 81       	ldd	r18, Z+4	; 0x04
    159c:	35 81       	ldd	r19, Z+5	; 0x05
    159e:	42 17       	cp	r20, r18
    15a0:	53 07       	cpc	r21, r19
    15a2:	44 f4       	brge	.+16     	; 0x15b4 <fputc+0x38>
    15a4:	a0 81       	ld	r26, Z
    15a6:	b1 81       	ldd	r27, Z+1	; 0x01
    15a8:	9d 01       	movw	r18, r26
    15aa:	2f 5f       	subi	r18, 0xFF	; 255
    15ac:	3f 4f       	sbci	r19, 0xFF	; 255
    15ae:	31 83       	std	Z+1, r19	; 0x01
    15b0:	20 83       	st	Z, r18
    15b2:	8c 93       	st	X, r24
    15b4:	26 81       	ldd	r18, Z+6	; 0x06
    15b6:	37 81       	ldd	r19, Z+7	; 0x07
    15b8:	2f 5f       	subi	r18, 0xFF	; 255
    15ba:	3f 4f       	sbci	r19, 0xFF	; 255
    15bc:	37 83       	std	Z+7, r19	; 0x07
    15be:	26 83       	std	Z+6, r18	; 0x06
    15c0:	14 c0       	rjmp	.+40     	; 0x15ea <fputc+0x6e>
    15c2:	8b 01       	movw	r16, r22
    15c4:	ec 01       	movw	r28, r24
    15c6:	fb 01       	movw	r30, r22
    15c8:	00 84       	ldd	r0, Z+8	; 0x08
    15ca:	f1 85       	ldd	r31, Z+9	; 0x09
    15cc:	e0 2d       	mov	r30, r0
    15ce:	09 95       	icall
    15d0:	89 2b       	or	r24, r25
    15d2:	e1 f6       	brne	.-72     	; 0x158c <fputc+0x10>
    15d4:	d8 01       	movw	r26, r16
    15d6:	16 96       	adiw	r26, 0x06	; 6
    15d8:	8d 91       	ld	r24, X+
    15da:	9c 91       	ld	r25, X
    15dc:	17 97       	sbiw	r26, 0x07	; 7
    15de:	01 96       	adiw	r24, 0x01	; 1
    15e0:	17 96       	adiw	r26, 0x07	; 7
    15e2:	9c 93       	st	X, r25
    15e4:	8e 93       	st	-X, r24
    15e6:	16 97       	sbiw	r26, 0x06	; 6
    15e8:	ce 01       	movw	r24, r28
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	1f 91       	pop	r17
    15f0:	0f 91       	pop	r16
    15f2:	08 95       	ret

000015f4 <__ultoa_invert>:
    15f4:	fa 01       	movw	r30, r20
    15f6:	aa 27       	eor	r26, r26
    15f8:	28 30       	cpi	r18, 0x08	; 8
    15fa:	51 f1       	breq	.+84     	; 0x1650 <__ultoa_invert+0x5c>
    15fc:	20 31       	cpi	r18, 0x10	; 16
    15fe:	81 f1       	breq	.+96     	; 0x1660 <__ultoa_invert+0x6c>
    1600:	e8 94       	clt
    1602:	6f 93       	push	r22
    1604:	6e 7f       	andi	r22, 0xFE	; 254
    1606:	6e 5f       	subi	r22, 0xFE	; 254
    1608:	7f 4f       	sbci	r23, 0xFF	; 255
    160a:	8f 4f       	sbci	r24, 0xFF	; 255
    160c:	9f 4f       	sbci	r25, 0xFF	; 255
    160e:	af 4f       	sbci	r26, 0xFF	; 255
    1610:	b1 e0       	ldi	r27, 0x01	; 1
    1612:	3e d0       	rcall	.+124    	; 0x1690 <__ultoa_invert+0x9c>
    1614:	b4 e0       	ldi	r27, 0x04	; 4
    1616:	3c d0       	rcall	.+120    	; 0x1690 <__ultoa_invert+0x9c>
    1618:	67 0f       	add	r22, r23
    161a:	78 1f       	adc	r23, r24
    161c:	89 1f       	adc	r24, r25
    161e:	9a 1f       	adc	r25, r26
    1620:	a1 1d       	adc	r26, r1
    1622:	68 0f       	add	r22, r24
    1624:	79 1f       	adc	r23, r25
    1626:	8a 1f       	adc	r24, r26
    1628:	91 1d       	adc	r25, r1
    162a:	a1 1d       	adc	r26, r1
    162c:	6a 0f       	add	r22, r26
    162e:	71 1d       	adc	r23, r1
    1630:	81 1d       	adc	r24, r1
    1632:	91 1d       	adc	r25, r1
    1634:	a1 1d       	adc	r26, r1
    1636:	20 d0       	rcall	.+64     	; 0x1678 <__ultoa_invert+0x84>
    1638:	09 f4       	brne	.+2      	; 0x163c <__ultoa_invert+0x48>
    163a:	68 94       	set
    163c:	3f 91       	pop	r19
    163e:	2a e0       	ldi	r18, 0x0A	; 10
    1640:	26 9f       	mul	r18, r22
    1642:	11 24       	eor	r1, r1
    1644:	30 19       	sub	r19, r0
    1646:	30 5d       	subi	r19, 0xD0	; 208
    1648:	31 93       	st	Z+, r19
    164a:	de f6       	brtc	.-74     	; 0x1602 <__ultoa_invert+0xe>
    164c:	cf 01       	movw	r24, r30
    164e:	08 95       	ret
    1650:	46 2f       	mov	r20, r22
    1652:	47 70       	andi	r20, 0x07	; 7
    1654:	40 5d       	subi	r20, 0xD0	; 208
    1656:	41 93       	st	Z+, r20
    1658:	b3 e0       	ldi	r27, 0x03	; 3
    165a:	0f d0       	rcall	.+30     	; 0x167a <__ultoa_invert+0x86>
    165c:	c9 f7       	brne	.-14     	; 0x1650 <__ultoa_invert+0x5c>
    165e:	f6 cf       	rjmp	.-20     	; 0x164c <__ultoa_invert+0x58>
    1660:	46 2f       	mov	r20, r22
    1662:	4f 70       	andi	r20, 0x0F	; 15
    1664:	40 5d       	subi	r20, 0xD0	; 208
    1666:	4a 33       	cpi	r20, 0x3A	; 58
    1668:	18 f0       	brcs	.+6      	; 0x1670 <__ultoa_invert+0x7c>
    166a:	49 5d       	subi	r20, 0xD9	; 217
    166c:	31 fd       	sbrc	r19, 1
    166e:	40 52       	subi	r20, 0x20	; 32
    1670:	41 93       	st	Z+, r20
    1672:	02 d0       	rcall	.+4      	; 0x1678 <__ultoa_invert+0x84>
    1674:	a9 f7       	brne	.-22     	; 0x1660 <__ultoa_invert+0x6c>
    1676:	ea cf       	rjmp	.-44     	; 0x164c <__ultoa_invert+0x58>
    1678:	b4 e0       	ldi	r27, 0x04	; 4
    167a:	a6 95       	lsr	r26
    167c:	97 95       	ror	r25
    167e:	87 95       	ror	r24
    1680:	77 95       	ror	r23
    1682:	67 95       	ror	r22
    1684:	ba 95       	dec	r27
    1686:	c9 f7       	brne	.-14     	; 0x167a <__ultoa_invert+0x86>
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	61 05       	cpc	r22, r1
    168c:	71 05       	cpc	r23, r1
    168e:	08 95       	ret
    1690:	9b 01       	movw	r18, r22
    1692:	ac 01       	movw	r20, r24
    1694:	0a 2e       	mov	r0, r26
    1696:	06 94       	lsr	r0
    1698:	57 95       	ror	r21
    169a:	47 95       	ror	r20
    169c:	37 95       	ror	r19
    169e:	27 95       	ror	r18
    16a0:	ba 95       	dec	r27
    16a2:	c9 f7       	brne	.-14     	; 0x1696 <__ultoa_invert+0xa2>
    16a4:	62 0f       	add	r22, r18
    16a6:	73 1f       	adc	r23, r19
    16a8:	84 1f       	adc	r24, r20
    16aa:	95 1f       	adc	r25, r21
    16ac:	a0 1d       	adc	r26, r0
    16ae:	08 95       	ret

000016b0 <__prologue_saves__>:
    16b0:	2f 92       	push	r2
    16b2:	3f 92       	push	r3
    16b4:	4f 92       	push	r4
    16b6:	5f 92       	push	r5
    16b8:	6f 92       	push	r6
    16ba:	7f 92       	push	r7
    16bc:	8f 92       	push	r8
    16be:	9f 92       	push	r9
    16c0:	af 92       	push	r10
    16c2:	bf 92       	push	r11
    16c4:	cf 92       	push	r12
    16c6:	df 92       	push	r13
    16c8:	ef 92       	push	r14
    16ca:	ff 92       	push	r15
    16cc:	0f 93       	push	r16
    16ce:	1f 93       	push	r17
    16d0:	cf 93       	push	r28
    16d2:	df 93       	push	r29
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	ca 1b       	sub	r28, r26
    16da:	db 0b       	sbc	r29, r27
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	cd bf       	out	0x3d, r28	; 61
    16e6:	09 94       	ijmp

000016e8 <__epilogue_restores__>:
    16e8:	2a 88       	ldd	r2, Y+18	; 0x12
    16ea:	39 88       	ldd	r3, Y+17	; 0x11
    16ec:	48 88       	ldd	r4, Y+16	; 0x10
    16ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    16f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    16f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    16f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    16f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    16f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    16fa:	b9 84       	ldd	r11, Y+9	; 0x09
    16fc:	c8 84       	ldd	r12, Y+8	; 0x08
    16fe:	df 80       	ldd	r13, Y+7	; 0x07
    1700:	ee 80       	ldd	r14, Y+6	; 0x06
    1702:	fd 80       	ldd	r15, Y+5	; 0x05
    1704:	0c 81       	ldd	r16, Y+4	; 0x04
    1706:	1b 81       	ldd	r17, Y+3	; 0x03
    1708:	aa 81       	ldd	r26, Y+2	; 0x02
    170a:	b9 81       	ldd	r27, Y+1	; 0x01
    170c:	ce 0f       	add	r28, r30
    170e:	d1 1d       	adc	r29, r1
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	ed 01       	movw	r28, r26
    171c:	08 95       	ret

0000171e <_exit>:
    171e:	f8 94       	cli

00001720 <__stop_program>:
    1720:	ff cf       	rjmp	.-2      	; 0x1720 <__stop_program>
