
tP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000015b2  00001646  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  00800128  00800128  0000166e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000166e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  0000170c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000255b  00000000  00000000  00001944  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ec6  00000000  00000000  00003e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001609  00000000  00000000  00004d65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000598  00000000  00000000  00006370  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000966  00000000  00000000  00006908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000109c  00000000  00000000  0000726e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  0000830a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 eb       	ldi	r30, 0xB2	; 178
      7c:	f5 e1       	ldi	r31, 0x15	; 21
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 32       	cpi	r26, 0x28	; 40
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a8 e2       	ldi	r26, 0x28	; 40
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 34       	cpi	r26, 0x4E	; 78
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 57 05 	call	0xaae	; 0xaae <main>
      9e:	0c 94 d7 0a 	jmp	0x15ae	; 0x15ae <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <iniciar_ADC>:


#include "ADC.h"

void iniciar_ADC(void){
ADMUX |= (1 << REFS0); // Voltaje de referencia AVCC con capacitor externo en AREF (tension de referencia)
      a6:	ec e7       	ldi	r30, 0x7C	; 124
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	80 81       	ld	r24, Z
      ac:	80 64       	ori	r24, 0x40	; 64
      ae:	80 83       	st	Z, r24
ADMUX &= ~(1 << ADLAR); // ADC derecho justificado, los bits mas significativos se ubicaran en los bits mas altos del registo de resultado ADC
      b0:	80 81       	ld	r24, Z
      b2:	8f 7d       	andi	r24, 0xDF	; 223
      b4:	80 83       	st	Z, r24
ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //Prescaler en 128, divide la frecuencia del ADC por 128, esto hace que la conversion sea mas lenta pero precisa.
      b6:	ea e7       	ldi	r30, 0x7A	; 122
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	80 81       	ld	r24, Z
      bc:	87 60       	ori	r24, 0x07	; 7
      be:	80 83       	st	Z, r24
ADCSRA |= (1 << ADEN); // Habilita el ADC, el bit ADEN en 1 permite que se realicen las conversiones ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
      c6:	08 95       	ret

000000c8 <leer_ADC>:
}

void leer_ADC(char canal){
ADMUX &= 0xF0; // Limpiar bits de selección de canal, hace una AND con 0xF0 (11110000) es para asegurar que los bits de seleccion de canal esten en 0 antes de seleccionarlos
      c8:	ec e7       	ldi	r30, 0x7C	; 124
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	90 81       	ld	r25, Z
      ce:	90 7f       	andi	r25, 0xF0	; 240
      d0:	90 83       	st	Z, r25
ADMUX |= (0x00+canal); // Selecciona el pin analogico que deseamos, en el main por ej utilizamos con canales a0 (canal 0) y a1 (canal 1)
      d2:	90 81       	ld	r25, Z
      d4:	89 2b       	or	r24, r25
      d6:	80 83       	st	Z, r24
ADCSRA |= (1 << ADSC); // Iniciar conversión
      d8:	ea e7       	ldi	r30, 0x7A	; 122
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	80 81       	ld	r24, Z
      de:	80 64       	ori	r24, 0x40	; 64
      e0:	80 83       	st	Z, r24
while(ADCSRA & (1 << ADSC)); // Espera a que termine la conversión
      e2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
      e6:	86 fd       	sbrc	r24, 6
      e8:	fc cf       	rjmp	.-8      	; 0xe2 <leer_ADC+0x1a>
      ea:	08 95       	ret

000000ec <i2c_init>:

#include "i2c.h"
int ejecucionUnica = 1;

void i2c_init() { //Se encarga de inicializar el bus I2C en modo maestro con una velocidad de transmisión de 100 kHz
	TWBR = 25; // Frecuencia de reloj de 16MHz / (16 + 2 * TWBR * 1) = 100 kHz {con 25242kHz}
      ec:	89 e1       	ldi	r24, 0x19	; 25
      ee:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWSR = 0;  // Prescaler de 1
      f2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
      f6:	08 95       	ret

000000f8 <i2c_start>:
}

void i2c_start(){	//Envía una condición de inicio al bus I2C.
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTA); // Condición de inicio
      f8:	84 ea       	ldi	r24, 0xA4	; 164
      fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT))); // Verificar la condición de inicio
      fe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     102:	88 23       	and	r24, r24
     104:	e4 f7       	brge	.-8      	; 0xfe <i2c_start+0x6>
}
     106:	08 95       	ret

00000108 <i2c_write>:
	//TWINT (para limpiar la bandera de interrupción), 
	//TWEN (para habilitar el módulo I2C) y TWSTA (para enviar la condición de inicio). 

void i2c_write(char x){	//Se utiliza para escribir un byte de datos en el bus I2C. 
	TWDR = x; // Mover valor a I2C
     108:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN); // Habilite I2C y borra la interrupción
     10c:	84 e8       	ldi	r24, 0x84	; 132
     10e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));
     112:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     116:	88 23       	and	r24, r24
     118:	e4 f7       	brge	.-8      	; 0x112 <i2c_write+0xa>
}
     11a:	08 95       	ret

0000011c <i2c_stop>:

void i2c_stop(){	//Envía una condición de parada al bus I2C, indicando el final de la transmisión.
	TWCR = (1<<TWSTO)|(1<<TWINT)|(1<<TWEN);
     11c:	84 e9       	ldi	r24, 0x94	; 148
     11e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (TWCR&(1<TWSTO));	
     122:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     126:	80 fd       	sbrc	r24, 0
     128:	fc cf       	rjmp	.-8      	; 0x122 <i2c_stop+0x6>
}
     12a:	08 95       	ret

0000012c <enviarPulsoEnable>:
#include "LCD_I2C.h"
#include <util/delay.h>

void enviarPulsoEnable()
{
TWDR |= 0x02;					//---PIN En la pantalla LCD en = 1; -----Enclavar datos en el registro de datos LCD usando una señal de alta a baja
     12c:	eb eb       	ldi	r30, 0xBB	; 187
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	82 60       	ori	r24, 0x02	; 2
     134:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//---Habilita I2C y borra la interrupción- Esta linea y la siguiente simepre van despues de querer mandar un coamndo por TDWR
     136:	84 e8       	ldi	r24, 0x84	; 132
     138:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));	//---Siempre poner despues de la linea anterior al mandar datos por TWDR
     13c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     140:	88 23       	and	r24, r24
     142:	e4 f7       	brge	.-8      	; 0x13c <enviarPulsoEnable+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     144:	89 ef       	ldi	r24, 0xF9	; 249
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	01 97       	sbiw	r24, 0x01	; 1
     14a:	f1 f7       	brne	.-4      	; 0x148 <enviarPulsoEnable+0x1c>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <enviarPulsoEnable+0x22>
     14e:	00 00       	nop
_delay_ms(1);
TWDR &= ~0x02;					//---PIN del Enable de la LCD en = 0;
     150:	eb eb       	ldi	r30, 0xBB	; 187
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	8d 7f       	andi	r24, 0xFD	; 253
     158:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//---Habilita I2C y borra la interrupción
     15a:	84 e8       	ldi	r24, 0x84	; 132
     15c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     160:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     164:	88 23       	and	r24, r24
     166:	e4 f7       	brge	.-8      	; 0x160 <enviarPulsoEnable+0x34>
}
     168:	08 95       	ret

0000016a <enviarComando4Bits>:

void enviarComando4Bits(char v1)
{
TWDR &=~0x01;					//PIN RS de la pantalla LCD rs = 0; ----Seleccionar registro como registro de comando
     16a:	eb eb       	ldi	r30, 0xBB	; 187
     16c:	f0 e0       	ldi	r31, 0x00	; 0
     16e:	90 81       	ld	r25, Z
     170:	9e 7f       	andi	r25, 0xFE	; 254
     172:	90 83       	st	Z, r25
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     174:	94 e8       	ldi	r25, 0x84	; 132
     176:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     17a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     17e:	99 23       	and	r25, r25
     180:	e4 f7       	brge	.-8      	; 0x17a <enviarComando4Bits+0x10>
TWDR &= 0x0F;					//----Enmascaramiento de 4 bits superiores y envío a LCD
     182:	eb eb       	ldi	r30, 0xBB	; 187
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	90 81       	ld	r25, Z
     188:	9f 70       	andi	r25, 0x0F	; 15
     18a:	90 83       	st	Z, r25
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     18c:	94 e8       	ldi	r25, 0x84	; 132
     18e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     192:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     196:	99 23       	and	r25, r25
     198:	e4 f7       	brge	.-8      	; 0x192 <enviarComando4Bits+0x28>
TWDR |= (v1 & 0xF0);			//----
     19a:	eb eb       	ldi	r30, 0xBB	; 187
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	90 81       	ld	r25, Z
     1a0:	80 7f       	andi	r24, 0xF0	; 240
     1a2:	89 2b       	or	r24, r25
     1a4:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     1a6:	84 e8       	ldi	r24, 0x84	; 132
     1a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     1ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1b0:	88 23       	and	r24, r24
     1b2:	e4 f7       	brge	.-8      	; 0x1ac <enviarComando4Bits+0x42>
enviarPulsoEnable();
     1b4:	0e 94 96 00 	call	0x12c	; 0x12c <enviarPulsoEnable>
     1b8:	08 95       	ret

000001ba <enviarComando>:
}

void enviarComando(char v2)
{
     1ba:	cf 93       	push	r28
     1bc:	c8 2f       	mov	r28, r24
TWDR&=~0x01;					//rs = 0; ----Seleccionar registro como registro de comando
     1be:	eb eb       	ldi	r30, 0xBB	; 187
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 81       	ld	r24, Z
     1c4:	8e 7f       	andi	r24, 0xFE	; 254
     1c6:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     1c8:	84 e8       	ldi	r24, 0x84	; 132
     1ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     1ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1d2:	88 23       	and	r24, r24
     1d4:	e4 f7       	brge	.-8      	; 0x1ce <enviarComando+0x14>

TWDR &= 0x0F;                   //----borrando los 4 bits superiores
     1d6:	eb eb       	ldi	r30, 0xBB	; 187
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	80 81       	ld	r24, Z
     1dc:	8f 70       	andi	r24, 0x0F	; 15
     1de:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     1e0:	84 e8       	ldi	r24, 0x84	; 132
     1e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     1e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1ea:	88 23       	and	r24, r24
     1ec:	e4 f7       	brge	.-8      	; 0x1e6 <enviarComando+0x2c>
TWDR |= (v2 & 0xF0);			//----Enmascaramiento de 4 bits superiores y envío a LCD
     1ee:	eb eb       	ldi	r30, 0xBB	; 187
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	80 81       	ld	r24, Z
     1f4:	9c 2f       	mov	r25, r28
     1f6:	90 7f       	andi	r25, 0xF0	; 240
     1f8:	89 2b       	or	r24, r25
     1fa:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     1fc:	84 e8       	ldi	r24, 0x84	; 132
     1fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     202:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     206:	88 23       	and	r24, r24
     208:	e4 f7       	brge	.-8      	; 0x202 <enviarComando+0x48>
enviarPulsoEnable();
     20a:	0e 94 96 00 	call	0x12c	; 0x12c <enviarPulsoEnable>
	
TWDR &= 0x0F;                    //----borrando los 4 bits superiores
     20e:	eb eb       	ldi	r30, 0xBB	; 187
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	8f 70       	andi	r24, 0x0F	; 15
     216:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     218:	84 e8       	ldi	r24, 0x84	; 132
     21a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     21e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     222:	88 23       	and	r24, r24
     224:	e4 f7       	brge	.-8      	; 0x21e <enviarComando+0x64>
TWDR |= ((v2 & 0x0F)<<4);		//----Enmascaramiento de 4 bits inferiores y envío a LCD
     226:	eb eb       	ldi	r30, 0xBB	; 187
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	20 81       	ld	r18, Z
     22c:	30 e1       	ldi	r19, 0x10	; 16
     22e:	c3 9f       	mul	r28, r19
     230:	c0 01       	movw	r24, r0
     232:	11 24       	eor	r1, r1
     234:	82 2b       	or	r24, r18
     236:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilite I2C y borra la interrupción
     238:	84 e8       	ldi	r24, 0x84	; 132
     23a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     23e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     242:	88 23       	and	r24, r24
     244:	e4 f7       	brge	.-8      	; 0x23e <enviarComando+0x84>
enviarPulsoEnable();
     246:	0e 94 96 00 	call	0x12c	; 0x12c <enviarPulsoEnable>
}
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <escribirDato>:

void escribirDato(char v3)
{
     24e:	cf 93       	push	r28
     250:	c8 2f       	mov	r28, r24
TWDR|=0x01;						//RS = 1; ----Selecciona registro como registro de comando
     252:	eb eb       	ldi	r30, 0xBB	; 187
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	81 60       	ori	r24, 0x01	; 1
     25a:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     25c:	84 e8       	ldi	r24, 0x84	; 132
     25e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     262:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     266:	88 23       	and	r24, r24
     268:	e4 f7       	brge	.-8      	; 0x262 <escribirDato+0x14>
TWDR &= 0x0F;				    //----borrando los 4 bits superiores
     26a:	eb eb       	ldi	r30, 0xBB	; 187
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	80 81       	ld	r24, Z
     270:	8f 70       	andi	r24, 0x0F	; 15
     272:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     274:	84 e8       	ldi	r24, 0x84	; 132
     276:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     27a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     27e:	88 23       	and	r24, r24
     280:	e4 f7       	brge	.-8      	; 0x27a <escribirDato+0x2c>
TWDR |= (v3 & 0xF0);			//----Enmascaramiento de 4 bits superiores y envío a LCD
     282:	eb eb       	ldi	r30, 0xBB	; 187
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	9c 2f       	mov	r25, r28
     28a:	90 7f       	andi	r25, 0xF0	; 240
     28c:	89 2b       	or	r24, r25
     28e:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     290:	84 e8       	ldi	r24, 0x84	; 132
     292:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     296:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     29a:	88 23       	and	r24, r24
     29c:	e4 f7       	brge	.-8      	; 0x296 <escribirDato+0x48>
enviarPulsoEnable();
     29e:	0e 94 96 00 	call	0x12c	; 0x12c <enviarPulsoEnable>
	
TWDR &= 0x0F;					//----borrando los 4 bits superiores
     2a2:	eb eb       	ldi	r30, 0xBB	; 187
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	80 81       	ld	r24, Z
     2a8:	8f 70       	andi	r24, 0x0F	; 15
     2aa:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     2ac:	84 e8       	ldi	r24, 0x84	; 132
     2ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     2b2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2b6:	88 23       	and	r24, r24
     2b8:	e4 f7       	brge	.-8      	; 0x2b2 <escribirDato+0x64>
TWDR |= ((v3 & 0x0F)<<4);		//----Enmascaramiento de 4 bits inferiores y envío a LCD
     2ba:	eb eb       	ldi	r30, 0xBB	; 187
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	20 81       	ld	r18, Z
     2c0:	30 e1       	ldi	r19, 0x10	; 16
     2c2:	c3 9f       	mul	r28, r19
     2c4:	c0 01       	movw	r24, r0
     2c6:	11 24       	eor	r1, r1
     2c8:	82 2b       	or	r24, r18
     2ca:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     2cc:	84 e8       	ldi	r24, 0x84	; 132
     2ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     2d2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2d6:	88 23       	and	r24, r24
     2d8:	e4 f7       	brge	.-8      	; 0x2d2 <escribirDato+0x84>
enviarPulsoEnable();
     2da:	0e 94 96 00 	call	0x12c	; 0x12c <enviarPulsoEnable>
}
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <lcd_init>:

void lcd_init() {
i2c_init(); //inciamos la comunicación i2c
     2e2:	0e 94 76 00 	call	0xec	; 0xec <i2c_init>
i2c_start(); //Iniciamos el i2c
     2e6:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_start>
i2c_write(0x40); //Dirección del PCF8574
     2ea:	80 e4       	ldi	r24, 0x40	; 64
     2ec:	0e 94 84 00 	call	0x108	; 0x108 <i2c_write>
     2f0:	81 ee       	ldi	r24, 0xE1	; 225
     2f2:	94 e0       	ldi	r25, 0x04	; 4
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <lcd_init+0x12>
     2f8:	00 c0       	rjmp	.+0      	; 0x2fa <lcd_init+0x18>
     2fa:	00 00       	nop
// Inicialización del LCD de 20x4 en modo 4 bits.
_delay_ms(5);
enviarComando4Bits(0x30); // 3 veces
     2fc:	80 e3       	ldi	r24, 0x30	; 48
     2fe:	0e 94 b5 00 	call	0x16a	; 0x16a <enviarComando4Bits>
     302:	81 ee       	ldi	r24, 0xE1	; 225
     304:	94 e0       	ldi	r25, 0x04	; 4
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <lcd_init+0x24>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <lcd_init+0x2a>
     30c:	00 00       	nop
_delay_ms(5);
enviarComando4Bits(0x30);
     30e:	80 e3       	ldi	r24, 0x30	; 48
     310:	0e 94 b5 00 	call	0x16a	; 0x16a <enviarComando4Bits>
enviarComando4Bits(0x20); // Modo 4 bits
     314:	80 e2       	ldi	r24, 0x20	; 32
     316:	0e 94 b5 00 	call	0x16a	; 0x16a <enviarComando4Bits>
     31a:	81 ee       	ldi	r24, 0xE1	; 225
     31c:	94 e0       	ldi	r25, 0x04	; 4
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	f1 f7       	brne	.-4      	; 0x31e <lcd_init+0x3c>
     322:	00 c0       	rjmp	.+0      	; 0x324 <lcd_init+0x42>
     324:	00 00       	nop
_delay_ms(5);
	
// Configuración del LCD de 20x4
enviarComando(0x28);      // Función de 4 bits, 2 líneas, fuente 5x8
     326:	88 e2       	ldi	r24, 0x28	; 40
     328:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enviarComando>
enviarComando(0x0C);      // Encender el display, apagar el cursor
     32c:	8c e0       	ldi	r24, 0x0C	; 12
     32e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enviarComando>
enviarComando(0x01);      // Borrar pantalla
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enviarComando>
enviarComando(0x06);      // Desplazamiento del cursor a la derecha
     338:	86 e0       	ldi	r24, 0x06	; 6
     33a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enviarComando>
enviarComando(0x80);      // Posiciona el cursor en la primera línea, primera posición
     33e:	80 e8       	ldi	r24, 0x80	; 128
     340:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enviarComando>
     344:	08 95       	ret

00000346 <escribirEnLCD>:
}

void escribirEnLCD(char *c)
{
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	ec 01       	movw	r28, r24
while(*c != 0)			//----Espere hasta que todas las cadenas pasen a la pantalla LCD.
     34c:	03 c0       	rjmp	.+6      	; 0x354 <escribirEnLCD+0xe>
escribirDato(*c++);		//----Enviar la cadena a la pantalla LCD
     34e:	21 96       	adiw	r28, 0x01	; 1
     350:	0e 94 27 01 	call	0x24e	; 0x24e <escribirDato>
enviarComando(0x80);      // Posiciona el cursor en la primera línea, primera posición
}

void escribirEnLCD(char *c)
{
while(*c != 0)			//----Espere hasta que todas las cadenas pasen a la pantalla LCD.
     354:	88 81       	ld	r24, Y
     356:	81 11       	cpse	r24, r1
     358:	fa cf       	rjmp	.-12     	; 0x34e <escribirEnLCD+0x8>
escribirDato(*c++);		//----Enviar la cadena a la pantalla LCD
}
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <limpiar_LCD>:

void limpiar_LCD()
{
enviarComando(0x01);	//Comando para limpar el lcd
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enviarComando>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     366:	81 e2       	ldi	r24, 0x21	; 33
     368:	8a 95       	dec	r24
     36a:	f1 f7       	brne	.-4      	; 0x368 <limpiar_LCD+0x8>
     36c:	00 00       	nop
_delay_us(100);
enviarComando (0x80);	//Setea el cursor en la posicion cero
     36e:	80 e8       	ldi	r24, 0x80	; 128
     370:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enviarComando>
     374:	08 95       	ret

00000376 <SiguienteTextoLCD>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     376:	2f ed       	ldi	r18, 0xDF	; 223
     378:	88 ec       	ldi	r24, 0xC8	; 200
     37a:	90 e1       	ldi	r25, 0x10	; 16
     37c:	21 50       	subi	r18, 0x01	; 1
     37e:	80 40       	sbci	r24, 0x00	; 0
     380:	90 40       	sbci	r25, 0x00	; 0
     382:	e1 f7       	brne	.-8      	; 0x37c <SiguienteTextoLCD+0x6>
     384:	00 c0       	rjmp	.+0      	; 0x386 <SiguienteTextoLCD+0x10>
     386:	00 00       	nop
}

void SiguienteTextoLCD(void){
	_delay_ms(5500);
	//limpiar_LCD();
	limpiar_LCD();
     388:	0e 94 b0 01 	call	0x360	; 0x360 <limpiar_LCD>
	escribirEnLCD(" ");
     38c:	84 e1       	ldi	r24, 0x14	; 20
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
     394:	83 ec       	ldi	r24, 0xC3	; 195
     396:	99 e0       	ldi	r25, 0x09	; 9
     398:	01 97       	sbiw	r24, 0x01	; 1
     39a:	f1 f7       	brne	.-4      	; 0x398 <SiguienteTextoLCD+0x22>
     39c:	00 c0       	rjmp	.+0      	; 0x39e <SiguienteTextoLCD+0x28>
     39e:	00 00       	nop
     3a0:	08 95       	ret

000003a2 <TWI_ini>:

//????????????? TWI
void TWI_ini(void)
{
	//??????? ???????? ???????? ??????
	TWBR=0x05;//???????? ??? ???????? ???????? ??????: 5
     3a2:	85 e0       	ldi	r24, 0x05	; 5
     3a4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     3a8:	08 95       	ret

000003aa <TWI_Start>:
void TWI_Start(void)
{
	//?????????? ?????? TWI: TWEN=1
	//????????? ???? ????????? "Start": TWSTA=1
	//????????? ???? ?????????? TWI: TWINT=1
	TWCR=(1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     3aa:	84 ea       	ldi	r24, 0xA4	; 164
     3ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(~TWCR&(1<<TWINT));//????????? ?????????? ????????
     3b0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3b4:	88 23       	and	r24, r24
     3b6:	e4 f7       	brge	.-8      	; 0x3b0 <TWI_Start+0x6>
}
     3b8:	08 95       	ret

000003ba <TWI_Sendbyte>:

//???????? ?????
void TWI_Sendbyte(unsigned char byte)
{
	TWDR=byte;//???????? ???? ? ??????? ??????
     3ba:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	//?????????? ?????? TWI
	//????????? ???? ?????????? TWI
	TWCR=(1<<TWEN)|(1<<TWINT);
     3be:	84 e8       	ldi	r24, 0x84	; 132
     3c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(~TWCR&(1<<TWINT));//????????? ?????????? ????????
     3c4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3c8:	88 23       	and	r24, r24
     3ca:	e4 f7       	brge	.-8      	; 0x3c4 <TWI_Sendbyte+0xa>
}
     3cc:	08 95       	ret

000003ce <TWI_Receivebytes>:
//????? ??????
void TWI_Receivebytes()
{
   //...............................18 ???..................................
   //????? ??????? ????? ?????? 
   TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);//?????????? "ACK": TWEA=1
     3ce:	84 ec       	ldi	r24, 0xC4	; 196
     3d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
   while(~TWCR&(1<<TWINT));//????????? ?????????? ????????
     3d4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3d8:	88 23       	and	r24, r24
     3da:	e4 f7       	brge	.-8      	; 0x3d4 <TWI_Receivebytes+0x6>
   a1=TWDR;//?????????? ??????? ???? ?? MCP3421 ? ?????????? a1=TWDR;
     3dc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	a0 e0       	ldi	r26, 0x00	; 0
     3e4:	b0 e0       	ldi	r27, 0x00	; 0
     3e6:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <a1>
     3ea:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <a1+0x1>
     3ee:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <a1+0x2>
     3f2:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <a1+0x3>
   //????? ??????? ????? ??????
   TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);//?????????? "ACK": TWEA=1
     3f6:	84 ec       	ldi	r24, 0xC4	; 196
     3f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
   while(~TWCR&(1<<TWINT));//????????? ?????????? ????????
     3fc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     400:	88 23       	and	r24, r24
     402:	e4 f7       	brge	.-8      	; 0x3fc <TWI_Receivebytes+0x2e>
   a2=TWDR;//?????????? ??????? ???? ?? MCP3421 ? ?????????? a1=TWDR;
     404:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	a0 e0       	ldi	r26, 0x00	; 0
     40c:	b0 e0       	ldi	r27, 0x00	; 0
     40e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <a2>
     412:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <a2+0x1>
     416:	a0 93 33 01 	sts	0x0133, r26	; 0x800133 <a2+0x2>
     41a:	b0 93 34 01 	sts	0x0134, r27	; 0x800134 <a2+0x3>
   //????? ???????? ????? ??????
   TWCR=(1<<TWINT)|(1<<TWEN);//?????????? "NACK": TWEA ?? ?????????
     41e:	84 e8       	ldi	r24, 0x84	; 132
     420:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
   while(~TWCR&(1<<TWINT));//????????? ?????????? ????????
     424:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     428:	88 23       	and	r24, r24
     42a:	e4 f7       	brge	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
   a3=TWDR;//?????????? ??????? ???? ?? MCP3421 ? ?????????? a2
     42c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	a0 e0       	ldi	r26, 0x00	; 0
     434:	b0 e0       	ldi	r27, 0x00	; 0
     436:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <a3>
     43a:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <a3+0x1>
     43e:	a0 93 2f 01 	sts	0x012F, r26	; 0x80012f <a3+0x2>
     442:	b0 93 30 01 	sts	0x0130, r27	; 0x800130 <a3+0x3>
     446:	08 95       	ret

00000448 <TWI_Stop>:
void TWI_Stop(void)
{
	//?????????? ?????? TWI: TWEN=1
	//????????? ???? ????????? "Stop": TWSTO=1
	//????????? ???? ?????????? TWI: TWINT=1
	TWCR=(1<<TWEN)|(1<<TWSTO)|(1<<TWINT);
     448:	84 e9       	ldi	r24, 0x94	; 148
     44a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     44e:	08 95       	ret

00000450 <MCP3421_config>:
}

//????????? MCP3421
void MCP3421_config(void)
{
	TWI_Start();
     450:	0e 94 d5 01 	call	0x3aa	; 0x3aa <TWI_Start>
	TWI_Sendbyte(0b11010000);//?????????? ????? MCP3421: 1101000 + 0 ??????
     454:	80 ed       	ldi	r24, 0xD0	; 208
     456:	0e 94 dd 01 	call	0x3ba	; 0x3ba <TWI_Sendbyte>
	TWI_Sendbyte(0b00011100);//?????????? ??????. ????: 00011100
     45a:	8c e1       	ldi	r24, 0x1C	; 28
     45c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <TWI_Sendbyte>
	TWI_Stop();
     460:	0e 94 24 02 	call	0x448	; 0x448 <TWI_Stop>
     464:	08 95       	ret

00000466 <MCP3421_read>:
}

//????????? ?????? ?? MCP3421

int MCP3421_read(void)
{
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
	TWI_ini(); //INCIALIZA EL TWI (TIENE UNA CONFIGURACIÓN ESPECIAL, NO HAY QUE TOCAR)
     46a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <TWI_ini>
	MCP3421_config(); //configura el sensor MCP3421
     46e:	0e 94 28 02 	call	0x450	; 0x450 <MCP3421_config>
	TWI_Start();
     472:	0e 94 d5 01 	call	0x3aa	; 0x3aa <TWI_Start>
	TWI_Sendbyte(0b11010001);//?????????? ????? MCP3421: 1101000 + 1 ??????
     476:	81 ed       	ldi	r24, 0xD1	; 209
     478:	0e 94 dd 01 	call	0x3ba	; 0x3ba <TWI_Sendbyte>
    TWI_Receivebytes();//??????? ????? ? ??????????? ?????????
     47c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <TWI_Receivebytes>
	int Resultado = (((int)a1 << 10) | ((int)a2 << 2) | ((int)a3 >> 6))-2;
     480:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <a1>
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	92 2f       	mov	r25, r18
     48a:	99 0f       	add	r25, r25
     48c:	99 0f       	add	r25, r25
     48e:	c0 91 31 01 	lds	r28, 0x0131	; 0x800131 <a2>
     492:	d0 91 32 01 	lds	r29, 0x0132	; 0x800132 <a2+0x1>
     496:	cc 0f       	add	r28, r28
     498:	dd 1f       	adc	r29, r29
     49a:	cc 0f       	add	r28, r28
     49c:	dd 1f       	adc	r29, r29
     49e:	c8 2b       	or	r28, r24
     4a0:	d9 2b       	or	r29, r25
     4a2:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <a3>
     4a6:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <a3+0x1>
     4aa:	08 2e       	mov	r0, r24
     4ac:	89 2f       	mov	r24, r25
     4ae:	00 0c       	add	r0, r0
     4b0:	88 1f       	adc	r24, r24
     4b2:	99 0b       	sbc	r25, r25
     4b4:	00 0c       	add	r0, r0
     4b6:	88 1f       	adc	r24, r24
     4b8:	99 1f       	adc	r25, r25
     4ba:	c8 2b       	or	r28, r24
     4bc:	d9 2b       	or	r29, r25
     4be:	22 97       	sbiw	r28, 0x02	; 2
    TWI_Stop();
     4c0:	0e 94 24 02 	call	0x448	; 0x448 <TWI_Stop>
	return Resultado; 
}
     4c4:	ce 01       	movw	r24, r28
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	08 95       	ret

000004cc <PesarAgua>:
int PesarAgua(void){
int valorLeido = MCP3421_read();
     4cc:	0e 94 33 02 	call	0x466	; 0x466 <MCP3421_read>
int Peso = ((((float)valorLeido + 2)*1000) / 2047 )* 20; //esto da en cm3
     4d0:	bc 01       	movw	r22, r24
     4d2:	99 0f       	add	r25, r25
     4d4:	88 0b       	sbc	r24, r24
     4d6:	99 0b       	sbc	r25, r25
     4d8:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__floatsisf>
     4dc:	20 e0       	ldi	r18, 0x00	; 0
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	40 e0       	ldi	r20, 0x00	; 0
     4e2:	50 e4       	ldi	r21, 0x40	; 64
     4e4:	0e 94 b8 05 	call	0xb70	; 0xb70 <__addsf3>
     4e8:	20 e0       	ldi	r18, 0x00	; 0
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	4a e7       	ldi	r20, 0x7A	; 122
     4ee:	54 e4       	ldi	r21, 0x44	; 68
     4f0:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__mulsf3>
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	30 ee       	ldi	r19, 0xE0	; 224
     4f8:	4f ef       	ldi	r20, 0xFF	; 255
     4fa:	54 e4       	ldi	r21, 0x44	; 68
     4fc:	0e 94 24 06 	call	0xc48	; 0xc48 <__divsf3>
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 ea       	ldi	r20, 0xA0	; 160
     506:	51 e4       	ldi	r21, 0x41	; 65
     508:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__mulsf3>
     50c:	0e 94 96 06 	call	0xd2c	; 0xd2c <__fixsfsi>
return Peso;}
     510:	cb 01       	movw	r24, r22
     512:	08 95       	ret

00000514 <i2c_read>:
	int MedicionTemperatura = atoi(buf);
	char buffer[10]; // Espacio para la cadena de caracteres
	sprintf(buffer, "%d", MedicionTemperatura); // Convierte el entero a una cadena
	uart_send_string(buffer);
	;
};
     514:	94 ea       	ldi	r25, 0xA4	; 164
     516:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     51a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     51e:	99 23       	and	r25, r25
     520:	e4 f7       	brge	.-8      	; 0x51a <i2c_read+0x6>
     522:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     526:	9b 7f       	andi	r25, 0xFB	; 251
     528:	98 30       	cpi	r25, 0x08	; 8
     52a:	09 f0       	breq	.+2      	; 0x52e <i2c_read+0x1a>
     52c:	57 c0       	rjmp	.+174    	; 0x5dc <i2c_read+0xc8>
     52e:	90 e9       	ldi	r25, 0x90	; 144
     530:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     534:	94 e8       	ldi	r25, 0x84	; 132
     536:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     53a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     53e:	99 23       	and	r25, r25
     540:	e4 f7       	brge	.-8      	; 0x53a <i2c_read+0x26>
     542:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     546:	9b 7f       	andi	r25, 0xFB	; 251
     548:	98 31       	cpi	r25, 0x18	; 24
     54a:	09 f0       	breq	.+2      	; 0x54e <i2c_read+0x3a>
     54c:	47 c0       	rjmp	.+142    	; 0x5dc <i2c_read+0xc8>
     54e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     552:	84 e8       	ldi	r24, 0x84	; 132
     554:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     558:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     55c:	88 23       	and	r24, r24
     55e:	e4 f7       	brge	.-8      	; 0x558 <i2c_read+0x44>
     560:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     564:	8b 7f       	andi	r24, 0xFB	; 251
     566:	88 32       	cpi	r24, 0x28	; 40
     568:	c9 f5       	brne	.+114    	; 0x5dc <i2c_read+0xc8>
     56a:	84 ea       	ldi	r24, 0xA4	; 164
     56c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     570:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     574:	88 23       	and	r24, r24
     576:	e4 f7       	brge	.-8      	; 0x570 <i2c_read+0x5c>
     578:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     57c:	8b 7f       	andi	r24, 0xFB	; 251
     57e:	80 31       	cpi	r24, 0x10	; 16
     580:	69 f5       	brne	.+90     	; 0x5dc <i2c_read+0xc8>
     582:	81 e9       	ldi	r24, 0x91	; 145
     584:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     588:	84 e8       	ldi	r24, 0x84	; 132
     58a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     58e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     592:	88 23       	and	r24, r24
     594:	e4 f7       	brge	.-8      	; 0x58e <i2c_read+0x7a>
     596:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     59a:	8b 7f       	andi	r24, 0xFB	; 251
     59c:	80 34       	cpi	r24, 0x40	; 64
     59e:	f1 f4       	brne	.+60     	; 0x5dc <i2c_read+0xc8>
     5a0:	15 c0       	rjmp	.+42     	; 0x5cc <i2c_read+0xb8>
     5a2:	21 15       	cp	r18, r1
     5a4:	31 05       	cpc	r19, r1
     5a6:	21 f4       	brne	.+8      	; 0x5b0 <i2c_read+0x9c>
     5a8:	84 e8       	ldi	r24, 0x84	; 132
     5aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5ae:	03 c0       	rjmp	.+6      	; 0x5b6 <i2c_read+0xa2>
     5b0:	84 ec       	ldi	r24, 0xC4	; 196
     5b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5b6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5ba:	88 23       	and	r24, r24
     5bc:	e4 f7       	brge	.-8      	; 0x5b6 <i2c_read+0xa2>
     5be:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     5c2:	fb 01       	movw	r30, r22
     5c4:	80 83       	st	Z, r24
     5c6:	a9 01       	movw	r20, r18
     5c8:	6f 5f       	subi	r22, 0xFF	; 255
     5ca:	7f 4f       	sbci	r23, 0xFF	; 255
     5cc:	9a 01       	movw	r18, r20
     5ce:	21 50       	subi	r18, 0x01	; 1
     5d0:	31 09       	sbc	r19, r1
     5d2:	45 2b       	or	r20, r21
     5d4:	31 f7       	brne	.-52     	; 0x5a2 <i2c_read+0x8e>
     5d6:	84 e9       	ldi	r24, 0x94	; 148
     5d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5dc:	08 95       	ret

000005de <i2c_wwrite>:
     5de:	94 ea       	ldi	r25, 0xA4	; 164
     5e0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5e4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5e8:	99 23       	and	r25, r25
     5ea:	e4 f7       	brge	.-8      	; 0x5e4 <i2c_wwrite+0x6>
     5ec:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     5f0:	9b 7f       	andi	r25, 0xFB	; 251
     5f2:	98 30       	cpi	r25, 0x08	; 8
     5f4:	d1 f5       	brne	.+116    	; 0x66a <i2c_wwrite+0x8c>
     5f6:	90 e9       	ldi	r25, 0x90	; 144
     5f8:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     5fc:	94 e8       	ldi	r25, 0x84	; 132
     5fe:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     602:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     606:	99 23       	and	r25, r25
     608:	e4 f7       	brge	.-8      	; 0x602 <i2c_wwrite+0x24>
     60a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     60e:	9b 7f       	andi	r25, 0xFB	; 251
     610:	98 31       	cpi	r25, 0x18	; 24
     612:	59 f5       	brne	.+86     	; 0x66a <i2c_wwrite+0x8c>
     614:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     618:	84 e8       	ldi	r24, 0x84	; 132
     61a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     61e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     622:	88 23       	and	r24, r24
     624:	e4 f7       	brge	.-8      	; 0x61e <i2c_wwrite+0x40>
     626:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     62a:	8b 7f       	andi	r24, 0xFB	; 251
     62c:	88 32       	cpi	r24, 0x28	; 40
     62e:	e9 f4       	brne	.+58     	; 0x66a <i2c_wwrite+0x8c>
     630:	14 c0       	rjmp	.+40     	; 0x65a <i2c_wwrite+0x7c>
     632:	fb 01       	movw	r30, r22
     634:	31 96       	adiw	r30, 0x01	; 1
     636:	db 01       	movw	r26, r22
     638:	8c 91       	ld	r24, X
     63a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     63e:	84 e8       	ldi	r24, 0x84	; 132
     640:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     644:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     648:	88 23       	and	r24, r24
     64a:	e4 f7       	brge	.-8      	; 0x644 <i2c_wwrite+0x66>
     64c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     650:	a9 01       	movw	r20, r18
     652:	8b 7f       	andi	r24, 0xFB	; 251
     654:	88 32       	cpi	r24, 0x28	; 40
     656:	49 f4       	brne	.+18     	; 0x66a <i2c_wwrite+0x8c>
     658:	bf 01       	movw	r22, r30
     65a:	9a 01       	movw	r18, r20
     65c:	21 50       	subi	r18, 0x01	; 1
     65e:	31 09       	sbc	r19, r1
     660:	45 2b       	or	r20, r21
     662:	39 f7       	brne	.-50     	; 0x632 <i2c_wwrite+0x54>
     664:	84 e9       	ldi	r24, 0x94	; 148
     666:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     66a:	08 95       	ret

0000066c <mcp_set_adc_resolution>:
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	1f 92       	push	r1
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
     678:	18 2f       	mov	r17, r24
     67a:	41 e0       	ldi	r20, 0x01	; 1
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	be 01       	movw	r22, r28
     680:	6f 5f       	subi	r22, 0xFF	; 255
     682:	7f 4f       	sbci	r23, 0xFF	; 255
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	0e 94 8a 02 	call	0x514	; 0x514 <i2c_read>
     68a:	89 81       	ldd	r24, Y+1	; 0x01
     68c:	28 2f       	mov	r18, r24
     68e:	2f 79       	andi	r18, 0x9F	; 159
     690:	30 e2       	ldi	r19, 0x20	; 32
     692:	13 9f       	mul	r17, r19
     694:	c0 01       	movw	r24, r0
     696:	11 24       	eor	r1, r1
     698:	82 2b       	or	r24, r18
     69a:	89 83       	std	Y+1, r24	; 0x01
     69c:	41 e0       	ldi	r20, 0x01	; 1
     69e:	50 e0       	ldi	r21, 0x00	; 0
     6a0:	be 01       	movw	r22, r28
     6a2:	6f 5f       	subi	r22, 0xFF	; 255
     6a4:	7f 4f       	sbci	r23, 0xFF	; 255
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	0e 94 ef 02 	call	0x5de	; 0x5de <i2c_wwrite>
     6ac:	0f 90       	pop	r0
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	08 95       	ret

000006b6 <mcp_set_power_mode>:
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	1f 92       	push	r1
     6be:	cd b7       	in	r28, 0x3d	; 61
     6c0:	de b7       	in	r29, 0x3e	; 62
     6c2:	18 2f       	mov	r17, r24
     6c4:	41 e0       	ldi	r20, 0x01	; 1
     6c6:	50 e0       	ldi	r21, 0x00	; 0
     6c8:	be 01       	movw	r22, r28
     6ca:	6f 5f       	subi	r22, 0xFF	; 255
     6cc:	7f 4f       	sbci	r23, 0xFF	; 255
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	0e 94 8a 02 	call	0x514	; 0x514 <i2c_read>
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	8e 7f       	andi	r24, 0xFE	; 254
     6d8:	18 2b       	or	r17, r24
     6da:	19 83       	std	Y+1, r17	; 0x01
     6dc:	41 e0       	ldi	r20, 0x01	; 1
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	be 01       	movw	r22, r28
     6e2:	6f 5f       	subi	r22, 0xFF	; 255
     6e4:	7f 4f       	sbci	r23, 0xFF	; 255
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	0e 94 ef 02 	call	0x5de	; 0x5de <i2c_wwrite>
     6ec:	0f 90       	pop	r0
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	08 95       	ret

000006f6 <mcp_read_temp_float>:
     6f6:	ef 92       	push	r14
     6f8:	ff 92       	push	r15
     6fa:	1f 93       	push	r17
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	00 d0       	rcall	.+0      	; 0x702 <mcp_read_temp_float+0xc>
     702:	cd b7       	in	r28, 0x3d	; 61
     704:	de b7       	in	r29, 0x3e	; 62
     706:	42 e0       	ldi	r20, 0x02	; 2
     708:	50 e0       	ldi	r21, 0x00	; 0
     70a:	be 01       	movw	r22, r28
     70c:	6f 5f       	subi	r22, 0xFF	; 255
     70e:	7f 4f       	sbci	r23, 0xFF	; 255
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	0e 94 8a 02 	call	0x514	; 0x514 <i2c_read>
     716:	e9 80       	ldd	r14, Y+1	; 0x01
     718:	fa 80       	ldd	r15, Y+2	; 0x02
     71a:	b7 01       	movw	r22, r14
     71c:	77 27       	eor	r23, r23
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	0e 94 cc 06 	call	0xd98	; 0xd98 <__floatunsisf>
     726:	1f 2d       	mov	r17, r15
     728:	f7 fe       	sbrs	r15, 7
     72a:	06 c0       	rjmp	.+12     	; 0x738 <mcp_read_temp_float+0x42>
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	40 e0       	ldi	r20, 0x00	; 0
     732:	5f e3       	ldi	r21, 0x3F	; 63
     734:	0e 94 b8 05 	call	0xb70	; 0xb70 <__addsf3>
     738:	16 ff       	sbrs	r17, 6
     73a:	06 c0       	rjmp	.+12     	; 0x748 <mcp_read_temp_float+0x52>
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	40 e8       	ldi	r20, 0x80	; 128
     742:	5e e3       	ldi	r21, 0x3E	; 62
     744:	0e 94 b8 05 	call	0xb70	; 0xb70 <__addsf3>
     748:	15 ff       	sbrs	r17, 5
     74a:	06 c0       	rjmp	.+12     	; 0x758 <mcp_read_temp_float+0x62>
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	40 e0       	ldi	r20, 0x00	; 0
     752:	5e e3       	ldi	r21, 0x3E	; 62
     754:	0e 94 b8 05 	call	0xb70	; 0xb70 <__addsf3>
     758:	14 ff       	sbrs	r17, 4
     75a:	06 c0       	rjmp	.+12     	; 0x768 <mcp_read_temp_float+0x72>
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	40 e8       	ldi	r20, 0x80	; 128
     762:	5d e3       	ldi	r21, 0x3D	; 61
     764:	0e 94 b8 05 	call	0xb70	; 0xb70 <__addsf3>
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	ff 90       	pop	r15
     774:	ef 90       	pop	r14
     776:	08 95       	ret

00000778 <LeerTemperatura>:
int LeerTemperatura(void){
     778:	8f 92       	push	r8
     77a:	9f 92       	push	r9
     77c:	af 92       	push	r10
     77e:	bf 92       	push	r11
     780:	cf 92       	push	r12
     782:	df 92       	push	r13
     784:	ef 92       	push	r14
     786:	ff 92       	push	r15
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	cd b7       	in	r28, 0x3d	; 61
     792:	de b7       	in	r29, 0x3e	; 62
     794:	aa 97       	sbiw	r28, 0x2a	; 42
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	f8 94       	cli
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	cd bf       	out	0x3d, r28	; 61
	int i=1;
char buf[32];
uart_init();
     7a0:	0e 94 49 04 	call	0x892	; 0x892 <uart_init>
//init MCP9800 sensor
mcp_init();
mcp_set_adc_resolution(MCP_ADC_RES_12);
     7a4:	83 e0       	ldi	r24, 0x03	; 3
     7a6:	0e 94 36 03 	call	0x66c	; 0x66c <mcp_set_adc_resolution>
mcp_set_power_mode(MCP_POWER_UP);
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <mcp_set_power_mode>
for (i=1; i<=250; i++)
     7b0:	01 e0       	ldi	r16, 0x01	; 1
     7b2:	10 e0       	ldi	r17, 0x00	; 0
     7b4:	3c c0       	rjmp	.+120    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
{
	float temp = mcp_read_temp_float();
     7b6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <mcp_read_temp_float>
     7ba:	4b 01       	movw	r8, r22
     7bc:	5c 01       	movw	r10, r24
	int temp_whole = (int)temp; // Extract whole number part
     7be:	0e 94 96 06 	call	0xd2c	; 0xd2c <__fixsfsi>
     7c2:	6b 01       	movw	r12, r22
     7c4:	7c 01       	movw	r14, r24
	int temp_frac = (int)((temp - temp_whole) * 10000); // Extract fractional part with desired precision
     7c6:	07 2e       	mov	r0, r23
     7c8:	00 0c       	add	r0, r0
     7ca:	88 0b       	sbc	r24, r24
     7cc:	99 0b       	sbc	r25, r25
     7ce:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__floatsisf>
     7d2:	9b 01       	movw	r18, r22
     7d4:	ac 01       	movw	r20, r24
     7d6:	c5 01       	movw	r24, r10
     7d8:	b4 01       	movw	r22, r8
     7da:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__subsf3>
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	30 e4       	ldi	r19, 0x40	; 64
     7e2:	4c e1       	ldi	r20, 0x1C	; 28
     7e4:	56 e4       	ldi	r21, 0x46	; 70
     7e6:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__mulsf3>
     7ea:	0e 94 96 06 	call	0xd2c	; 0xd2c <__fixsfsi>
     7ee:	9b 01       	movw	r18, r22
	if(temp_frac < 0) temp_frac = -temp_frac; // Ensure the fractional part is positive
     7f0:	77 23       	and	r23, r23
     7f2:	24 f4       	brge	.+8      	; 0x7fc <LeerTemperatura+0x84>
     7f4:	22 27       	eor	r18, r18
     7f6:	33 27       	eor	r19, r19
     7f8:	26 1b       	sub	r18, r22
     7fa:	37 0b       	sbc	r19, r23
	// Now print both parts separately
	sprintf(buf, "%d.%04d", temp_whole, temp_frac);
     7fc:	3f 93       	push	r19
     7fe:	2f 93       	push	r18
     800:	df 92       	push	r13
     802:	cf 92       	push	r12
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	9f 93       	push	r25
     80a:	8f 93       	push	r24
     80c:	ce 01       	movw	r24, r28
     80e:	01 96       	adiw	r24, 0x01	; 1
     810:	9f 93       	push	r25
     812:	8f 93       	push	r24
     814:	0e 94 ed 07 	call	0xfda	; 0xfda <sprintf>
	// Send the temperature string over UART
	uart_send_string(" ");
     818:	84 e1       	ldi	r24, 0x14	; 20
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <uart_send_string>
uart_init();
//init MCP9800 sensor
mcp_init();
mcp_set_adc_resolution(MCP_ADC_RES_12);
mcp_set_power_mode(MCP_POWER_UP);
for (i=1; i<=250; i++)
     820:	0f 5f       	subi	r16, 0xFF	; 255
     822:	1f 4f       	sbci	r17, 0xFF	; 255
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	f8 94       	cli
     828:	de bf       	out	0x3e, r29	; 62
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	cd bf       	out	0x3d, r28	; 61
     82e:	0b 3f       	cpi	r16, 0xFB	; 251
     830:	11 05       	cpc	r17, r1
     832:	0c f2       	brlt	.-126    	; 0x7b6 <LeerTemperatura+0x3e>
	// Now print both parts separately
	sprintf(buf, "%d.%04d", temp_whole, temp_frac);
	// Send the temperature string over UART
	uart_send_string(" ");
}
uart_send_newline();
     834:	0e 94 69 04 	call	0x8d2	; 0x8d2 <uart_send_newline>
//uart_send_string("Temperatura: ");
//uart_send_string(buf);
//uart_send_newline();
// Convert the formatted string to an integer
int MedicionTemperatura = atoi(buf);
     838:	ce 01       	movw	r24, r28
     83a:	01 96       	adiw	r24, 0x01	; 1
     83c:	0e 94 c7 07 	call	0xf8e	; 0xf8e <atoi>
char buffer[10]; // Espacio para la cadena de caracteres
sprintf(buffer, "%d", MedicionTemperatura); // Convierte el entero a una cadena
     840:	9f 93       	push	r25
     842:	8f 93       	push	r24
     844:	86 e1       	ldi	r24, 0x16	; 22
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	9f 93       	push	r25
     84a:	8f 93       	push	r24
     84c:	8e 01       	movw	r16, r28
     84e:	0f 5d       	subi	r16, 0xDF	; 223
     850:	1f 4f       	sbci	r17, 0xFF	; 255
     852:	1f 93       	push	r17
     854:	0f 93       	push	r16
     856:	0e 94 ed 07 	call	0xfda	; 0xfda <sprintf>
MedicionTemperatura = atoi(buffer);
     85a:	c8 01       	movw	r24, r16
     85c:	0e 94 c7 07 	call	0xf8e	; 0xf8e <atoi>
    return MedicionTemperatura;}
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	aa 96       	adiw	r28, 0x2a	; 42
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	f8 94       	cli
     872:	de bf       	out	0x3e, r29	; 62
     874:	0f be       	out	0x3f, r0	; 63
     876:	cd bf       	out	0x3d, r28	; 61
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	ff 90       	pop	r15
     882:	ef 90       	pop	r14
     884:	df 90       	pop	r13
     886:	cf 90       	pop	r12
     888:	bf 90       	pop	r11
     88a:	af 90       	pop	r10
     88c:	9f 90       	pop	r9
     88e:	8f 90       	pop	r8
     890:	08 95       	ret

00000892 <uart_init>:

#include "UART.h"
void uart_init() {
	// Configurar la velocidad de transmisión a 9600
	UBRR0H = 0;
     892:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 103;
     896:	87 e6       	ldi	r24, 0x67	; 103
     898:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilitar el transmisor y el receptor
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);
     89c:	88 e1       	ldi	r24, 0x18	; 24
     89e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// Configurar el formato del trama: 8 bits de datos, 1 bit de parada
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     8a2:	86 e0       	ldi	r24, 0x06	; 6
     8a4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     8a8:	08 95       	ret

000008aa <uart_send_char>:
}

// Enviar un solo carácter por la UART
void uart_send_char(char c) {
	while (!(UCSR0A & (1 << UDRE0))); // Esperar hasta que el buffer esté vacío
     8aa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     8ae:	95 ff       	sbrs	r25, 5
     8b0:	fc cf       	rjmp	.-8      	; 0x8aa <uart_send_char>
	UDR0 = c;
     8b2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     8b6:	08 95       	ret

000008b8 <uart_send_string>:
}

// Enviar una cadena (texto) terminada en nulo por la UART
void uart_send_string(const char* str) {
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	ec 01       	movw	r28, r24
	while (*str) {
     8be:	03 c0       	rjmp	.+6      	; 0x8c6 <uart_send_string+0xe>
		uart_send_char(*str);
     8c0:	0e 94 55 04 	call	0x8aa	; 0x8aa <uart_send_char>
		str++;
     8c4:	21 96       	adiw	r28, 0x01	; 1
	UDR0 = c;
}

// Enviar una cadena (texto) terminada en nulo por la UART
void uart_send_string(const char* str) {
	while (*str) {
     8c6:	88 81       	ld	r24, Y
     8c8:	81 11       	cpse	r24, r1
     8ca:	fa cf       	rjmp	.-12     	; 0x8c0 <uart_send_string+0x8>
		uart_send_char(*str);
		str++;
	}
}
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	08 95       	ret

000008d2 <uart_send_newline>:

// Enviar un carácter de salto de línea por la UART
void uart_send_newline() {
	uart_send_char(13);
     8d2:	8d e0       	ldi	r24, 0x0D	; 13
     8d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <uart_send_char>
	uart_send_char(10);
     8d8:	8a e0       	ldi	r24, 0x0A	; 10
     8da:	0e 94 55 04 	call	0x8aa	; 0x8aa <uart_send_char>
     8de:	08 95       	ret

000008e0 <MedicionPolvos>:





void MedicionPolvos(void){
     8e0:	cf 92       	push	r12
     8e2:	df 92       	push	r13
     8e4:	ef 92       	push	r14
     8e6:	ff 92       	push	r15
     8e8:	0f 93       	push	r16
     8ea:	1f 93       	push	r17
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	cd b7       	in	r28, 0x3d	; 61
     8f2:	de b7       	in	r29, 0x3e	; 62
     8f4:	2a 97       	sbiw	r28, 0x0a	; 10
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	f8 94       	cli
     8fa:	de bf       	out	0x3e, r29	; 62
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	cd bf       	out	0x3d, r28	; 61
	int Auxiliar = 0; // Declara la variable pepe
	char buffer[10]; // Declara la variable buffer
	iniciar_ADC(); // Inicializa el ADC
     900:	0e 94 53 00 	call	0xa6	; 0xa6 <iniciar_ADC>
	leer_ADC(0); // Lee el valor del pin PC0
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	0e 94 64 00 	call	0xc8	; 0xc8 <leer_ADC>
	NivelPolvo1 = ((float)ADC/1023)*100; // Guarda el valor del ADC en porcentaje (por eso dividimos por la resolución y por 100)
     90c:	0f 2e       	mov	r0, r31
     90e:	f8 e7       	ldi	r31, 0x78	; 120
     910:	cf 2e       	mov	r12, r31
     912:	d1 2c       	mov	r13, r1
     914:	f0 2d       	mov	r31, r0
     916:	f6 01       	movw	r30, r12
     918:	60 81       	ld	r22, Z
     91a:	71 81       	ldd	r23, Z+1	; 0x01
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 cc 06 	call	0xd98	; 0xd98 <__floatunsisf>
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	30 ec       	ldi	r19, 0xC0	; 192
     928:	4f e7       	ldi	r20, 0x7F	; 127
     92a:	54 e4       	ldi	r21, 0x44	; 68
     92c:	0e 94 24 06 	call	0xc48	; 0xc48 <__divsf3>
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	48 ec       	ldi	r20, 0xC8	; 200
     936:	52 e4       	ldi	r21, 0x42	; 66
     938:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__mulsf3>
     93c:	0e 94 96 06 	call	0xd2c	; 0xd2c <__fixsfsi>
     940:	60 93 45 01 	sts	0x0145, r22	; 0x800145 <NivelPolvo1>
     944:	70 93 46 01 	sts	0x0146, r23	; 0x800146 <NivelPolvo1+0x1>
	sprintf(buffer, "%.d", NivelPolvo1); // Convierte el valor  a una cadena y la guarda en buffer
     948:	7f 93       	push	r23
     94a:	6f 93       	push	r22
     94c:	0f 2e       	mov	r0, r31
     94e:	f9 e1       	ldi	r31, 0x19	; 25
     950:	ef 2e       	mov	r14, r31
     952:	f1 e0       	ldi	r31, 0x01	; 1
     954:	ff 2e       	mov	r15, r31
     956:	f0 2d       	mov	r31, r0
     958:	ff 92       	push	r15
     95a:	ef 92       	push	r14
     95c:	8e 01       	movw	r16, r28
     95e:	0f 5f       	subi	r16, 0xFF	; 255
     960:	1f 4f       	sbci	r17, 0xFF	; 255
     962:	1f 93       	push	r17
     964:	0f 93       	push	r16
     966:	0e 94 ed 07 	call	0xfda	; 0xfda <sprintf>
	SiguienteTextoLCD();
     96a:	0e 94 bb 01 	call	0x376	; 0x376 <SiguienteTextoLCD>
	escribirEnLCD(buffer); // Escribe el valor en el LCD, para ver que se hizo algo, despues la comentamos
     96e:	c8 01       	movw	r24, r16
     970:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
    leer_ADC(1); // Lee el valor del pin PC0
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 64 00 	call	0xc8	; 0xc8 <leer_ADC>
    NivelPolvo2 = ((float)ADC/1023)*100; // Guarda el valor del ADC en porcentaje (por eso dividimos por la resolución y por 100)
     97c:	f6 01       	movw	r30, r12
     97e:	60 81       	ld	r22, Z
     980:	71 81       	ldd	r23, Z+1	; 0x01
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	0e 94 cc 06 	call	0xd98	; 0xd98 <__floatunsisf>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 ec       	ldi	r19, 0xC0	; 192
     98e:	4f e7       	ldi	r20, 0x7F	; 127
     990:	54 e4       	ldi	r21, 0x44	; 68
     992:	0e 94 24 06 	call	0xc48	; 0xc48 <__divsf3>
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	48 ec       	ldi	r20, 0xC8	; 200
     99c:	52 e4       	ldi	r21, 0x42	; 66
     99e:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__mulsf3>
     9a2:	0e 94 96 06 	call	0xd2c	; 0xd2c <__fixsfsi>
     9a6:	60 93 4b 01 	sts	0x014B, r22	; 0x80014b <NivelPolvo2>
     9aa:	70 93 4c 01 	sts	0x014C, r23	; 0x80014c <NivelPolvo2+0x1>
    sprintf(buffer, "%.d", NivelPolvo2); // Convierte el valor  a una cadena y la guarda en buffer
     9ae:	7f 93       	push	r23
     9b0:	6f 93       	push	r22
     9b2:	ff 92       	push	r15
     9b4:	ef 92       	push	r14
     9b6:	1f 93       	push	r17
     9b8:	0f 93       	push	r16
     9ba:	0e 94 ed 07 	call	0xfda	; 0xfda <sprintf>
 SiguienteTextoLCD();
     9be:	0e 94 bb 01 	call	0x376	; 0x376 <SiguienteTextoLCD>
    escribirEnLCD(buffer); // Escribe el valor en el LCD, para ver que se hizo algo, despues la comentamos
     9c2:	c8 01       	movw	r24, r16
     9c4:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
	 leer_ADC(2); // Lee el valor del pin PC0
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 64 00 	call	0xc8	; 0xc8 <leer_ADC>
	 NivelPolvo3 = ((float)ADC/1023)*100; // Guarda el valor del ADC en porcentaje (por eso dividimos por la resolución y por 100)
     9d0:	f6 01       	movw	r30, r12
     9d2:	60 81       	ld	r22, Z
     9d4:	71 81       	ldd	r23, Z+1	; 0x01
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 cc 06 	call	0xd98	; 0xd98 <__floatunsisf>
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 ec       	ldi	r19, 0xC0	; 192
     9e2:	4f e7       	ldi	r20, 0x7F	; 127
     9e4:	54 e4       	ldi	r21, 0x44	; 68
     9e6:	0e 94 24 06 	call	0xc48	; 0xc48 <__divsf3>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	48 ec       	ldi	r20, 0xC8	; 200
     9f0:	52 e4       	ldi	r21, 0x42	; 66
     9f2:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__mulsf3>
     9f6:	0e 94 96 06 	call	0xd2c	; 0xd2c <__fixsfsi>
     9fa:	60 93 49 01 	sts	0x0149, r22	; 0x800149 <NivelPolvo3>
     9fe:	70 93 4a 01 	sts	0x014A, r23	; 0x80014a <NivelPolvo3+0x1>
	 sprintf(buffer, "%d", NivelPolvo3); // Convierte el valor  a una cadena y la guarda en buffer
     a02:	7f 93       	push	r23
     a04:	6f 93       	push	r22
     a06:	0f 2e       	mov	r0, r31
     a08:	f6 e1       	ldi	r31, 0x16	; 22
     a0a:	ef 2e       	mov	r14, r31
     a0c:	f1 e0       	ldi	r31, 0x01	; 1
     a0e:	ff 2e       	mov	r15, r31
     a10:	f0 2d       	mov	r31, r0
     a12:	ff 92       	push	r15
     a14:	ef 92       	push	r14
     a16:	1f 93       	push	r17
     a18:	0f 93       	push	r16
     a1a:	0e 94 ed 07 	call	0xfda	; 0xfda <sprintf>
	  SiguienteTextoLCD();
     a1e:	0e 94 bb 01 	call	0x376	; 0x376 <SiguienteTextoLCD>
	 escribirEnLCD(buffer);
     a22:	c8 01       	movw	r24, r16
     a24:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
	leer_ADC(3); // Lee el valor del pin PC0
     a28:	83 e0       	ldi	r24, 0x03	; 3
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 64 00 	call	0xc8	; 0xc8 <leer_ADC>
	 NivelPolvo4 = ((float)ADC/1023)*100; // Guarda el valor del ADC en porcentaje (por eso dividimos por la resolución y por 100)
     a30:	f6 01       	movw	r30, r12
     a32:	60 81       	ld	r22, Z
     a34:	71 81       	ldd	r23, Z+1	; 0x01
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	0e 94 cc 06 	call	0xd98	; 0xd98 <__floatunsisf>
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 ec       	ldi	r19, 0xC0	; 192
     a42:	4f e7       	ldi	r20, 0x7F	; 127
     a44:	54 e4       	ldi	r21, 0x44	; 68
     a46:	0e 94 24 06 	call	0xc48	; 0xc48 <__divsf3>
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	48 ec       	ldi	r20, 0xC8	; 200
     a50:	52 e4       	ldi	r21, 0x42	; 66
     a52:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__mulsf3>
     a56:	0e 94 96 06 	call	0xd2c	; 0xd2c <__fixsfsi>
     a5a:	60 93 47 01 	sts	0x0147, r22	; 0x800147 <NivelPolvo4>
     a5e:	70 93 48 01 	sts	0x0148, r23	; 0x800148 <NivelPolvo4+0x1>
	sprintf(buffer, "%d", NivelPolvo4); // Convierte el valor  a una cadena y la guarda en buffer
     a62:	7f 93       	push	r23
     a64:	6f 93       	push	r22
     a66:	ff 92       	push	r15
     a68:	ef 92       	push	r14
     a6a:	1f 93       	push	r17
     a6c:	0f 93       	push	r16
     a6e:	0e 94 ed 07 	call	0xfda	; 0xfda <sprintf>
	SiguienteTextoLCD();
     a72:	0e 94 bb 01 	call	0x376	; 0x376 <SiguienteTextoLCD>
	 escribirEnLCD(buffer); // Escribe el valor en el LCD, para ver que se hizo algo, despues la comentamos
     a76:	c8 01       	movw	r24, r16
     a78:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
	SiguienteTextoLCD();
     a7c:	0e 94 bb 01 	call	0x376	; 0x376 <SiguienteTextoLCD>
	;
	};
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	f8 94       	cli
     a84:	de bf       	out	0x3e, r29	; 62
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	cd bf       	out	0x3d, r28	; 61
     a8a:	2a 96       	adiw	r28, 0x0a	; 10
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	cd bf       	out	0x3d, r28	; 61
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	ff 90       	pop	r15
     aa0:	ef 90       	pop	r14
     aa2:	df 90       	pop	r13
     aa4:	cf 90       	pop	r12
     aa6:	08 95       	ret

00000aa8 <MedirVariables>:
	
	void MedirVariables(void){
		MedicionPolvos();
     aa8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <MedicionPolvos>
     aac:	08 95       	ret

00000aae <main>:
	}
   
   int main(void){
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
     ab6:	66 97       	sbiw	r28, 0x16	; 22
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	f8 94       	cli
     abc:	de bf       	out	0x3e, r29	; 62
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	cd bf       	out	0x3d, r28	; 61
	while(1){	 
	int Temperatura=LeerTemperatura();
     ac2:	0e 94 bc 03 	call	0x778	; 0x778 <LeerTemperatura>
	char buffer[22];
	  sprintf(buffer, "%d", Temperatura); // Convierte el entero a una cadena
     ac6:	9f 93       	push	r25
     ac8:	8f 93       	push	r24
     aca:	0f 2e       	mov	r0, r31
     acc:	f6 e1       	ldi	r31, 0x16	; 22
     ace:	ef 2e       	mov	r14, r31
     ad0:	f1 e0       	ldi	r31, 0x01	; 1
     ad2:	ff 2e       	mov	r15, r31
     ad4:	f0 2d       	mov	r31, r0
     ad6:	ff 92       	push	r15
     ad8:	ef 92       	push	r14
     ada:	8e 01       	movw	r16, r28
     adc:	0f 5f       	subi	r16, 0xFF	; 255
     ade:	1f 4f       	sbci	r17, 0xFF	; 255
     ae0:	1f 93       	push	r17
     ae2:	0f 93       	push	r16
     ae4:	0e 94 ed 07 	call	0xfda	; 0xfda <sprintf>
	  lcd_init();
     ae8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_init>
	  escribirEnLCD("aaaaa");
     aec:	8d e1       	ldi	r24, 0x1D	; 29
     aee:	91 e0       	ldi	r25, 0x01	; 1
     af0:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
	  escribirEnLCD(buffer); // Muestra la cadena en la pantalla LCD
     af4:	c8 01       	movw	r24, r16
     af6:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
	  escribirEnLCD("---");
     afa:	83 e2       	ldi	r24, 0x23	; 35
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
     b02:	2f e3       	ldi	r18, 0x3F	; 63
     b04:	82 e4       	ldi	r24, 0x42	; 66
     b06:	9f e0       	ldi	r25, 0x0F	; 15
     b08:	21 50       	subi	r18, 0x01	; 1
     b0a:	80 40       	sbci	r24, 0x00	; 0
     b0c:	90 40       	sbci	r25, 0x00	; 0
     b0e:	e1 f7       	brne	.-8      	; 0xb08 <main+0x5a>
     b10:	00 c0       	rjmp	.+0      	; 0xb12 <main+0x64>
     b12:	00 00       	nop
	  _delay_ms(5000);
	  limpiar_LCD();
     b14:	0e 94 b0 01 	call	0x360	; 0x360 <limpiar_LCD>
	  i2c_stop();
     b18:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_stop>
	  
	  int Peso=PesarAgua();
     b1c:	0e 94 66 02 	call	0x4cc	; 0x4cc <PesarAgua>
	   // Asegúrate de tener suficiente espacio en el buffer
	  sprintf(buffer, "%d", Peso); // Convierte el float a una cadena con 4 decimales
     b20:	9f 93       	push	r25
     b22:	8f 93       	push	r24
     b24:	ff 92       	push	r15
     b26:	ef 92       	push	r14
     b28:	1f 93       	push	r17
     b2a:	0f 93       	push	r16
     b2c:	0e 94 ed 07 	call	0xfda	; 0xfda <sprintf>
	  lcd_init();
     b30:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_init>
	  escribirEnLCD("-");
     b34:	85 e2       	ldi	r24, 0x25	; 37
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
	  escribirEnLCD(buffer);
     b3c:	c8 01       	movw	r24, r16
     b3e:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
	  uart_send_string(buffer);
     b42:	c8 01       	movw	r24, r16
     b44:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <uart_send_string>
     b48:	2f e3       	ldi	r18, 0x3F	; 63
     b4a:	82 e4       	ldi	r24, 0x42	; 66
     b4c:	9f e0       	ldi	r25, 0x0F	; 15
     b4e:	21 50       	subi	r18, 0x01	; 1
     b50:	80 40       	sbci	r24, 0x00	; 0
     b52:	90 40       	sbci	r25, 0x00	; 0
     b54:	e1 f7       	brne	.-8      	; 0xb4e <main+0xa0>
     b56:	00 c0       	rjmp	.+0      	; 0xb58 <main+0xaa>
     b58:	00 00       	nop
	  _delay_ms(5000);
	   MedirVariables();
     b5a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <MedirVariables>
	  i2c_stop();
     b5e:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_stop>
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	f8 94       	cli
     b66:	de bf       	out	0x3e, r29	; 62
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	cd bf       	out	0x3d, r28	; 61
     b6c:	aa cf       	rjmp	.-172    	; 0xac2 <main+0x14>

00000b6e <__subsf3>:
     b6e:	50 58       	subi	r21, 0x80	; 128

00000b70 <__addsf3>:
     b70:	bb 27       	eor	r27, r27
     b72:	aa 27       	eor	r26, r26
     b74:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__addsf3x>
     b78:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__fp_round>
     b7c:	0e 94 12 07 	call	0xe24	; 0xe24 <__fp_pscA>
     b80:	38 f0       	brcs	.+14     	; 0xb90 <__addsf3+0x20>
     b82:	0e 94 19 07 	call	0xe32	; 0xe32 <__fp_pscB>
     b86:	20 f0       	brcs	.+8      	; 0xb90 <__addsf3+0x20>
     b88:	39 f4       	brne	.+14     	; 0xb98 <__addsf3+0x28>
     b8a:	9f 3f       	cpi	r25, 0xFF	; 255
     b8c:	19 f4       	brne	.+6      	; 0xb94 <__addsf3+0x24>
     b8e:	26 f4       	brtc	.+8      	; 0xb98 <__addsf3+0x28>
     b90:	0c 94 0f 07 	jmp	0xe1e	; 0xe1e <__fp_nan>
     b94:	0e f4       	brtc	.+2      	; 0xb98 <__addsf3+0x28>
     b96:	e0 95       	com	r30
     b98:	e7 fb       	bst	r30, 7
     b9a:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__fp_inf>

00000b9e <__addsf3x>:
     b9e:	e9 2f       	mov	r30, r25
     ba0:	0e 94 31 07 	call	0xe62	; 0xe62 <__fp_split3>
     ba4:	58 f3       	brcs	.-42     	; 0xb7c <__addsf3+0xc>
     ba6:	ba 17       	cp	r27, r26
     ba8:	62 07       	cpc	r22, r18
     baa:	73 07       	cpc	r23, r19
     bac:	84 07       	cpc	r24, r20
     bae:	95 07       	cpc	r25, r21
     bb0:	20 f0       	brcs	.+8      	; 0xbba <__addsf3x+0x1c>
     bb2:	79 f4       	brne	.+30     	; 0xbd2 <__addsf3x+0x34>
     bb4:	a6 f5       	brtc	.+104    	; 0xc1e <__addsf3x+0x80>
     bb6:	0c 94 53 07 	jmp	0xea6	; 0xea6 <__fp_zero>
     bba:	0e f4       	brtc	.+2      	; 0xbbe <__addsf3x+0x20>
     bbc:	e0 95       	com	r30
     bbe:	0b 2e       	mov	r0, r27
     bc0:	ba 2f       	mov	r27, r26
     bc2:	a0 2d       	mov	r26, r0
     bc4:	0b 01       	movw	r0, r22
     bc6:	b9 01       	movw	r22, r18
     bc8:	90 01       	movw	r18, r0
     bca:	0c 01       	movw	r0, r24
     bcc:	ca 01       	movw	r24, r20
     bce:	a0 01       	movw	r20, r0
     bd0:	11 24       	eor	r1, r1
     bd2:	ff 27       	eor	r31, r31
     bd4:	59 1b       	sub	r21, r25
     bd6:	99 f0       	breq	.+38     	; 0xbfe <__addsf3x+0x60>
     bd8:	59 3f       	cpi	r21, 0xF9	; 249
     bda:	50 f4       	brcc	.+20     	; 0xbf0 <__addsf3x+0x52>
     bdc:	50 3e       	cpi	r21, 0xE0	; 224
     bde:	68 f1       	brcs	.+90     	; 0xc3a <__addsf3x+0x9c>
     be0:	1a 16       	cp	r1, r26
     be2:	f0 40       	sbci	r31, 0x00	; 0
     be4:	a2 2f       	mov	r26, r18
     be6:	23 2f       	mov	r18, r19
     be8:	34 2f       	mov	r19, r20
     bea:	44 27       	eor	r20, r20
     bec:	58 5f       	subi	r21, 0xF8	; 248
     bee:	f3 cf       	rjmp	.-26     	; 0xbd6 <__addsf3x+0x38>
     bf0:	46 95       	lsr	r20
     bf2:	37 95       	ror	r19
     bf4:	27 95       	ror	r18
     bf6:	a7 95       	ror	r26
     bf8:	f0 40       	sbci	r31, 0x00	; 0
     bfa:	53 95       	inc	r21
     bfc:	c9 f7       	brne	.-14     	; 0xbf0 <__addsf3x+0x52>
     bfe:	7e f4       	brtc	.+30     	; 0xc1e <__addsf3x+0x80>
     c00:	1f 16       	cp	r1, r31
     c02:	ba 0b       	sbc	r27, r26
     c04:	62 0b       	sbc	r22, r18
     c06:	73 0b       	sbc	r23, r19
     c08:	84 0b       	sbc	r24, r20
     c0a:	ba f0       	brmi	.+46     	; 0xc3a <__addsf3x+0x9c>
     c0c:	91 50       	subi	r25, 0x01	; 1
     c0e:	a1 f0       	breq	.+40     	; 0xc38 <__addsf3x+0x9a>
     c10:	ff 0f       	add	r31, r31
     c12:	bb 1f       	adc	r27, r27
     c14:	66 1f       	adc	r22, r22
     c16:	77 1f       	adc	r23, r23
     c18:	88 1f       	adc	r24, r24
     c1a:	c2 f7       	brpl	.-16     	; 0xc0c <__addsf3x+0x6e>
     c1c:	0e c0       	rjmp	.+28     	; 0xc3a <__addsf3x+0x9c>
     c1e:	ba 0f       	add	r27, r26
     c20:	62 1f       	adc	r22, r18
     c22:	73 1f       	adc	r23, r19
     c24:	84 1f       	adc	r24, r20
     c26:	48 f4       	brcc	.+18     	; 0xc3a <__addsf3x+0x9c>
     c28:	87 95       	ror	r24
     c2a:	77 95       	ror	r23
     c2c:	67 95       	ror	r22
     c2e:	b7 95       	ror	r27
     c30:	f7 95       	ror	r31
     c32:	9e 3f       	cpi	r25, 0xFE	; 254
     c34:	08 f0       	brcs	.+2      	; 0xc38 <__addsf3x+0x9a>
     c36:	b0 cf       	rjmp	.-160    	; 0xb98 <__addsf3+0x28>
     c38:	93 95       	inc	r25
     c3a:	88 0f       	add	r24, r24
     c3c:	08 f0       	brcs	.+2      	; 0xc40 <__addsf3x+0xa2>
     c3e:	99 27       	eor	r25, r25
     c40:	ee 0f       	add	r30, r30
     c42:	97 95       	ror	r25
     c44:	87 95       	ror	r24
     c46:	08 95       	ret

00000c48 <__divsf3>:
     c48:	0e 94 38 06 	call	0xc70	; 0xc70 <__divsf3x>
     c4c:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__fp_round>
     c50:	0e 94 19 07 	call	0xe32	; 0xe32 <__fp_pscB>
     c54:	58 f0       	brcs	.+22     	; 0xc6c <__divsf3+0x24>
     c56:	0e 94 12 07 	call	0xe24	; 0xe24 <__fp_pscA>
     c5a:	40 f0       	brcs	.+16     	; 0xc6c <__divsf3+0x24>
     c5c:	29 f4       	brne	.+10     	; 0xc68 <__divsf3+0x20>
     c5e:	5f 3f       	cpi	r21, 0xFF	; 255
     c60:	29 f0       	breq	.+10     	; 0xc6c <__divsf3+0x24>
     c62:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__fp_inf>
     c66:	51 11       	cpse	r21, r1
     c68:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__fp_szero>
     c6c:	0c 94 0f 07 	jmp	0xe1e	; 0xe1e <__fp_nan>

00000c70 <__divsf3x>:
     c70:	0e 94 31 07 	call	0xe62	; 0xe62 <__fp_split3>
     c74:	68 f3       	brcs	.-38     	; 0xc50 <__divsf3+0x8>

00000c76 <__divsf3_pse>:
     c76:	99 23       	and	r25, r25
     c78:	b1 f3       	breq	.-20     	; 0xc66 <__divsf3+0x1e>
     c7a:	55 23       	and	r21, r21
     c7c:	91 f3       	breq	.-28     	; 0xc62 <__divsf3+0x1a>
     c7e:	95 1b       	sub	r25, r21
     c80:	55 0b       	sbc	r21, r21
     c82:	bb 27       	eor	r27, r27
     c84:	aa 27       	eor	r26, r26
     c86:	62 17       	cp	r22, r18
     c88:	73 07       	cpc	r23, r19
     c8a:	84 07       	cpc	r24, r20
     c8c:	38 f0       	brcs	.+14     	; 0xc9c <__divsf3_pse+0x26>
     c8e:	9f 5f       	subi	r25, 0xFF	; 255
     c90:	5f 4f       	sbci	r21, 0xFF	; 255
     c92:	22 0f       	add	r18, r18
     c94:	33 1f       	adc	r19, r19
     c96:	44 1f       	adc	r20, r20
     c98:	aa 1f       	adc	r26, r26
     c9a:	a9 f3       	breq	.-22     	; 0xc86 <__divsf3_pse+0x10>
     c9c:	35 d0       	rcall	.+106    	; 0xd08 <__divsf3_pse+0x92>
     c9e:	0e 2e       	mov	r0, r30
     ca0:	3a f0       	brmi	.+14     	; 0xcb0 <__divsf3_pse+0x3a>
     ca2:	e0 e8       	ldi	r30, 0x80	; 128
     ca4:	32 d0       	rcall	.+100    	; 0xd0a <__divsf3_pse+0x94>
     ca6:	91 50       	subi	r25, 0x01	; 1
     ca8:	50 40       	sbci	r21, 0x00	; 0
     caa:	e6 95       	lsr	r30
     cac:	00 1c       	adc	r0, r0
     cae:	ca f7       	brpl	.-14     	; 0xca2 <__divsf3_pse+0x2c>
     cb0:	2b d0       	rcall	.+86     	; 0xd08 <__divsf3_pse+0x92>
     cb2:	fe 2f       	mov	r31, r30
     cb4:	29 d0       	rcall	.+82     	; 0xd08 <__divsf3_pse+0x92>
     cb6:	66 0f       	add	r22, r22
     cb8:	77 1f       	adc	r23, r23
     cba:	88 1f       	adc	r24, r24
     cbc:	bb 1f       	adc	r27, r27
     cbe:	26 17       	cp	r18, r22
     cc0:	37 07       	cpc	r19, r23
     cc2:	48 07       	cpc	r20, r24
     cc4:	ab 07       	cpc	r26, r27
     cc6:	b0 e8       	ldi	r27, 0x80	; 128
     cc8:	09 f0       	breq	.+2      	; 0xccc <__divsf3_pse+0x56>
     cca:	bb 0b       	sbc	r27, r27
     ccc:	80 2d       	mov	r24, r0
     cce:	bf 01       	movw	r22, r30
     cd0:	ff 27       	eor	r31, r31
     cd2:	93 58       	subi	r25, 0x83	; 131
     cd4:	5f 4f       	sbci	r21, 0xFF	; 255
     cd6:	3a f0       	brmi	.+14     	; 0xce6 <__divsf3_pse+0x70>
     cd8:	9e 3f       	cpi	r25, 0xFE	; 254
     cda:	51 05       	cpc	r21, r1
     cdc:	78 f0       	brcs	.+30     	; 0xcfc <__divsf3_pse+0x86>
     cde:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__fp_inf>
     ce2:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__fp_szero>
     ce6:	5f 3f       	cpi	r21, 0xFF	; 255
     ce8:	e4 f3       	brlt	.-8      	; 0xce2 <__divsf3_pse+0x6c>
     cea:	98 3e       	cpi	r25, 0xE8	; 232
     cec:	d4 f3       	brlt	.-12     	; 0xce2 <__divsf3_pse+0x6c>
     cee:	86 95       	lsr	r24
     cf0:	77 95       	ror	r23
     cf2:	67 95       	ror	r22
     cf4:	b7 95       	ror	r27
     cf6:	f7 95       	ror	r31
     cf8:	9f 5f       	subi	r25, 0xFF	; 255
     cfa:	c9 f7       	brne	.-14     	; 0xcee <__divsf3_pse+0x78>
     cfc:	88 0f       	add	r24, r24
     cfe:	91 1d       	adc	r25, r1
     d00:	96 95       	lsr	r25
     d02:	87 95       	ror	r24
     d04:	97 f9       	bld	r25, 7
     d06:	08 95       	ret
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	66 0f       	add	r22, r22
     d0c:	77 1f       	adc	r23, r23
     d0e:	88 1f       	adc	r24, r24
     d10:	bb 1f       	adc	r27, r27
     d12:	62 17       	cp	r22, r18
     d14:	73 07       	cpc	r23, r19
     d16:	84 07       	cpc	r24, r20
     d18:	ba 07       	cpc	r27, r26
     d1a:	20 f0       	brcs	.+8      	; 0xd24 <__divsf3_pse+0xae>
     d1c:	62 1b       	sub	r22, r18
     d1e:	73 0b       	sbc	r23, r19
     d20:	84 0b       	sbc	r24, r20
     d22:	ba 0b       	sbc	r27, r26
     d24:	ee 1f       	adc	r30, r30
     d26:	88 f7       	brcc	.-30     	; 0xd0a <__divsf3_pse+0x94>
     d28:	e0 95       	com	r30
     d2a:	08 95       	ret

00000d2c <__fixsfsi>:
     d2c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fixunssfsi>
     d30:	68 94       	set
     d32:	b1 11       	cpse	r27, r1
     d34:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__fp_szero>
     d38:	08 95       	ret

00000d3a <__fixunssfsi>:
     d3a:	0e 94 39 07 	call	0xe72	; 0xe72 <__fp_splitA>
     d3e:	88 f0       	brcs	.+34     	; 0xd62 <__fixunssfsi+0x28>
     d40:	9f 57       	subi	r25, 0x7F	; 127
     d42:	98 f0       	brcs	.+38     	; 0xd6a <__fixunssfsi+0x30>
     d44:	b9 2f       	mov	r27, r25
     d46:	99 27       	eor	r25, r25
     d48:	b7 51       	subi	r27, 0x17	; 23
     d4a:	b0 f0       	brcs	.+44     	; 0xd78 <__fixunssfsi+0x3e>
     d4c:	e1 f0       	breq	.+56     	; 0xd86 <__fixunssfsi+0x4c>
     d4e:	66 0f       	add	r22, r22
     d50:	77 1f       	adc	r23, r23
     d52:	88 1f       	adc	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	1a f0       	brmi	.+6      	; 0xd5e <__fixunssfsi+0x24>
     d58:	ba 95       	dec	r27
     d5a:	c9 f7       	brne	.-14     	; 0xd4e <__fixunssfsi+0x14>
     d5c:	14 c0       	rjmp	.+40     	; 0xd86 <__fixunssfsi+0x4c>
     d5e:	b1 30       	cpi	r27, 0x01	; 1
     d60:	91 f0       	breq	.+36     	; 0xd86 <__fixunssfsi+0x4c>
     d62:	0e 94 53 07 	call	0xea6	; 0xea6 <__fp_zero>
     d66:	b1 e0       	ldi	r27, 0x01	; 1
     d68:	08 95       	ret
     d6a:	0c 94 53 07 	jmp	0xea6	; 0xea6 <__fp_zero>
     d6e:	67 2f       	mov	r22, r23
     d70:	78 2f       	mov	r23, r24
     d72:	88 27       	eor	r24, r24
     d74:	b8 5f       	subi	r27, 0xF8	; 248
     d76:	39 f0       	breq	.+14     	; 0xd86 <__fixunssfsi+0x4c>
     d78:	b9 3f       	cpi	r27, 0xF9	; 249
     d7a:	cc f3       	brlt	.-14     	; 0xd6e <__fixunssfsi+0x34>
     d7c:	86 95       	lsr	r24
     d7e:	77 95       	ror	r23
     d80:	67 95       	ror	r22
     d82:	b3 95       	inc	r27
     d84:	d9 f7       	brne	.-10     	; 0xd7c <__fixunssfsi+0x42>
     d86:	3e f4       	brtc	.+14     	; 0xd96 <__fixunssfsi+0x5c>
     d88:	90 95       	com	r25
     d8a:	80 95       	com	r24
     d8c:	70 95       	com	r23
     d8e:	61 95       	neg	r22
     d90:	7f 4f       	sbci	r23, 0xFF	; 255
     d92:	8f 4f       	sbci	r24, 0xFF	; 255
     d94:	9f 4f       	sbci	r25, 0xFF	; 255
     d96:	08 95       	ret

00000d98 <__floatunsisf>:
     d98:	e8 94       	clt
     d9a:	09 c0       	rjmp	.+18     	; 0xdae <__floatsisf+0x12>

00000d9c <__floatsisf>:
     d9c:	97 fb       	bst	r25, 7
     d9e:	3e f4       	brtc	.+14     	; 0xdae <__floatsisf+0x12>
     da0:	90 95       	com	r25
     da2:	80 95       	com	r24
     da4:	70 95       	com	r23
     da6:	61 95       	neg	r22
     da8:	7f 4f       	sbci	r23, 0xFF	; 255
     daa:	8f 4f       	sbci	r24, 0xFF	; 255
     dac:	9f 4f       	sbci	r25, 0xFF	; 255
     dae:	99 23       	and	r25, r25
     db0:	a9 f0       	breq	.+42     	; 0xddc <__floatsisf+0x40>
     db2:	f9 2f       	mov	r31, r25
     db4:	96 e9       	ldi	r25, 0x96	; 150
     db6:	bb 27       	eor	r27, r27
     db8:	93 95       	inc	r25
     dba:	f6 95       	lsr	r31
     dbc:	87 95       	ror	r24
     dbe:	77 95       	ror	r23
     dc0:	67 95       	ror	r22
     dc2:	b7 95       	ror	r27
     dc4:	f1 11       	cpse	r31, r1
     dc6:	f8 cf       	rjmp	.-16     	; 0xdb8 <__floatsisf+0x1c>
     dc8:	fa f4       	brpl	.+62     	; 0xe08 <__floatsisf+0x6c>
     dca:	bb 0f       	add	r27, r27
     dcc:	11 f4       	brne	.+4      	; 0xdd2 <__floatsisf+0x36>
     dce:	60 ff       	sbrs	r22, 0
     dd0:	1b c0       	rjmp	.+54     	; 0xe08 <__floatsisf+0x6c>
     dd2:	6f 5f       	subi	r22, 0xFF	; 255
     dd4:	7f 4f       	sbci	r23, 0xFF	; 255
     dd6:	8f 4f       	sbci	r24, 0xFF	; 255
     dd8:	9f 4f       	sbci	r25, 0xFF	; 255
     dda:	16 c0       	rjmp	.+44     	; 0xe08 <__floatsisf+0x6c>
     ddc:	88 23       	and	r24, r24
     dde:	11 f0       	breq	.+4      	; 0xde4 <__floatsisf+0x48>
     de0:	96 e9       	ldi	r25, 0x96	; 150
     de2:	11 c0       	rjmp	.+34     	; 0xe06 <__floatsisf+0x6a>
     de4:	77 23       	and	r23, r23
     de6:	21 f0       	breq	.+8      	; 0xdf0 <__floatsisf+0x54>
     de8:	9e e8       	ldi	r25, 0x8E	; 142
     dea:	87 2f       	mov	r24, r23
     dec:	76 2f       	mov	r23, r22
     dee:	05 c0       	rjmp	.+10     	; 0xdfa <__floatsisf+0x5e>
     df0:	66 23       	and	r22, r22
     df2:	71 f0       	breq	.+28     	; 0xe10 <__floatsisf+0x74>
     df4:	96 e8       	ldi	r25, 0x86	; 134
     df6:	86 2f       	mov	r24, r22
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	2a f0       	brmi	.+10     	; 0xe08 <__floatsisf+0x6c>
     dfe:	9a 95       	dec	r25
     e00:	66 0f       	add	r22, r22
     e02:	77 1f       	adc	r23, r23
     e04:	88 1f       	adc	r24, r24
     e06:	da f7       	brpl	.-10     	; 0xdfe <__floatsisf+0x62>
     e08:	88 0f       	add	r24, r24
     e0a:	96 95       	lsr	r25
     e0c:	87 95       	ror	r24
     e0e:	97 f9       	bld	r25, 7
     e10:	08 95       	ret

00000e12 <__fp_inf>:
     e12:	97 f9       	bld	r25, 7
     e14:	9f 67       	ori	r25, 0x7F	; 127
     e16:	80 e8       	ldi	r24, 0x80	; 128
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	08 95       	ret

00000e1e <__fp_nan>:
     e1e:	9f ef       	ldi	r25, 0xFF	; 255
     e20:	80 ec       	ldi	r24, 0xC0	; 192
     e22:	08 95       	ret

00000e24 <__fp_pscA>:
     e24:	00 24       	eor	r0, r0
     e26:	0a 94       	dec	r0
     e28:	16 16       	cp	r1, r22
     e2a:	17 06       	cpc	r1, r23
     e2c:	18 06       	cpc	r1, r24
     e2e:	09 06       	cpc	r0, r25
     e30:	08 95       	ret

00000e32 <__fp_pscB>:
     e32:	00 24       	eor	r0, r0
     e34:	0a 94       	dec	r0
     e36:	12 16       	cp	r1, r18
     e38:	13 06       	cpc	r1, r19
     e3a:	14 06       	cpc	r1, r20
     e3c:	05 06       	cpc	r0, r21
     e3e:	08 95       	ret

00000e40 <__fp_round>:
     e40:	09 2e       	mov	r0, r25
     e42:	03 94       	inc	r0
     e44:	00 0c       	add	r0, r0
     e46:	11 f4       	brne	.+4      	; 0xe4c <__fp_round+0xc>
     e48:	88 23       	and	r24, r24
     e4a:	52 f0       	brmi	.+20     	; 0xe60 <__fp_round+0x20>
     e4c:	bb 0f       	add	r27, r27
     e4e:	40 f4       	brcc	.+16     	; 0xe60 <__fp_round+0x20>
     e50:	bf 2b       	or	r27, r31
     e52:	11 f4       	brne	.+4      	; 0xe58 <__fp_round+0x18>
     e54:	60 ff       	sbrs	r22, 0
     e56:	04 c0       	rjmp	.+8      	; 0xe60 <__fp_round+0x20>
     e58:	6f 5f       	subi	r22, 0xFF	; 255
     e5a:	7f 4f       	sbci	r23, 0xFF	; 255
     e5c:	8f 4f       	sbci	r24, 0xFF	; 255
     e5e:	9f 4f       	sbci	r25, 0xFF	; 255
     e60:	08 95       	ret

00000e62 <__fp_split3>:
     e62:	57 fd       	sbrc	r21, 7
     e64:	90 58       	subi	r25, 0x80	; 128
     e66:	44 0f       	add	r20, r20
     e68:	55 1f       	adc	r21, r21
     e6a:	59 f0       	breq	.+22     	; 0xe82 <__fp_splitA+0x10>
     e6c:	5f 3f       	cpi	r21, 0xFF	; 255
     e6e:	71 f0       	breq	.+28     	; 0xe8c <__fp_splitA+0x1a>
     e70:	47 95       	ror	r20

00000e72 <__fp_splitA>:
     e72:	88 0f       	add	r24, r24
     e74:	97 fb       	bst	r25, 7
     e76:	99 1f       	adc	r25, r25
     e78:	61 f0       	breq	.+24     	; 0xe92 <__fp_splitA+0x20>
     e7a:	9f 3f       	cpi	r25, 0xFF	; 255
     e7c:	79 f0       	breq	.+30     	; 0xe9c <__fp_splitA+0x2a>
     e7e:	87 95       	ror	r24
     e80:	08 95       	ret
     e82:	12 16       	cp	r1, r18
     e84:	13 06       	cpc	r1, r19
     e86:	14 06       	cpc	r1, r20
     e88:	55 1f       	adc	r21, r21
     e8a:	f2 cf       	rjmp	.-28     	; 0xe70 <__fp_split3+0xe>
     e8c:	46 95       	lsr	r20
     e8e:	f1 df       	rcall	.-30     	; 0xe72 <__fp_splitA>
     e90:	08 c0       	rjmp	.+16     	; 0xea2 <__fp_splitA+0x30>
     e92:	16 16       	cp	r1, r22
     e94:	17 06       	cpc	r1, r23
     e96:	18 06       	cpc	r1, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	f1 cf       	rjmp	.-30     	; 0xe7e <__fp_splitA+0xc>
     e9c:	86 95       	lsr	r24
     e9e:	71 05       	cpc	r23, r1
     ea0:	61 05       	cpc	r22, r1
     ea2:	08 94       	sec
     ea4:	08 95       	ret

00000ea6 <__fp_zero>:
     ea6:	e8 94       	clt

00000ea8 <__fp_szero>:
     ea8:	bb 27       	eor	r27, r27
     eaa:	66 27       	eor	r22, r22
     eac:	77 27       	eor	r23, r23
     eae:	cb 01       	movw	r24, r22
     eb0:	97 f9       	bld	r25, 7
     eb2:	08 95       	ret

00000eb4 <__mulsf3>:
     eb4:	0e 94 6d 07 	call	0xeda	; 0xeda <__mulsf3x>
     eb8:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__fp_round>
     ebc:	0e 94 12 07 	call	0xe24	; 0xe24 <__fp_pscA>
     ec0:	38 f0       	brcs	.+14     	; 0xed0 <__mulsf3+0x1c>
     ec2:	0e 94 19 07 	call	0xe32	; 0xe32 <__fp_pscB>
     ec6:	20 f0       	brcs	.+8      	; 0xed0 <__mulsf3+0x1c>
     ec8:	95 23       	and	r25, r21
     eca:	11 f0       	breq	.+4      	; 0xed0 <__mulsf3+0x1c>
     ecc:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__fp_inf>
     ed0:	0c 94 0f 07 	jmp	0xe1e	; 0xe1e <__fp_nan>
     ed4:	11 24       	eor	r1, r1
     ed6:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__fp_szero>

00000eda <__mulsf3x>:
     eda:	0e 94 31 07 	call	0xe62	; 0xe62 <__fp_split3>
     ede:	70 f3       	brcs	.-36     	; 0xebc <__mulsf3+0x8>

00000ee0 <__mulsf3_pse>:
     ee0:	95 9f       	mul	r25, r21
     ee2:	c1 f3       	breq	.-16     	; 0xed4 <__mulsf3+0x20>
     ee4:	95 0f       	add	r25, r21
     ee6:	50 e0       	ldi	r21, 0x00	; 0
     ee8:	55 1f       	adc	r21, r21
     eea:	62 9f       	mul	r22, r18
     eec:	f0 01       	movw	r30, r0
     eee:	72 9f       	mul	r23, r18
     ef0:	bb 27       	eor	r27, r27
     ef2:	f0 0d       	add	r31, r0
     ef4:	b1 1d       	adc	r27, r1
     ef6:	63 9f       	mul	r22, r19
     ef8:	aa 27       	eor	r26, r26
     efa:	f0 0d       	add	r31, r0
     efc:	b1 1d       	adc	r27, r1
     efe:	aa 1f       	adc	r26, r26
     f00:	64 9f       	mul	r22, r20
     f02:	66 27       	eor	r22, r22
     f04:	b0 0d       	add	r27, r0
     f06:	a1 1d       	adc	r26, r1
     f08:	66 1f       	adc	r22, r22
     f0a:	82 9f       	mul	r24, r18
     f0c:	22 27       	eor	r18, r18
     f0e:	b0 0d       	add	r27, r0
     f10:	a1 1d       	adc	r26, r1
     f12:	62 1f       	adc	r22, r18
     f14:	73 9f       	mul	r23, r19
     f16:	b0 0d       	add	r27, r0
     f18:	a1 1d       	adc	r26, r1
     f1a:	62 1f       	adc	r22, r18
     f1c:	83 9f       	mul	r24, r19
     f1e:	a0 0d       	add	r26, r0
     f20:	61 1d       	adc	r22, r1
     f22:	22 1f       	adc	r18, r18
     f24:	74 9f       	mul	r23, r20
     f26:	33 27       	eor	r19, r19
     f28:	a0 0d       	add	r26, r0
     f2a:	61 1d       	adc	r22, r1
     f2c:	23 1f       	adc	r18, r19
     f2e:	84 9f       	mul	r24, r20
     f30:	60 0d       	add	r22, r0
     f32:	21 1d       	adc	r18, r1
     f34:	82 2f       	mov	r24, r18
     f36:	76 2f       	mov	r23, r22
     f38:	6a 2f       	mov	r22, r26
     f3a:	11 24       	eor	r1, r1
     f3c:	9f 57       	subi	r25, 0x7F	; 127
     f3e:	50 40       	sbci	r21, 0x00	; 0
     f40:	9a f0       	brmi	.+38     	; 0xf68 <__mulsf3_pse+0x88>
     f42:	f1 f0       	breq	.+60     	; 0xf80 <__mulsf3_pse+0xa0>
     f44:	88 23       	and	r24, r24
     f46:	4a f0       	brmi	.+18     	; 0xf5a <__mulsf3_pse+0x7a>
     f48:	ee 0f       	add	r30, r30
     f4a:	ff 1f       	adc	r31, r31
     f4c:	bb 1f       	adc	r27, r27
     f4e:	66 1f       	adc	r22, r22
     f50:	77 1f       	adc	r23, r23
     f52:	88 1f       	adc	r24, r24
     f54:	91 50       	subi	r25, 0x01	; 1
     f56:	50 40       	sbci	r21, 0x00	; 0
     f58:	a9 f7       	brne	.-22     	; 0xf44 <__mulsf3_pse+0x64>
     f5a:	9e 3f       	cpi	r25, 0xFE	; 254
     f5c:	51 05       	cpc	r21, r1
     f5e:	80 f0       	brcs	.+32     	; 0xf80 <__mulsf3_pse+0xa0>
     f60:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__fp_inf>
     f64:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__fp_szero>
     f68:	5f 3f       	cpi	r21, 0xFF	; 255
     f6a:	e4 f3       	brlt	.-8      	; 0xf64 <__mulsf3_pse+0x84>
     f6c:	98 3e       	cpi	r25, 0xE8	; 232
     f6e:	d4 f3       	brlt	.-12     	; 0xf64 <__mulsf3_pse+0x84>
     f70:	86 95       	lsr	r24
     f72:	77 95       	ror	r23
     f74:	67 95       	ror	r22
     f76:	b7 95       	ror	r27
     f78:	f7 95       	ror	r31
     f7a:	e7 95       	ror	r30
     f7c:	9f 5f       	subi	r25, 0xFF	; 255
     f7e:	c1 f7       	brne	.-16     	; 0xf70 <__mulsf3_pse+0x90>
     f80:	fe 2b       	or	r31, r30
     f82:	88 0f       	add	r24, r24
     f84:	91 1d       	adc	r25, r1
     f86:	96 95       	lsr	r25
     f88:	87 95       	ror	r24
     f8a:	97 f9       	bld	r25, 7
     f8c:	08 95       	ret

00000f8e <atoi>:
     f8e:	fc 01       	movw	r30, r24
     f90:	88 27       	eor	r24, r24
     f92:	99 27       	eor	r25, r25
     f94:	e8 94       	clt
     f96:	21 91       	ld	r18, Z+
     f98:	20 32       	cpi	r18, 0x20	; 32
     f9a:	e9 f3       	breq	.-6      	; 0xf96 <atoi+0x8>
     f9c:	29 30       	cpi	r18, 0x09	; 9
     f9e:	10 f0       	brcs	.+4      	; 0xfa4 <atoi+0x16>
     fa0:	2e 30       	cpi	r18, 0x0E	; 14
     fa2:	c8 f3       	brcs	.-14     	; 0xf96 <atoi+0x8>
     fa4:	2b 32       	cpi	r18, 0x2B	; 43
     fa6:	41 f0       	breq	.+16     	; 0xfb8 <atoi+0x2a>
     fa8:	2d 32       	cpi	r18, 0x2D	; 45
     faa:	39 f4       	brne	.+14     	; 0xfba <atoi+0x2c>
     fac:	68 94       	set
     fae:	04 c0       	rjmp	.+8      	; 0xfb8 <atoi+0x2a>
     fb0:	0e 94 e5 07 	call	0xfca	; 0xfca <__mulhi_const_10>
     fb4:	82 0f       	add	r24, r18
     fb6:	91 1d       	adc	r25, r1
     fb8:	21 91       	ld	r18, Z+
     fba:	20 53       	subi	r18, 0x30	; 48
     fbc:	2a 30       	cpi	r18, 0x0A	; 10
     fbe:	c0 f3       	brcs	.-16     	; 0xfb0 <atoi+0x22>
     fc0:	1e f4       	brtc	.+6      	; 0xfc8 <atoi+0x3a>
     fc2:	90 95       	com	r25
     fc4:	81 95       	neg	r24
     fc6:	9f 4f       	sbci	r25, 0xFF	; 255
     fc8:	08 95       	ret

00000fca <__mulhi_const_10>:
     fca:	7a e0       	ldi	r23, 0x0A	; 10
     fcc:	97 9f       	mul	r25, r23
     fce:	90 2d       	mov	r25, r0
     fd0:	87 9f       	mul	r24, r23
     fd2:	80 2d       	mov	r24, r0
     fd4:	91 0d       	add	r25, r1
     fd6:	11 24       	eor	r1, r1
     fd8:	08 95       	ret

00000fda <sprintf>:
     fda:	ae e0       	ldi	r26, 0x0E	; 14
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e3 ef       	ldi	r30, 0xF3	; 243
     fe0:	f7 e0       	ldi	r31, 0x07	; 7
     fe2:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__prologue_saves__+0x1c>
     fe6:	0d 89       	ldd	r16, Y+21	; 0x15
     fe8:	1e 89       	ldd	r17, Y+22	; 0x16
     fea:	86 e0       	ldi	r24, 0x06	; 6
     fec:	8c 83       	std	Y+4, r24	; 0x04
     fee:	1a 83       	std	Y+2, r17	; 0x02
     ff0:	09 83       	std	Y+1, r16	; 0x01
     ff2:	8f ef       	ldi	r24, 0xFF	; 255
     ff4:	9f e7       	ldi	r25, 0x7F	; 127
     ff6:	9e 83       	std	Y+6, r25	; 0x06
     ff8:	8d 83       	std	Y+5, r24	; 0x05
     ffa:	ae 01       	movw	r20, r28
     ffc:	47 5e       	subi	r20, 0xE7	; 231
     ffe:	5f 4f       	sbci	r21, 0xFF	; 255
    1000:	6f 89       	ldd	r22, Y+23	; 0x17
    1002:	78 8d       	ldd	r23, Y+24	; 0x18
    1004:	ce 01       	movw	r24, r28
    1006:	01 96       	adiw	r24, 0x01	; 1
    1008:	0e 94 0f 08 	call	0x101e	; 0x101e <vfprintf>
    100c:	ef 81       	ldd	r30, Y+7	; 0x07
    100e:	f8 85       	ldd	r31, Y+8	; 0x08
    1010:	e0 0f       	add	r30, r16
    1012:	f1 1f       	adc	r31, r17
    1014:	10 82       	st	Z, r1
    1016:	2e 96       	adiw	r28, 0x0e	; 14
    1018:	e4 e0       	ldi	r30, 0x04	; 4
    101a:	0c 94 ca 0a 	jmp	0x1594	; 0x1594 <__epilogue_restores__+0x1c>

0000101e <vfprintf>:
    101e:	ab e0       	ldi	r26, 0x0B	; 11
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e5 e1       	ldi	r30, 0x15	; 21
    1024:	f8 e0       	ldi	r31, 0x08	; 8
    1026:	0c 94 a0 0a 	jmp	0x1540	; 0x1540 <__prologue_saves__>
    102a:	6c 01       	movw	r12, r24
    102c:	7b 01       	movw	r14, r22
    102e:	8a 01       	movw	r16, r20
    1030:	fc 01       	movw	r30, r24
    1032:	17 82       	std	Z+7, r1	; 0x07
    1034:	16 82       	std	Z+6, r1	; 0x06
    1036:	83 81       	ldd	r24, Z+3	; 0x03
    1038:	81 ff       	sbrs	r24, 1
    103a:	cc c1       	rjmp	.+920    	; 0x13d4 <vfprintf+0x3b6>
    103c:	ce 01       	movw	r24, r28
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	3c 01       	movw	r6, r24
    1042:	f6 01       	movw	r30, r12
    1044:	93 81       	ldd	r25, Z+3	; 0x03
    1046:	f7 01       	movw	r30, r14
    1048:	93 fd       	sbrc	r25, 3
    104a:	85 91       	lpm	r24, Z+
    104c:	93 ff       	sbrs	r25, 3
    104e:	81 91       	ld	r24, Z+
    1050:	7f 01       	movw	r14, r30
    1052:	88 23       	and	r24, r24
    1054:	09 f4       	brne	.+2      	; 0x1058 <vfprintf+0x3a>
    1056:	ba c1       	rjmp	.+884    	; 0x13cc <vfprintf+0x3ae>
    1058:	85 32       	cpi	r24, 0x25	; 37
    105a:	39 f4       	brne	.+14     	; 0x106a <vfprintf+0x4c>
    105c:	93 fd       	sbrc	r25, 3
    105e:	85 91       	lpm	r24, Z+
    1060:	93 ff       	sbrs	r25, 3
    1062:	81 91       	ld	r24, Z+
    1064:	7f 01       	movw	r14, r30
    1066:	85 32       	cpi	r24, 0x25	; 37
    1068:	29 f4       	brne	.+10     	; 0x1074 <vfprintf+0x56>
    106a:	b6 01       	movw	r22, r12
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 06 0a 	call	0x140c	; 0x140c <fputc>
    1072:	e7 cf       	rjmp	.-50     	; 0x1042 <vfprintf+0x24>
    1074:	91 2c       	mov	r9, r1
    1076:	21 2c       	mov	r2, r1
    1078:	31 2c       	mov	r3, r1
    107a:	ff e1       	ldi	r31, 0x1F	; 31
    107c:	f3 15       	cp	r31, r3
    107e:	d8 f0       	brcs	.+54     	; 0x10b6 <vfprintf+0x98>
    1080:	8b 32       	cpi	r24, 0x2B	; 43
    1082:	79 f0       	breq	.+30     	; 0x10a2 <vfprintf+0x84>
    1084:	38 f4       	brcc	.+14     	; 0x1094 <vfprintf+0x76>
    1086:	80 32       	cpi	r24, 0x20	; 32
    1088:	79 f0       	breq	.+30     	; 0x10a8 <vfprintf+0x8a>
    108a:	83 32       	cpi	r24, 0x23	; 35
    108c:	a1 f4       	brne	.+40     	; 0x10b6 <vfprintf+0x98>
    108e:	23 2d       	mov	r18, r3
    1090:	20 61       	ori	r18, 0x10	; 16
    1092:	1d c0       	rjmp	.+58     	; 0x10ce <vfprintf+0xb0>
    1094:	8d 32       	cpi	r24, 0x2D	; 45
    1096:	61 f0       	breq	.+24     	; 0x10b0 <vfprintf+0x92>
    1098:	80 33       	cpi	r24, 0x30	; 48
    109a:	69 f4       	brne	.+26     	; 0x10b6 <vfprintf+0x98>
    109c:	23 2d       	mov	r18, r3
    109e:	21 60       	ori	r18, 0x01	; 1
    10a0:	16 c0       	rjmp	.+44     	; 0x10ce <vfprintf+0xb0>
    10a2:	83 2d       	mov	r24, r3
    10a4:	82 60       	ori	r24, 0x02	; 2
    10a6:	38 2e       	mov	r3, r24
    10a8:	e3 2d       	mov	r30, r3
    10aa:	e4 60       	ori	r30, 0x04	; 4
    10ac:	3e 2e       	mov	r3, r30
    10ae:	2a c0       	rjmp	.+84     	; 0x1104 <vfprintf+0xe6>
    10b0:	f3 2d       	mov	r31, r3
    10b2:	f8 60       	ori	r31, 0x08	; 8
    10b4:	1d c0       	rjmp	.+58     	; 0x10f0 <vfprintf+0xd2>
    10b6:	37 fc       	sbrc	r3, 7
    10b8:	2d c0       	rjmp	.+90     	; 0x1114 <vfprintf+0xf6>
    10ba:	20 ed       	ldi	r18, 0xD0	; 208
    10bc:	28 0f       	add	r18, r24
    10be:	2a 30       	cpi	r18, 0x0A	; 10
    10c0:	40 f0       	brcs	.+16     	; 0x10d2 <vfprintf+0xb4>
    10c2:	8e 32       	cpi	r24, 0x2E	; 46
    10c4:	b9 f4       	brne	.+46     	; 0x10f4 <vfprintf+0xd6>
    10c6:	36 fc       	sbrc	r3, 6
    10c8:	81 c1       	rjmp	.+770    	; 0x13cc <vfprintf+0x3ae>
    10ca:	23 2d       	mov	r18, r3
    10cc:	20 64       	ori	r18, 0x40	; 64
    10ce:	32 2e       	mov	r3, r18
    10d0:	19 c0       	rjmp	.+50     	; 0x1104 <vfprintf+0xe6>
    10d2:	36 fe       	sbrs	r3, 6
    10d4:	06 c0       	rjmp	.+12     	; 0x10e2 <vfprintf+0xc4>
    10d6:	8a e0       	ldi	r24, 0x0A	; 10
    10d8:	98 9e       	mul	r9, r24
    10da:	20 0d       	add	r18, r0
    10dc:	11 24       	eor	r1, r1
    10de:	92 2e       	mov	r9, r18
    10e0:	11 c0       	rjmp	.+34     	; 0x1104 <vfprintf+0xe6>
    10e2:	ea e0       	ldi	r30, 0x0A	; 10
    10e4:	2e 9e       	mul	r2, r30
    10e6:	20 0d       	add	r18, r0
    10e8:	11 24       	eor	r1, r1
    10ea:	22 2e       	mov	r2, r18
    10ec:	f3 2d       	mov	r31, r3
    10ee:	f0 62       	ori	r31, 0x20	; 32
    10f0:	3f 2e       	mov	r3, r31
    10f2:	08 c0       	rjmp	.+16     	; 0x1104 <vfprintf+0xe6>
    10f4:	8c 36       	cpi	r24, 0x6C	; 108
    10f6:	21 f4       	brne	.+8      	; 0x1100 <vfprintf+0xe2>
    10f8:	83 2d       	mov	r24, r3
    10fa:	80 68       	ori	r24, 0x80	; 128
    10fc:	38 2e       	mov	r3, r24
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <vfprintf+0xe6>
    1100:	88 36       	cpi	r24, 0x68	; 104
    1102:	41 f4       	brne	.+16     	; 0x1114 <vfprintf+0xf6>
    1104:	f7 01       	movw	r30, r14
    1106:	93 fd       	sbrc	r25, 3
    1108:	85 91       	lpm	r24, Z+
    110a:	93 ff       	sbrs	r25, 3
    110c:	81 91       	ld	r24, Z+
    110e:	7f 01       	movw	r14, r30
    1110:	81 11       	cpse	r24, r1
    1112:	b3 cf       	rjmp	.-154    	; 0x107a <vfprintf+0x5c>
    1114:	98 2f       	mov	r25, r24
    1116:	9f 7d       	andi	r25, 0xDF	; 223
    1118:	95 54       	subi	r25, 0x45	; 69
    111a:	93 30       	cpi	r25, 0x03	; 3
    111c:	28 f4       	brcc	.+10     	; 0x1128 <vfprintf+0x10a>
    111e:	0c 5f       	subi	r16, 0xFC	; 252
    1120:	1f 4f       	sbci	r17, 0xFF	; 255
    1122:	9f e3       	ldi	r25, 0x3F	; 63
    1124:	99 83       	std	Y+1, r25	; 0x01
    1126:	0d c0       	rjmp	.+26     	; 0x1142 <vfprintf+0x124>
    1128:	83 36       	cpi	r24, 0x63	; 99
    112a:	31 f0       	breq	.+12     	; 0x1138 <vfprintf+0x11a>
    112c:	83 37       	cpi	r24, 0x73	; 115
    112e:	71 f0       	breq	.+28     	; 0x114c <vfprintf+0x12e>
    1130:	83 35       	cpi	r24, 0x53	; 83
    1132:	09 f0       	breq	.+2      	; 0x1136 <vfprintf+0x118>
    1134:	59 c0       	rjmp	.+178    	; 0x11e8 <vfprintf+0x1ca>
    1136:	21 c0       	rjmp	.+66     	; 0x117a <vfprintf+0x15c>
    1138:	f8 01       	movw	r30, r16
    113a:	80 81       	ld	r24, Z
    113c:	89 83       	std	Y+1, r24	; 0x01
    113e:	0e 5f       	subi	r16, 0xFE	; 254
    1140:	1f 4f       	sbci	r17, 0xFF	; 255
    1142:	88 24       	eor	r8, r8
    1144:	83 94       	inc	r8
    1146:	91 2c       	mov	r9, r1
    1148:	53 01       	movw	r10, r6
    114a:	13 c0       	rjmp	.+38     	; 0x1172 <vfprintf+0x154>
    114c:	28 01       	movw	r4, r16
    114e:	f2 e0       	ldi	r31, 0x02	; 2
    1150:	4f 0e       	add	r4, r31
    1152:	51 1c       	adc	r5, r1
    1154:	f8 01       	movw	r30, r16
    1156:	a0 80       	ld	r10, Z
    1158:	b1 80       	ldd	r11, Z+1	; 0x01
    115a:	36 fe       	sbrs	r3, 6
    115c:	03 c0       	rjmp	.+6      	; 0x1164 <vfprintf+0x146>
    115e:	69 2d       	mov	r22, r9
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <vfprintf+0x14a>
    1164:	6f ef       	ldi	r22, 0xFF	; 255
    1166:	7f ef       	ldi	r23, 0xFF	; 255
    1168:	c5 01       	movw	r24, r10
    116a:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <strnlen>
    116e:	4c 01       	movw	r8, r24
    1170:	82 01       	movw	r16, r4
    1172:	f3 2d       	mov	r31, r3
    1174:	ff 77       	andi	r31, 0x7F	; 127
    1176:	3f 2e       	mov	r3, r31
    1178:	16 c0       	rjmp	.+44     	; 0x11a6 <vfprintf+0x188>
    117a:	28 01       	movw	r4, r16
    117c:	22 e0       	ldi	r18, 0x02	; 2
    117e:	42 0e       	add	r4, r18
    1180:	51 1c       	adc	r5, r1
    1182:	f8 01       	movw	r30, r16
    1184:	a0 80       	ld	r10, Z
    1186:	b1 80       	ldd	r11, Z+1	; 0x01
    1188:	36 fe       	sbrs	r3, 6
    118a:	03 c0       	rjmp	.+6      	; 0x1192 <vfprintf+0x174>
    118c:	69 2d       	mov	r22, r9
    118e:	70 e0       	ldi	r23, 0x00	; 0
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <vfprintf+0x178>
    1192:	6f ef       	ldi	r22, 0xFF	; 255
    1194:	7f ef       	ldi	r23, 0xFF	; 255
    1196:	c5 01       	movw	r24, r10
    1198:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <strnlen_P>
    119c:	4c 01       	movw	r8, r24
    119e:	f3 2d       	mov	r31, r3
    11a0:	f0 68       	ori	r31, 0x80	; 128
    11a2:	3f 2e       	mov	r3, r31
    11a4:	82 01       	movw	r16, r4
    11a6:	33 fc       	sbrc	r3, 3
    11a8:	1b c0       	rjmp	.+54     	; 0x11e0 <vfprintf+0x1c2>
    11aa:	82 2d       	mov	r24, r2
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	88 16       	cp	r8, r24
    11b0:	99 06       	cpc	r9, r25
    11b2:	b0 f4       	brcc	.+44     	; 0x11e0 <vfprintf+0x1c2>
    11b4:	b6 01       	movw	r22, r12
    11b6:	80 e2       	ldi	r24, 0x20	; 32
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 06 0a 	call	0x140c	; 0x140c <fputc>
    11be:	2a 94       	dec	r2
    11c0:	f4 cf       	rjmp	.-24     	; 0x11aa <vfprintf+0x18c>
    11c2:	f5 01       	movw	r30, r10
    11c4:	37 fc       	sbrc	r3, 7
    11c6:	85 91       	lpm	r24, Z+
    11c8:	37 fe       	sbrs	r3, 7
    11ca:	81 91       	ld	r24, Z+
    11cc:	5f 01       	movw	r10, r30
    11ce:	b6 01       	movw	r22, r12
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	0e 94 06 0a 	call	0x140c	; 0x140c <fputc>
    11d6:	21 10       	cpse	r2, r1
    11d8:	2a 94       	dec	r2
    11da:	21 e0       	ldi	r18, 0x01	; 1
    11dc:	82 1a       	sub	r8, r18
    11de:	91 08       	sbc	r9, r1
    11e0:	81 14       	cp	r8, r1
    11e2:	91 04       	cpc	r9, r1
    11e4:	71 f7       	brne	.-36     	; 0x11c2 <vfprintf+0x1a4>
    11e6:	e8 c0       	rjmp	.+464    	; 0x13b8 <vfprintf+0x39a>
    11e8:	84 36       	cpi	r24, 0x64	; 100
    11ea:	11 f0       	breq	.+4      	; 0x11f0 <vfprintf+0x1d2>
    11ec:	89 36       	cpi	r24, 0x69	; 105
    11ee:	41 f5       	brne	.+80     	; 0x1240 <vfprintf+0x222>
    11f0:	f8 01       	movw	r30, r16
    11f2:	37 fe       	sbrs	r3, 7
    11f4:	07 c0       	rjmp	.+14     	; 0x1204 <vfprintf+0x1e6>
    11f6:	60 81       	ld	r22, Z
    11f8:	71 81       	ldd	r23, Z+1	; 0x01
    11fa:	82 81       	ldd	r24, Z+2	; 0x02
    11fc:	93 81       	ldd	r25, Z+3	; 0x03
    11fe:	0c 5f       	subi	r16, 0xFC	; 252
    1200:	1f 4f       	sbci	r17, 0xFF	; 255
    1202:	08 c0       	rjmp	.+16     	; 0x1214 <vfprintf+0x1f6>
    1204:	60 81       	ld	r22, Z
    1206:	71 81       	ldd	r23, Z+1	; 0x01
    1208:	07 2e       	mov	r0, r23
    120a:	00 0c       	add	r0, r0
    120c:	88 0b       	sbc	r24, r24
    120e:	99 0b       	sbc	r25, r25
    1210:	0e 5f       	subi	r16, 0xFE	; 254
    1212:	1f 4f       	sbci	r17, 0xFF	; 255
    1214:	f3 2d       	mov	r31, r3
    1216:	ff 76       	andi	r31, 0x6F	; 111
    1218:	3f 2e       	mov	r3, r31
    121a:	97 ff       	sbrs	r25, 7
    121c:	09 c0       	rjmp	.+18     	; 0x1230 <vfprintf+0x212>
    121e:	90 95       	com	r25
    1220:	80 95       	com	r24
    1222:	70 95       	com	r23
    1224:	61 95       	neg	r22
    1226:	7f 4f       	sbci	r23, 0xFF	; 255
    1228:	8f 4f       	sbci	r24, 0xFF	; 255
    122a:	9f 4f       	sbci	r25, 0xFF	; 255
    122c:	f0 68       	ori	r31, 0x80	; 128
    122e:	3f 2e       	mov	r3, r31
    1230:	2a e0       	ldi	r18, 0x0A	; 10
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	a3 01       	movw	r20, r6
    1236:	0e 94 42 0a 	call	0x1484	; 0x1484 <__ultoa_invert>
    123a:	88 2e       	mov	r8, r24
    123c:	86 18       	sub	r8, r6
    123e:	45 c0       	rjmp	.+138    	; 0x12ca <vfprintf+0x2ac>
    1240:	85 37       	cpi	r24, 0x75	; 117
    1242:	31 f4       	brne	.+12     	; 0x1250 <vfprintf+0x232>
    1244:	23 2d       	mov	r18, r3
    1246:	2f 7e       	andi	r18, 0xEF	; 239
    1248:	b2 2e       	mov	r11, r18
    124a:	2a e0       	ldi	r18, 0x0A	; 10
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	25 c0       	rjmp	.+74     	; 0x129a <vfprintf+0x27c>
    1250:	93 2d       	mov	r25, r3
    1252:	99 7f       	andi	r25, 0xF9	; 249
    1254:	b9 2e       	mov	r11, r25
    1256:	8f 36       	cpi	r24, 0x6F	; 111
    1258:	c1 f0       	breq	.+48     	; 0x128a <vfprintf+0x26c>
    125a:	18 f4       	brcc	.+6      	; 0x1262 <vfprintf+0x244>
    125c:	88 35       	cpi	r24, 0x58	; 88
    125e:	79 f0       	breq	.+30     	; 0x127e <vfprintf+0x260>
    1260:	b5 c0       	rjmp	.+362    	; 0x13cc <vfprintf+0x3ae>
    1262:	80 37       	cpi	r24, 0x70	; 112
    1264:	19 f0       	breq	.+6      	; 0x126c <vfprintf+0x24e>
    1266:	88 37       	cpi	r24, 0x78	; 120
    1268:	21 f0       	breq	.+8      	; 0x1272 <vfprintf+0x254>
    126a:	b0 c0       	rjmp	.+352    	; 0x13cc <vfprintf+0x3ae>
    126c:	e9 2f       	mov	r30, r25
    126e:	e0 61       	ori	r30, 0x10	; 16
    1270:	be 2e       	mov	r11, r30
    1272:	b4 fe       	sbrs	r11, 4
    1274:	0d c0       	rjmp	.+26     	; 0x1290 <vfprintf+0x272>
    1276:	fb 2d       	mov	r31, r11
    1278:	f4 60       	ori	r31, 0x04	; 4
    127a:	bf 2e       	mov	r11, r31
    127c:	09 c0       	rjmp	.+18     	; 0x1290 <vfprintf+0x272>
    127e:	34 fe       	sbrs	r3, 4
    1280:	0a c0       	rjmp	.+20     	; 0x1296 <vfprintf+0x278>
    1282:	29 2f       	mov	r18, r25
    1284:	26 60       	ori	r18, 0x06	; 6
    1286:	b2 2e       	mov	r11, r18
    1288:	06 c0       	rjmp	.+12     	; 0x1296 <vfprintf+0x278>
    128a:	28 e0       	ldi	r18, 0x08	; 8
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	05 c0       	rjmp	.+10     	; 0x129a <vfprintf+0x27c>
    1290:	20 e1       	ldi	r18, 0x10	; 16
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	02 c0       	rjmp	.+4      	; 0x129a <vfprintf+0x27c>
    1296:	20 e1       	ldi	r18, 0x10	; 16
    1298:	32 e0       	ldi	r19, 0x02	; 2
    129a:	f8 01       	movw	r30, r16
    129c:	b7 fe       	sbrs	r11, 7
    129e:	07 c0       	rjmp	.+14     	; 0x12ae <vfprintf+0x290>
    12a0:	60 81       	ld	r22, Z
    12a2:	71 81       	ldd	r23, Z+1	; 0x01
    12a4:	82 81       	ldd	r24, Z+2	; 0x02
    12a6:	93 81       	ldd	r25, Z+3	; 0x03
    12a8:	0c 5f       	subi	r16, 0xFC	; 252
    12aa:	1f 4f       	sbci	r17, 0xFF	; 255
    12ac:	06 c0       	rjmp	.+12     	; 0x12ba <vfprintf+0x29c>
    12ae:	60 81       	ld	r22, Z
    12b0:	71 81       	ldd	r23, Z+1	; 0x01
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	0e 5f       	subi	r16, 0xFE	; 254
    12b8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ba:	a3 01       	movw	r20, r6
    12bc:	0e 94 42 0a 	call	0x1484	; 0x1484 <__ultoa_invert>
    12c0:	88 2e       	mov	r8, r24
    12c2:	86 18       	sub	r8, r6
    12c4:	fb 2d       	mov	r31, r11
    12c6:	ff 77       	andi	r31, 0x7F	; 127
    12c8:	3f 2e       	mov	r3, r31
    12ca:	36 fe       	sbrs	r3, 6
    12cc:	0d c0       	rjmp	.+26     	; 0x12e8 <vfprintf+0x2ca>
    12ce:	23 2d       	mov	r18, r3
    12d0:	2e 7f       	andi	r18, 0xFE	; 254
    12d2:	a2 2e       	mov	r10, r18
    12d4:	89 14       	cp	r8, r9
    12d6:	58 f4       	brcc	.+22     	; 0x12ee <vfprintf+0x2d0>
    12d8:	34 fe       	sbrs	r3, 4
    12da:	0b c0       	rjmp	.+22     	; 0x12f2 <vfprintf+0x2d4>
    12dc:	32 fc       	sbrc	r3, 2
    12de:	09 c0       	rjmp	.+18     	; 0x12f2 <vfprintf+0x2d4>
    12e0:	83 2d       	mov	r24, r3
    12e2:	8e 7e       	andi	r24, 0xEE	; 238
    12e4:	a8 2e       	mov	r10, r24
    12e6:	05 c0       	rjmp	.+10     	; 0x12f2 <vfprintf+0x2d4>
    12e8:	b8 2c       	mov	r11, r8
    12ea:	a3 2c       	mov	r10, r3
    12ec:	03 c0       	rjmp	.+6      	; 0x12f4 <vfprintf+0x2d6>
    12ee:	b8 2c       	mov	r11, r8
    12f0:	01 c0       	rjmp	.+2      	; 0x12f4 <vfprintf+0x2d6>
    12f2:	b9 2c       	mov	r11, r9
    12f4:	a4 fe       	sbrs	r10, 4
    12f6:	0f c0       	rjmp	.+30     	; 0x1316 <vfprintf+0x2f8>
    12f8:	fe 01       	movw	r30, r28
    12fa:	e8 0d       	add	r30, r8
    12fc:	f1 1d       	adc	r31, r1
    12fe:	80 81       	ld	r24, Z
    1300:	80 33       	cpi	r24, 0x30	; 48
    1302:	21 f4       	brne	.+8      	; 0x130c <vfprintf+0x2ee>
    1304:	9a 2d       	mov	r25, r10
    1306:	99 7e       	andi	r25, 0xE9	; 233
    1308:	a9 2e       	mov	r10, r25
    130a:	09 c0       	rjmp	.+18     	; 0x131e <vfprintf+0x300>
    130c:	a2 fe       	sbrs	r10, 2
    130e:	06 c0       	rjmp	.+12     	; 0x131c <vfprintf+0x2fe>
    1310:	b3 94       	inc	r11
    1312:	b3 94       	inc	r11
    1314:	04 c0       	rjmp	.+8      	; 0x131e <vfprintf+0x300>
    1316:	8a 2d       	mov	r24, r10
    1318:	86 78       	andi	r24, 0x86	; 134
    131a:	09 f0       	breq	.+2      	; 0x131e <vfprintf+0x300>
    131c:	b3 94       	inc	r11
    131e:	a3 fc       	sbrc	r10, 3
    1320:	11 c0       	rjmp	.+34     	; 0x1344 <vfprintf+0x326>
    1322:	a0 fe       	sbrs	r10, 0
    1324:	06 c0       	rjmp	.+12     	; 0x1332 <vfprintf+0x314>
    1326:	b2 14       	cp	r11, r2
    1328:	88 f4       	brcc	.+34     	; 0x134c <vfprintf+0x32e>
    132a:	28 0c       	add	r2, r8
    132c:	92 2c       	mov	r9, r2
    132e:	9b 18       	sub	r9, r11
    1330:	0e c0       	rjmp	.+28     	; 0x134e <vfprintf+0x330>
    1332:	b2 14       	cp	r11, r2
    1334:	60 f4       	brcc	.+24     	; 0x134e <vfprintf+0x330>
    1336:	b6 01       	movw	r22, r12
    1338:	80 e2       	ldi	r24, 0x20	; 32
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 94 06 0a 	call	0x140c	; 0x140c <fputc>
    1340:	b3 94       	inc	r11
    1342:	f7 cf       	rjmp	.-18     	; 0x1332 <vfprintf+0x314>
    1344:	b2 14       	cp	r11, r2
    1346:	18 f4       	brcc	.+6      	; 0x134e <vfprintf+0x330>
    1348:	2b 18       	sub	r2, r11
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <vfprintf+0x332>
    134c:	98 2c       	mov	r9, r8
    134e:	21 2c       	mov	r2, r1
    1350:	a4 fe       	sbrs	r10, 4
    1352:	10 c0       	rjmp	.+32     	; 0x1374 <vfprintf+0x356>
    1354:	b6 01       	movw	r22, r12
    1356:	80 e3       	ldi	r24, 0x30	; 48
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	0e 94 06 0a 	call	0x140c	; 0x140c <fputc>
    135e:	a2 fe       	sbrs	r10, 2
    1360:	17 c0       	rjmp	.+46     	; 0x1390 <vfprintf+0x372>
    1362:	a1 fc       	sbrc	r10, 1
    1364:	03 c0       	rjmp	.+6      	; 0x136c <vfprintf+0x34e>
    1366:	88 e7       	ldi	r24, 0x78	; 120
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <vfprintf+0x352>
    136c:	88 e5       	ldi	r24, 0x58	; 88
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	b6 01       	movw	r22, r12
    1372:	0c c0       	rjmp	.+24     	; 0x138c <vfprintf+0x36e>
    1374:	8a 2d       	mov	r24, r10
    1376:	86 78       	andi	r24, 0x86	; 134
    1378:	59 f0       	breq	.+22     	; 0x1390 <vfprintf+0x372>
    137a:	a1 fe       	sbrs	r10, 1
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <vfprintf+0x364>
    137e:	8b e2       	ldi	r24, 0x2B	; 43
    1380:	01 c0       	rjmp	.+2      	; 0x1384 <vfprintf+0x366>
    1382:	80 e2       	ldi	r24, 0x20	; 32
    1384:	a7 fc       	sbrc	r10, 7
    1386:	8d e2       	ldi	r24, 0x2D	; 45
    1388:	b6 01       	movw	r22, r12
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	0e 94 06 0a 	call	0x140c	; 0x140c <fputc>
    1390:	89 14       	cp	r8, r9
    1392:	38 f4       	brcc	.+14     	; 0x13a2 <vfprintf+0x384>
    1394:	b6 01       	movw	r22, r12
    1396:	80 e3       	ldi	r24, 0x30	; 48
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	0e 94 06 0a 	call	0x140c	; 0x140c <fputc>
    139e:	9a 94       	dec	r9
    13a0:	f7 cf       	rjmp	.-18     	; 0x1390 <vfprintf+0x372>
    13a2:	8a 94       	dec	r8
    13a4:	f3 01       	movw	r30, r6
    13a6:	e8 0d       	add	r30, r8
    13a8:	f1 1d       	adc	r31, r1
    13aa:	80 81       	ld	r24, Z
    13ac:	b6 01       	movw	r22, r12
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	0e 94 06 0a 	call	0x140c	; 0x140c <fputc>
    13b4:	81 10       	cpse	r8, r1
    13b6:	f5 cf       	rjmp	.-22     	; 0x13a2 <vfprintf+0x384>
    13b8:	22 20       	and	r2, r2
    13ba:	09 f4       	brne	.+2      	; 0x13be <vfprintf+0x3a0>
    13bc:	42 ce       	rjmp	.-892    	; 0x1042 <vfprintf+0x24>
    13be:	b6 01       	movw	r22, r12
    13c0:	80 e2       	ldi	r24, 0x20	; 32
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0e 94 06 0a 	call	0x140c	; 0x140c <fputc>
    13c8:	2a 94       	dec	r2
    13ca:	f6 cf       	rjmp	.-20     	; 0x13b8 <vfprintf+0x39a>
    13cc:	f6 01       	movw	r30, r12
    13ce:	86 81       	ldd	r24, Z+6	; 0x06
    13d0:	97 81       	ldd	r25, Z+7	; 0x07
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <vfprintf+0x3ba>
    13d4:	8f ef       	ldi	r24, 0xFF	; 255
    13d6:	9f ef       	ldi	r25, 0xFF	; 255
    13d8:	2b 96       	adiw	r28, 0x0b	; 11
    13da:	e2 e1       	ldi	r30, 0x12	; 18
    13dc:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <__epilogue_restores__>

000013e0 <strnlen_P>:
    13e0:	fc 01       	movw	r30, r24
    13e2:	05 90       	lpm	r0, Z+
    13e4:	61 50       	subi	r22, 0x01	; 1
    13e6:	70 40       	sbci	r23, 0x00	; 0
    13e8:	01 10       	cpse	r0, r1
    13ea:	d8 f7       	brcc	.-10     	; 0x13e2 <strnlen_P+0x2>
    13ec:	80 95       	com	r24
    13ee:	90 95       	com	r25
    13f0:	8e 0f       	add	r24, r30
    13f2:	9f 1f       	adc	r25, r31
    13f4:	08 95       	ret

000013f6 <strnlen>:
    13f6:	fc 01       	movw	r30, r24
    13f8:	61 50       	subi	r22, 0x01	; 1
    13fa:	70 40       	sbci	r23, 0x00	; 0
    13fc:	01 90       	ld	r0, Z+
    13fe:	01 10       	cpse	r0, r1
    1400:	d8 f7       	brcc	.-10     	; 0x13f8 <strnlen+0x2>
    1402:	80 95       	com	r24
    1404:	90 95       	com	r25
    1406:	8e 0f       	add	r24, r30
    1408:	9f 1f       	adc	r25, r31
    140a:	08 95       	ret

0000140c <fputc>:
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	fb 01       	movw	r30, r22
    1416:	23 81       	ldd	r18, Z+3	; 0x03
    1418:	21 fd       	sbrc	r18, 1
    141a:	03 c0       	rjmp	.+6      	; 0x1422 <fputc+0x16>
    141c:	8f ef       	ldi	r24, 0xFF	; 255
    141e:	9f ef       	ldi	r25, 0xFF	; 255
    1420:	2c c0       	rjmp	.+88     	; 0x147a <fputc+0x6e>
    1422:	22 ff       	sbrs	r18, 2
    1424:	16 c0       	rjmp	.+44     	; 0x1452 <fputc+0x46>
    1426:	46 81       	ldd	r20, Z+6	; 0x06
    1428:	57 81       	ldd	r21, Z+7	; 0x07
    142a:	24 81       	ldd	r18, Z+4	; 0x04
    142c:	35 81       	ldd	r19, Z+5	; 0x05
    142e:	42 17       	cp	r20, r18
    1430:	53 07       	cpc	r21, r19
    1432:	44 f4       	brge	.+16     	; 0x1444 <fputc+0x38>
    1434:	a0 81       	ld	r26, Z
    1436:	b1 81       	ldd	r27, Z+1	; 0x01
    1438:	9d 01       	movw	r18, r26
    143a:	2f 5f       	subi	r18, 0xFF	; 255
    143c:	3f 4f       	sbci	r19, 0xFF	; 255
    143e:	31 83       	std	Z+1, r19	; 0x01
    1440:	20 83       	st	Z, r18
    1442:	8c 93       	st	X, r24
    1444:	26 81       	ldd	r18, Z+6	; 0x06
    1446:	37 81       	ldd	r19, Z+7	; 0x07
    1448:	2f 5f       	subi	r18, 0xFF	; 255
    144a:	3f 4f       	sbci	r19, 0xFF	; 255
    144c:	37 83       	std	Z+7, r19	; 0x07
    144e:	26 83       	std	Z+6, r18	; 0x06
    1450:	14 c0       	rjmp	.+40     	; 0x147a <fputc+0x6e>
    1452:	8b 01       	movw	r16, r22
    1454:	ec 01       	movw	r28, r24
    1456:	fb 01       	movw	r30, r22
    1458:	00 84       	ldd	r0, Z+8	; 0x08
    145a:	f1 85       	ldd	r31, Z+9	; 0x09
    145c:	e0 2d       	mov	r30, r0
    145e:	09 95       	icall
    1460:	89 2b       	or	r24, r25
    1462:	e1 f6       	brne	.-72     	; 0x141c <fputc+0x10>
    1464:	d8 01       	movw	r26, r16
    1466:	16 96       	adiw	r26, 0x06	; 6
    1468:	8d 91       	ld	r24, X+
    146a:	9c 91       	ld	r25, X
    146c:	17 97       	sbiw	r26, 0x07	; 7
    146e:	01 96       	adiw	r24, 0x01	; 1
    1470:	17 96       	adiw	r26, 0x07	; 7
    1472:	9c 93       	st	X, r25
    1474:	8e 93       	st	-X, r24
    1476:	16 97       	sbiw	r26, 0x06	; 6
    1478:	ce 01       	movw	r24, r28
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
    147e:	1f 91       	pop	r17
    1480:	0f 91       	pop	r16
    1482:	08 95       	ret

00001484 <__ultoa_invert>:
    1484:	fa 01       	movw	r30, r20
    1486:	aa 27       	eor	r26, r26
    1488:	28 30       	cpi	r18, 0x08	; 8
    148a:	51 f1       	breq	.+84     	; 0x14e0 <__ultoa_invert+0x5c>
    148c:	20 31       	cpi	r18, 0x10	; 16
    148e:	81 f1       	breq	.+96     	; 0x14f0 <__ultoa_invert+0x6c>
    1490:	e8 94       	clt
    1492:	6f 93       	push	r22
    1494:	6e 7f       	andi	r22, 0xFE	; 254
    1496:	6e 5f       	subi	r22, 0xFE	; 254
    1498:	7f 4f       	sbci	r23, 0xFF	; 255
    149a:	8f 4f       	sbci	r24, 0xFF	; 255
    149c:	9f 4f       	sbci	r25, 0xFF	; 255
    149e:	af 4f       	sbci	r26, 0xFF	; 255
    14a0:	b1 e0       	ldi	r27, 0x01	; 1
    14a2:	3e d0       	rcall	.+124    	; 0x1520 <__ultoa_invert+0x9c>
    14a4:	b4 e0       	ldi	r27, 0x04	; 4
    14a6:	3c d0       	rcall	.+120    	; 0x1520 <__ultoa_invert+0x9c>
    14a8:	67 0f       	add	r22, r23
    14aa:	78 1f       	adc	r23, r24
    14ac:	89 1f       	adc	r24, r25
    14ae:	9a 1f       	adc	r25, r26
    14b0:	a1 1d       	adc	r26, r1
    14b2:	68 0f       	add	r22, r24
    14b4:	79 1f       	adc	r23, r25
    14b6:	8a 1f       	adc	r24, r26
    14b8:	91 1d       	adc	r25, r1
    14ba:	a1 1d       	adc	r26, r1
    14bc:	6a 0f       	add	r22, r26
    14be:	71 1d       	adc	r23, r1
    14c0:	81 1d       	adc	r24, r1
    14c2:	91 1d       	adc	r25, r1
    14c4:	a1 1d       	adc	r26, r1
    14c6:	20 d0       	rcall	.+64     	; 0x1508 <__ultoa_invert+0x84>
    14c8:	09 f4       	brne	.+2      	; 0x14cc <__ultoa_invert+0x48>
    14ca:	68 94       	set
    14cc:	3f 91       	pop	r19
    14ce:	2a e0       	ldi	r18, 0x0A	; 10
    14d0:	26 9f       	mul	r18, r22
    14d2:	11 24       	eor	r1, r1
    14d4:	30 19       	sub	r19, r0
    14d6:	30 5d       	subi	r19, 0xD0	; 208
    14d8:	31 93       	st	Z+, r19
    14da:	de f6       	brtc	.-74     	; 0x1492 <__ultoa_invert+0xe>
    14dc:	cf 01       	movw	r24, r30
    14de:	08 95       	ret
    14e0:	46 2f       	mov	r20, r22
    14e2:	47 70       	andi	r20, 0x07	; 7
    14e4:	40 5d       	subi	r20, 0xD0	; 208
    14e6:	41 93       	st	Z+, r20
    14e8:	b3 e0       	ldi	r27, 0x03	; 3
    14ea:	0f d0       	rcall	.+30     	; 0x150a <__ultoa_invert+0x86>
    14ec:	c9 f7       	brne	.-14     	; 0x14e0 <__ultoa_invert+0x5c>
    14ee:	f6 cf       	rjmp	.-20     	; 0x14dc <__ultoa_invert+0x58>
    14f0:	46 2f       	mov	r20, r22
    14f2:	4f 70       	andi	r20, 0x0F	; 15
    14f4:	40 5d       	subi	r20, 0xD0	; 208
    14f6:	4a 33       	cpi	r20, 0x3A	; 58
    14f8:	18 f0       	brcs	.+6      	; 0x1500 <__ultoa_invert+0x7c>
    14fa:	49 5d       	subi	r20, 0xD9	; 217
    14fc:	31 fd       	sbrc	r19, 1
    14fe:	40 52       	subi	r20, 0x20	; 32
    1500:	41 93       	st	Z+, r20
    1502:	02 d0       	rcall	.+4      	; 0x1508 <__ultoa_invert+0x84>
    1504:	a9 f7       	brne	.-22     	; 0x14f0 <__ultoa_invert+0x6c>
    1506:	ea cf       	rjmp	.-44     	; 0x14dc <__ultoa_invert+0x58>
    1508:	b4 e0       	ldi	r27, 0x04	; 4
    150a:	a6 95       	lsr	r26
    150c:	97 95       	ror	r25
    150e:	87 95       	ror	r24
    1510:	77 95       	ror	r23
    1512:	67 95       	ror	r22
    1514:	ba 95       	dec	r27
    1516:	c9 f7       	brne	.-14     	; 0x150a <__ultoa_invert+0x86>
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	61 05       	cpc	r22, r1
    151c:	71 05       	cpc	r23, r1
    151e:	08 95       	ret
    1520:	9b 01       	movw	r18, r22
    1522:	ac 01       	movw	r20, r24
    1524:	0a 2e       	mov	r0, r26
    1526:	06 94       	lsr	r0
    1528:	57 95       	ror	r21
    152a:	47 95       	ror	r20
    152c:	37 95       	ror	r19
    152e:	27 95       	ror	r18
    1530:	ba 95       	dec	r27
    1532:	c9 f7       	brne	.-14     	; 0x1526 <__ultoa_invert+0xa2>
    1534:	62 0f       	add	r22, r18
    1536:	73 1f       	adc	r23, r19
    1538:	84 1f       	adc	r24, r20
    153a:	95 1f       	adc	r25, r21
    153c:	a0 1d       	adc	r26, r0
    153e:	08 95       	ret

00001540 <__prologue_saves__>:
    1540:	2f 92       	push	r2
    1542:	3f 92       	push	r3
    1544:	4f 92       	push	r4
    1546:	5f 92       	push	r5
    1548:	6f 92       	push	r6
    154a:	7f 92       	push	r7
    154c:	8f 92       	push	r8
    154e:	9f 92       	push	r9
    1550:	af 92       	push	r10
    1552:	bf 92       	push	r11
    1554:	cf 92       	push	r12
    1556:	df 92       	push	r13
    1558:	ef 92       	push	r14
    155a:	ff 92       	push	r15
    155c:	0f 93       	push	r16
    155e:	1f 93       	push	r17
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	ca 1b       	sub	r28, r26
    156a:	db 0b       	sbc	r29, r27
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	cd bf       	out	0x3d, r28	; 61
    1576:	09 94       	ijmp

00001578 <__epilogue_restores__>:
    1578:	2a 88       	ldd	r2, Y+18	; 0x12
    157a:	39 88       	ldd	r3, Y+17	; 0x11
    157c:	48 88       	ldd	r4, Y+16	; 0x10
    157e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1580:	6e 84       	ldd	r6, Y+14	; 0x0e
    1582:	7d 84       	ldd	r7, Y+13	; 0x0d
    1584:	8c 84       	ldd	r8, Y+12	; 0x0c
    1586:	9b 84       	ldd	r9, Y+11	; 0x0b
    1588:	aa 84       	ldd	r10, Y+10	; 0x0a
    158a:	b9 84       	ldd	r11, Y+9	; 0x09
    158c:	c8 84       	ldd	r12, Y+8	; 0x08
    158e:	df 80       	ldd	r13, Y+7	; 0x07
    1590:	ee 80       	ldd	r14, Y+6	; 0x06
    1592:	fd 80       	ldd	r15, Y+5	; 0x05
    1594:	0c 81       	ldd	r16, Y+4	; 0x04
    1596:	1b 81       	ldd	r17, Y+3	; 0x03
    1598:	aa 81       	ldd	r26, Y+2	; 0x02
    159a:	b9 81       	ldd	r27, Y+1	; 0x01
    159c:	ce 0f       	add	r28, r30
    159e:	d1 1d       	adc	r29, r1
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	ed 01       	movw	r28, r26
    15ac:	08 95       	ret

000015ae <_exit>:
    15ae:	f8 94       	cli

000015b0 <__stop_program>:
    15b0:	ff cf       	rjmp	.-2      	; 0x15b0 <__stop_program>
