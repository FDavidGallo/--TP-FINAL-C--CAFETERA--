
tP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006fc  00800100  00000c20  00000cb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  008007fc  008007fc  000013b0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000140c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001450  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001842  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b6a  00000000  00000000  00002e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fe2  00000000  00000000  0000396c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00004950  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b1  00000000  00000000  00004b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000635  00000000  00000000  0000511d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00005752  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	17 e0       	ldi	r17, 0x07	; 7
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e2       	ldi	r30, 0x20	; 32
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3f       	cpi	r26, 0xFC	; 252
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	ac ef       	ldi	r26, 0xFC	; 252
  8e:	b7 e0       	ldi	r27, 0x07	; 7
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 3f       	cpi	r26, 0xFE	; 254
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 89 01 	call	0x312	; 0x312 <main>
  9e:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:

#include "i2c.h"
int ejecucionUnica = 1;

void i2c_init() { //Se encarga de inicializar el bus I2C en modo maestro con una velocidad de transmisión de 100 kHz
	TWBR = 25; // Frecuencia de reloj de 16MHz / (16 + 2 * TWBR * 1) = 100 kHz {con 25242kHz}
  a6:	89 e1       	ldi	r24, 0x19	; 25
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWSR = 0;  // Prescaler de 1
  ac:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  b0:	08 95       	ret

000000b2 <i2c_start>:
}

void i2c_start(){	//Envía una condición de inicio al bus I2C.
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTA); // Condición de inicio
  b2:	84 ea       	ldi	r24, 0xA4	; 164
  b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT))); // Verificar la condición de inicio
  b8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  bc:	88 23       	and	r24, r24
  be:	e4 f7       	brge	.-8      	; 0xb8 <i2c_start+0x6>
}
  c0:	08 95       	ret

000000c2 <i2c_write>:
	//TWINT (para limpiar la bandera de interrupción), 
	//TWEN (para habilitar el módulo I2C) y TWSTA (para enviar la condición de inicio). 

void i2c_write(char x){	//Se utiliza para escribir un byte de datos en el bus I2C. 
	TWDR = x; // Mover valor a I2C
  c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN); // Habilite I2C y borra la interrupción
  c6:	84 e8       	ldi	r24, 0x84	; 132
  c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));
  cc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  d0:	88 23       	and	r24, r24
  d2:	e4 f7       	brge	.-8      	; 0xcc <i2c_write+0xa>
}
  d4:	08 95       	ret

000000d6 <enviarPulsoEnable>:
#include "LCD_I2C.h"


void enviarPulsoEnable()
{
TWDR |= 0x02;					//---PIN En la pantalla LCD en = 1; -----Enclavar datos en el registro de datos LCD usando una señal de alta a baja
  d6:	eb eb       	ldi	r30, 0xBB	; 187
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//---Habilita I2C y borra la interrupción- Esta linea y la siguiente simepre van despues de querer mandar un coamndo por TDWR
  e0:	84 e8       	ldi	r24, 0x84	; 132
  e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));	//---Siempre poner despues de la linea anterior al mandar datos por TWDR
  e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ea:	88 23       	and	r24, r24
  ec:	e4 f7       	brge	.-8      	; 0xe6 <enviarPulsoEnable+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	89 ef       	ldi	r24, 0xF9	; 249
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <enviarPulsoEnable+0x1c>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <enviarPulsoEnable+0x22>
  f8:	00 00       	nop
_delay_ms(1);
TWDR &= ~0x02;					//---PIN del Enable de la LCD en = 0;
  fa:	eb eb       	ldi	r30, 0xBB	; 187
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	8d 7f       	andi	r24, 0xFD	; 253
 102:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//---Habilita I2C y borra la interrupción
 104:	84 e8       	ldi	r24, 0x84	; 132
 106:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
 10a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 10e:	88 23       	and	r24, r24
 110:	e4 f7       	brge	.-8      	; 0x10a <enviarPulsoEnable+0x34>
}
 112:	08 95       	ret

00000114 <enviarComando4Bits>:

void enviarComando4Bits(char v1)
{
TWDR &=~0x01;					//PIN RS de la pantalla LCD rs = 0; ----Seleccionar registro como registro de comando
 114:	eb eb       	ldi	r30, 0xBB	; 187
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	90 81       	ld	r25, Z
 11a:	9e 7f       	andi	r25, 0xFE	; 254
 11c:	90 83       	st	Z, r25
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
 11e:	94 e8       	ldi	r25, 0x84	; 132
 120:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
 124:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 128:	99 23       	and	r25, r25
 12a:	e4 f7       	brge	.-8      	; 0x124 <enviarComando4Bits+0x10>
TWDR &= 0x0F;					//----Enmascaramiento de 4 bits superiores y envío a LCD
 12c:	eb eb       	ldi	r30, 0xBB	; 187
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	90 81       	ld	r25, Z
 132:	9f 70       	andi	r25, 0x0F	; 15
 134:	90 83       	st	Z, r25
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
 136:	94 e8       	ldi	r25, 0x84	; 132
 138:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
 13c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 140:	99 23       	and	r25, r25
 142:	e4 f7       	brge	.-8      	; 0x13c <enviarComando4Bits+0x28>
TWDR |= (v1 & 0xF0);			//----
 144:	eb eb       	ldi	r30, 0xBB	; 187
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	90 81       	ld	r25, Z
 14a:	80 7f       	andi	r24, 0xF0	; 240
 14c:	89 2b       	or	r24, r25
 14e:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
 150:	84 e8       	ldi	r24, 0x84	; 132
 152:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
 156:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 15a:	88 23       	and	r24, r24
 15c:	e4 f7       	brge	.-8      	; 0x156 <enviarComando4Bits+0x42>
enviarPulsoEnable();
 15e:	0e 94 6b 00 	call	0xd6	; 0xd6 <enviarPulsoEnable>
 162:	08 95       	ret

00000164 <enviarComando>:
}

void enviarComando(char v2)
{
 164:	cf 93       	push	r28
 166:	c8 2f       	mov	r28, r24
TWDR&=~0x01;					//rs = 0; ----Seleccionar registro como registro de comando
 168:	eb eb       	ldi	r30, 0xBB	; 187
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	8e 7f       	andi	r24, 0xFE	; 254
 170:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
 172:	84 e8       	ldi	r24, 0x84	; 132
 174:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
 178:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 17c:	88 23       	and	r24, r24
 17e:	e4 f7       	brge	.-8      	; 0x178 <enviarComando+0x14>

TWDR &= 0x0F;                   //----borrando los 4 bits superiores
 180:	eb eb       	ldi	r30, 0xBB	; 187
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	8f 70       	andi	r24, 0x0F	; 15
 188:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
 18a:	84 e8       	ldi	r24, 0x84	; 132
 18c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
 190:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 194:	88 23       	and	r24, r24
 196:	e4 f7       	brge	.-8      	; 0x190 <enviarComando+0x2c>
TWDR |= (v2 & 0xF0);			//----Enmascaramiento de 4 bits superiores y envío a LCD
 198:	eb eb       	ldi	r30, 0xBB	; 187
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	9c 2f       	mov	r25, r28
 1a0:	90 7f       	andi	r25, 0xF0	; 240
 1a2:	89 2b       	or	r24, r25
 1a4:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
 1a6:	84 e8       	ldi	r24, 0x84	; 132
 1a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
 1ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1b0:	88 23       	and	r24, r24
 1b2:	e4 f7       	brge	.-8      	; 0x1ac <enviarComando+0x48>
enviarPulsoEnable();
 1b4:	0e 94 6b 00 	call	0xd6	; 0xd6 <enviarPulsoEnable>
	
TWDR &= 0x0F;                    //----borrando los 4 bits superiores
 1b8:	eb eb       	ldi	r30, 0xBB	; 187
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	8f 70       	andi	r24, 0x0F	; 15
 1c0:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
 1c2:	84 e8       	ldi	r24, 0x84	; 132
 1c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
 1c8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1cc:	88 23       	and	r24, r24
 1ce:	e4 f7       	brge	.-8      	; 0x1c8 <enviarComando+0x64>
TWDR |= ((v2 & 0x0F)<<4);		//----Enmascaramiento de 4 bits inferiores y envío a LCD
 1d0:	eb eb       	ldi	r30, 0xBB	; 187
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	20 81       	ld	r18, Z
 1d6:	30 e1       	ldi	r19, 0x10	; 16
 1d8:	c3 9f       	mul	r28, r19
 1da:	c0 01       	movw	r24, r0
 1dc:	11 24       	eor	r1, r1
 1de:	82 2b       	or	r24, r18
 1e0:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilite I2C y borra la interrupción
 1e2:	84 e8       	ldi	r24, 0x84	; 132
 1e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
 1e8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1ec:	88 23       	and	r24, r24
 1ee:	e4 f7       	brge	.-8      	; 0x1e8 <enviarComando+0x84>
enviarPulsoEnable();
 1f0:	0e 94 6b 00 	call	0xd6	; 0xd6 <enviarPulsoEnable>
}
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <escribirDato>:

void escribirDato(char v3)
{
 1f8:	cf 93       	push	r28
 1fa:	c8 2f       	mov	r28, r24
TWDR|=0x01;						//RS = 1; ----Selecciona registro como registro de comando
 1fc:	eb eb       	ldi	r30, 0xBB	; 187
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	81 60       	ori	r24, 0x01	; 1
 204:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
 206:	84 e8       	ldi	r24, 0x84	; 132
 208:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
 20c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 210:	88 23       	and	r24, r24
 212:	e4 f7       	brge	.-8      	; 0x20c <escribirDato+0x14>
TWDR &= 0x0F;				    //----borrando los 4 bits superiores
 214:	eb eb       	ldi	r30, 0xBB	; 187
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	8f 70       	andi	r24, 0x0F	; 15
 21c:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
 21e:	84 e8       	ldi	r24, 0x84	; 132
 220:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
 224:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 228:	88 23       	and	r24, r24
 22a:	e4 f7       	brge	.-8      	; 0x224 <escribirDato+0x2c>
TWDR |= (v3 & 0xF0);			//----Enmascaramiento de 4 bits superiores y envío a LCD
 22c:	eb eb       	ldi	r30, 0xBB	; 187
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	9c 2f       	mov	r25, r28
 234:	90 7f       	andi	r25, 0xF0	; 240
 236:	89 2b       	or	r24, r25
 238:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
 23a:	84 e8       	ldi	r24, 0x84	; 132
 23c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
 240:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 244:	88 23       	and	r24, r24
 246:	e4 f7       	brge	.-8      	; 0x240 <escribirDato+0x48>
enviarPulsoEnable();
 248:	0e 94 6b 00 	call	0xd6	; 0xd6 <enviarPulsoEnable>
	
TWDR &= 0x0F;					//----borrando los 4 bits superiores
 24c:	eb eb       	ldi	r30, 0xBB	; 187
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	8f 70       	andi	r24, 0x0F	; 15
 254:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
 256:	84 e8       	ldi	r24, 0x84	; 132
 258:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
 25c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 260:	88 23       	and	r24, r24
 262:	e4 f7       	brge	.-8      	; 0x25c <escribirDato+0x64>
TWDR |= ((v3 & 0x0F)<<4);		//----Enmascaramiento de 4 bits inferiores y envío a LCD
 264:	eb eb       	ldi	r30, 0xBB	; 187
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	20 81       	ld	r18, Z
 26a:	30 e1       	ldi	r19, 0x10	; 16
 26c:	c3 9f       	mul	r28, r19
 26e:	c0 01       	movw	r24, r0
 270:	11 24       	eor	r1, r1
 272:	82 2b       	or	r24, r18
 274:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
 276:	84 e8       	ldi	r24, 0x84	; 132
 278:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
 27c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 280:	88 23       	and	r24, r24
 282:	e4 f7       	brge	.-8      	; 0x27c <escribirDato+0x84>
enviarPulsoEnable();
 284:	0e 94 6b 00 	call	0xd6	; 0xd6 <enviarPulsoEnable>
}
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <lcd_init>:
 28c:	81 ee       	ldi	r24, 0xE1	; 225
 28e:	94 e0       	ldi	r25, 0x04	; 4
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <lcd_init+0x4>
 294:	00 c0       	rjmp	.+0      	; 0x296 <lcd_init+0xa>
 296:	00 00       	nop

void lcd_init() {
// Inicialización del LCD de 20x4 en modo 4 bits.
_delay_ms(5);
enviarComando4Bits(0x30); // 3 veces
 298:	80 e3       	ldi	r24, 0x30	; 48
 29a:	0e 94 8a 00 	call	0x114	; 0x114 <enviarComando4Bits>
 29e:	81 ee       	ldi	r24, 0xE1	; 225
 2a0:	94 e0       	ldi	r25, 0x04	; 4
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <lcd_init+0x16>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <lcd_init+0x1c>
 2a8:	00 00       	nop
_delay_ms(5);
enviarComando4Bits(0x30);
 2aa:	80 e3       	ldi	r24, 0x30	; 48
 2ac:	0e 94 8a 00 	call	0x114	; 0x114 <enviarComando4Bits>
enviarComando4Bits(0x20); // Modo 4 bits
 2b0:	80 e2       	ldi	r24, 0x20	; 32
 2b2:	0e 94 8a 00 	call	0x114	; 0x114 <enviarComando4Bits>
 2b6:	81 ee       	ldi	r24, 0xE1	; 225
 2b8:	94 e0       	ldi	r25, 0x04	; 4
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <lcd_init+0x2e>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <lcd_init+0x34>
 2c0:	00 00       	nop
_delay_ms(5);
	
// Configuración del LCD de 20x4
enviarComando(0x28);      // Función de 4 bits, 2 líneas, fuente 5x8
 2c2:	88 e2       	ldi	r24, 0x28	; 40
 2c4:	0e 94 b2 00 	call	0x164	; 0x164 <enviarComando>
enviarComando(0x0C);      // Encender el display, apagar el cursor
 2c8:	8c e0       	ldi	r24, 0x0C	; 12
 2ca:	0e 94 b2 00 	call	0x164	; 0x164 <enviarComando>
enviarComando(0x01);      // Borrar pantalla
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 b2 00 	call	0x164	; 0x164 <enviarComando>
enviarComando(0x06);      // Desplazamiento del cursor a la derecha
 2d4:	86 e0       	ldi	r24, 0x06	; 6
 2d6:	0e 94 b2 00 	call	0x164	; 0x164 <enviarComando>
enviarComando(0x80);      // Posiciona el cursor en la primera línea, primera posición
 2da:	80 e8       	ldi	r24, 0x80	; 128
 2dc:	0e 94 b2 00 	call	0x164	; 0x164 <enviarComando>
 2e0:	08 95       	ret

000002e2 <escribirEnLCD>:
}

void escribirEnLCD(char *c)
{
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	ec 01       	movw	r28, r24
while(*c != 0)			//----Espere hasta que todas las cadenas pasen a la pantalla LCD.
 2e8:	03 c0       	rjmp	.+6      	; 0x2f0 <escribirEnLCD+0xe>
escribirDato(*c++);		//----Enviar la cadena a la pantalla LCD
 2ea:	21 96       	adiw	r28, 0x01	; 1
 2ec:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <escribirDato>
enviarComando(0x80);      // Posiciona el cursor en la primera línea, primera posición
}

void escribirEnLCD(char *c)
{
while(*c != 0)			//----Espere hasta que todas las cadenas pasen a la pantalla LCD.
 2f0:	88 81       	ld	r24, Y
 2f2:	81 11       	cpse	r24, r1
 2f4:	fa cf       	rjmp	.-12     	; 0x2ea <escribirEnLCD+0x8>
escribirDato(*c++);		//----Enviar la cadena a la pantalla LCD
}
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <limpiar_LCD>:

void limpiar_LCD()
{
enviarComando(0x01);	//Comando para limpar el lcd
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	0e 94 b2 00 	call	0x164	; 0x164 <enviarComando>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 302:	81 e2       	ldi	r24, 0x21	; 33
 304:	8a 95       	dec	r24
 306:	f1 f7       	brne	.-4      	; 0x304 <limpiar_LCD+0x8>
 308:	00 00       	nop
_delay_us(100);
enviarComando (0x80);	//Setea el cursor en la posicion cero
 30a:	80 e8       	ldi	r24, 0x80	; 128
 30c:	0e 94 b2 00 	call	0x164	; 0x164 <enviarComando>
 310:	08 95       	ret

00000312 <main>:




int main(void)
{
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	cd b7       	in	r28, 0x3d	; 61
 318:	de b7       	in	r29, 0x3e	; 62
 31a:	2c 97       	sbiw	r28, 0x0c	; 12
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	f8 94       	cli
 320:	de bf       	out	0x3e, r29	; 62
 322:	0f be       	out	0x3f, r0	; 63
 324:	cd bf       	out	0x3d, r28	; 61
	ConfigurarPinesSensores();
 326:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <ConfigurarPinesSensores>
	int p=0;
	uart_init();
 32a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <uart_init>
	uart_send_string("	Hola mundo");
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
	Carpy();
 336:	0e 94 89 02 	call	0x512	; 0x512 <Carpy>
	//uart_send_string("1- Editar valores ");
	//uart_send_newline();
	//uart_send_string("2- Ver estadisticas");
	//uart_send_newline();
	//uart_send_string("3-Datos del proyecto");
	uart_send_newline();
 33a:	0e 94 82 02 	call	0x504	; 0x504 <uart_send_newline>
	//echo_serial();
    i2c_init();
 33e:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
    i2c_start();
 342:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start>
    i2c_write(0x40);
 346:	80 e4       	ldi	r24, 0x40	; 64
 348:	0e 94 61 00 	call	0xc2	; 0xc2 <i2c_write>
    lcd_init();
 34c:	0e 94 46 01 	call	0x28c	; 0x28c <lcd_init>
    escribirEnLCD(" Hola Mundo");
 350:	8c e0       	ldi	r24, 0x0C	; 12
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	0e 94 71 01 	call	0x2e2	; 0x2e2 <escribirEnLCD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 358:	2f e3       	ldi	r18, 0x3F	; 63
 35a:	8d e0       	ldi	r24, 0x0D	; 13
 35c:	93 e0       	ldi	r25, 0x03	; 3
 35e:	21 50       	subi	r18, 0x01	; 1
 360:	80 40       	sbci	r24, 0x00	; 0
 362:	90 40       	sbci	r25, 0x00	; 0
 364:	e1 f7       	brne	.-8      	; 0x35e <main+0x4c>
 366:	00 c0       	rjmp	.+0      	; 0x368 <main+0x56>
 368:	00 00       	nop
   _delay_ms(1000);
    limpiar_LCD();
 36a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <limpiar_LCD>
   escribirEnLCD(" Hola yo");
 36e:	88 e1       	ldi	r24, 0x18	; 24
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	0e 94 71 01 	call	0x2e2	; 0x2e2 <escribirEnLCD>
     limpiar_LCD();
 376:	0e 94 7e 01 	call	0x2fc	; 0x2fc <limpiar_LCD>
	   char charToStore = 'A';

	   // Escribir el carácter en la EEPROM
	   eeprom_write_byte((uint8_t*)EEPROM_ADDR, charToStore);
 37a:	61 e4       	ldi	r22, 0x41	; 65
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 c9 05 	call	0xb92	; 0xb92 <eeprom_write_byte>

	   // Leer el carácter desde la EEPROM
	   char readChar = eeprom_read_byte((uint8_t*)EEPROM_ADDR);
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 c1 05 	call	0xb82	; 0xb82 <eeprom_read_byte>

	   // Convertir el carácter leído en una cadena de caracteres
	   char VALOR[2]; // Espacio para el carácter y el terminador nulo
	   sprintf(VALOR, "%c", readChar);
 38c:	1f 92       	push	r1
 38e:	8f 93       	push	r24
 390:	81 e2       	ldi	r24, 0x21	; 33
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	9f 93       	push	r25
 396:	8f 93       	push	r24
 398:	8e 01       	movw	r16, r28
 39a:	0f 5f       	subi	r16, 0xFF	; 255
 39c:	1f 4f       	sbci	r17, 0xFF	; 255
 39e:	1f 93       	push	r17
 3a0:	0f 93       	push	r16
 3a2:	0e 94 0e 03 	call	0x61c	; 0x61c <sprintf>

	   // Tu código adicional aquí (si es necesario)

	   // Enviar la cadena de caracteres a través de UART
	   uart_send_string(VALOR);
 3a6:	c8 01       	movw	r24, r16
 3a8:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	0f 90       	pop	r0
 3b6:	0f 90       	pop	r0


int main(void)
{
	ConfigurarPinesSensores();
	int p=0;
 3b8:	c1 2c       	mov	r12, r1
 3ba:	d1 2c       	mov	r13, r1
	   // Enviar la cadena de caracteres a través de UART
	   uart_send_string(VALOR);

   while (1) {
	   char buffer[10]; // Espacio para la cadena de caracteres
	   sprintf(buffer, "%d", p); // Convierte el entero a una cadena
 3bc:	df 92       	push	r13
 3be:	cf 92       	push	r12
 3c0:	0f 2e       	mov	r0, r31
 3c2:	f4 e2       	ldi	r31, 0x24	; 36
 3c4:	ef 2e       	mov	r14, r31
 3c6:	f1 e0       	ldi	r31, 0x01	; 1
 3c8:	ff 2e       	mov	r15, r31
 3ca:	f0 2d       	mov	r31, r0
 3cc:	ff 92       	push	r15
 3ce:	ef 92       	push	r14
 3d0:	8e 01       	movw	r16, r28
 3d2:	0d 5f       	subi	r16, 0xFD	; 253
 3d4:	1f 4f       	sbci	r17, 0xFF	; 255
 3d6:	1f 93       	push	r17
 3d8:	0f 93       	push	r16
 3da:	0e 94 0e 03 	call	0x61c	; 0x61c <sprintf>
	   escribirEnLCD(buffer); // Muestra la cadena en la pantalla LCD
 3de:	c8 01       	movw	r24, r16
 3e0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <escribirEnLCD>
 3e4:	27 e5       	ldi	r18, 0x57	; 87
 3e6:	85 eb       	ldi	r24, 0xB5	; 181
 3e8:	90 e1       	ldi	r25, 0x10	; 16
 3ea:	21 50       	subi	r18, 0x01	; 1
 3ec:	80 40       	sbci	r24, 0x00	; 0
 3ee:	90 40       	sbci	r25, 0x00	; 0
 3f0:	e1 f7       	brne	.-8      	; 0x3ea <main+0xd8>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <main+0xe2>
 3f4:	00 00       	nop
	   _delay_ms(5475);
	   limpiar_LCD();
 3f6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <limpiar_LCD>
	   escribirEnLCD(" Hola yo");
 3fa:	88 e1       	ldi	r24, 0x18	; 24
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	0e 94 71 01 	call	0x2e2	; 0x2e2 <escribirEnLCD>
	   p++; // Incrementa el valor de p
 402:	2f ef       	ldi	r18, 0xFF	; 255
 404:	c2 1a       	sub	r12, r18
 406:	d2 0a       	sbc	r13, r18
	   escribirEnLCD(buffer); // Muestra la cadena en la pantalla LCD
 408:	c8 01       	movw	r24, r16
 40a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <escribirEnLCD>
 40e:	87 e5       	ldi	r24, 0x57	; 87
 410:	95 eb       	ldi	r25, 0xB5	; 181
 412:	20 e1       	ldi	r18, 0x10	; 16
 414:	81 50       	subi	r24, 0x01	; 1
 416:	90 40       	sbci	r25, 0x00	; 0
 418:	20 40       	sbci	r18, 0x00	; 0
 41a:	e1 f7       	brne	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop
	   _delay_ms(5475);
	   limpiar_LCD();
 420:	0e 94 7e 01 	call	0x2fc	; 0x2fc <limpiar_LCD>
	  uart_send_string(" Hola mundo");
 424:	87 e2       	ldi	r24, 0x27	; 39
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
	  SensorTaza = (PIND & (1 << PD3)) ? 1 : 0;
 42c:	89 b1       	in	r24, 0x09	; 9
 42e:	83 fb       	bst	r24, 3
 430:	88 27       	eor	r24, r24
 432:	80 f9       	bld	r24, 0
 434:	80 93 fd 07 	sts	0x07FD, r24	; 0x8007fd <SensorTaza>
	  SensorPuerta = (PIND & (1 << PD4)) ? 1 : 0;
 438:	99 b1       	in	r25, 0x09	; 9
 43a:	92 95       	swap	r25
 43c:	91 70       	andi	r25, 0x01	; 1
 43e:	90 93 fc 07 	sts	0x07FC, r25	; 0x8007fc <__data_end>
	  sprintf(buffer, "%d", SensorTaza); // Convierte el entero a una cadena
 442:	1f 92       	push	r1
 444:	8f 93       	push	r24
 446:	ff 92       	push	r15
 448:	ef 92       	push	r14
 44a:	1f 93       	push	r17
 44c:	0f 93       	push	r16
 44e:	0e 94 0e 03 	call	0x61c	; 0x61c <sprintf>
	   escribirEnLCD(buffer); // Muestra la cadena en la pantalla LCD
 452:	c8 01       	movw	r24, r16
 454:	0e 94 71 01 	call	0x2e2	; 0x2e2 <escribirEnLCD>
	   escribirEnLCD(" >>");
 458:	83 e3       	ldi	r24, 0x33	; 51
 45a:	91 e0       	ldi	r25, 0x01	; 1
 45c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <escribirEnLCD>
	     sprintf(buffer, "%d", SensorPuerta); // Convierte el entero a una cadena
 460:	80 91 fc 07 	lds	r24, 0x07FC	; 0x8007fc <__data_end>
 464:	1f 92       	push	r1
 466:	8f 93       	push	r24
 468:	ff 92       	push	r15
 46a:	ef 92       	push	r14
 46c:	1f 93       	push	r17
 46e:	0f 93       	push	r16
 470:	0e 94 0e 03 	call	0x61c	; 0x61c <sprintf>
	     escribirEnLCD(buffer); // Muestra la cadena en la pantalla LCD
 474:	c8 01       	movw	r24, r16
 476:	0e 94 71 01 	call	0x2e2	; 0x2e2 <escribirEnLCD>
 47a:	87 e5       	ldi	r24, 0x57	; 87
 47c:	95 eb       	ldi	r25, 0xB5	; 181
 47e:	20 e1       	ldi	r18, 0x10	; 16
 480:	81 50       	subi	r24, 0x01	; 1
 482:	90 40       	sbci	r25, 0x00	; 0
 484:	20 40       	sbci	r18, 0x00	; 0
 486:	e1 f7       	brne	.-8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 488:	00 c0       	rjmp	.+0      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 48a:	00 00       	nop
	   _delay_ms(5475);
	   limpiar_LCD();
 48c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <limpiar_LCD>
	   uart_send_string(VALOR);
 490:	ce 01       	movw	r24, r28
 492:	01 96       	adiw	r24, 0x01	; 1
 494:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
 498:	87 e5       	ldi	r24, 0x57	; 87
 49a:	95 eb       	ldi	r25, 0xB5	; 181
 49c:	20 e1       	ldi	r18, 0x10	; 16
 49e:	81 50       	subi	r24, 0x01	; 1
 4a0:	90 40       	sbci	r25, 0x00	; 0
 4a2:	20 40       	sbci	r18, 0x00	; 0
 4a4:	e1 f7       	brne	.-8      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4a8:	00 00       	nop
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	f8 94       	cli
 4ae:	de bf       	out	0x3e, r29	; 62
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	cd bf       	out	0x3d, r28	; 61
 4b4:	83 cf       	rjmp	.-250    	; 0x3bc <main+0xaa>

000004b6 <ConfigurarPinesSensores>:
#define SENSOR_PIN_1 PD3
#define SENSOR_PIN_2 PD4

void ConfigurarPinesSensores() {
	// Configure sensor pins as inputs
	DDRD &= ~(1 << SENSOR_PIN_1); // PD3 as input
 4b6:	8a b1       	in	r24, 0x0a	; 10
 4b8:	87 7f       	andi	r24, 0xF7	; 247
 4ba:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << SENSOR_PIN_2); // PD4 as input
 4bc:	8a b1       	in	r24, 0x0a	; 10
 4be:	8f 7e       	andi	r24, 0xEF	; 239
 4c0:	8a b9       	out	0x0a, r24	; 10
 4c2:	08 95       	ret

000004c4 <uart_init>:
// Recibir un carácter desde la UART
char uart_receive_char() {
	while (!(UCSR0A & (1 << RXC0))); // Esperar hasta que se reciba un dato
	char recibido = UDR0;
	return recibido;
}
 4c4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 4c8:	87 e6       	ldi	r24, 0x67	; 103
 4ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 4ce:	88 e1       	ldi	r24, 0x18	; 24
 4d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 4d4:	86 e0       	ldi	r24, 0x06	; 6
 4d6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 4da:	08 95       	ret

000004dc <uart_send_char>:
 4dc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4e0:	95 ff       	sbrs	r25, 5
 4e2:	fc cf       	rjmp	.-8      	; 0x4dc <uart_send_char>
 4e4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 4e8:	08 95       	ret

000004ea <uart_send_string>:
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	ec 01       	movw	r28, r24
 4f0:	03 c0       	rjmp	.+6      	; 0x4f8 <uart_send_string+0xe>
 4f2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <uart_send_char>
 4f6:	21 96       	adiw	r28, 0x01	; 1
 4f8:	88 81       	ld	r24, Y
 4fa:	81 11       	cpse	r24, r1
 4fc:	fa cf       	rjmp	.-12     	; 0x4f2 <uart_send_string+0x8>
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <uart_send_newline>:
 504:	8d e0       	ldi	r24, 0x0D	; 13
 506:	0e 94 6e 02 	call	0x4dc	; 0x4dc <uart_send_char>
 50a:	8a e0       	ldi	r24, 0x0A	; 10
 50c:	0e 94 6e 02 	call	0x4dc	; 0x4dc <uart_send_char>
 510:	08 95       	ret

00000512 <Carpy>:

void Carpy() {
	uart_send_string("                        90  400     TPFI... CATEDRA:    SISTEMAS DIGITALES IV");
 512:	87 e3       	ldi	r24, 0x37	; 55
 514:	91 e0       	ldi	r25, 0x01	; 1
 516:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
	uart_send_newline();
 51a:	0e 94 82 02 	call	0x504	; 0x504 <uart_send_newline>
	uart_send_string("                     1232800000000                    PROFESORES: ING EDUARDO VELAZQUEZ");
 51e:	85 e8       	ldi	r24, 0x85	; 133
 520:	91 e0       	ldi	r25, 0x01	; 1
 522:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
	uart_send_newline();
 526:	0e 94 82 02 	call	0x504	; 0x504 <uart_send_newline>
	uart_send_string("                400000000000000007                                LIC JULIAN MINATEL   ");
 52a:	8d ed       	ldi	r24, 0xDD	; 221
 52c:	91 e0       	ldi	r25, 0x01	; 1
 52e:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
	uart_send_newline();
 532:	0e 94 82 02 	call	0x504	; 0x504 <uart_send_newline>
	uart_send_string("             400000000000  300000005      NOMBRE: FABRICIO DAVID GALLO                 ");
 536:	85 e3       	ldi	r24, 0x35	; 53
 538:	92 e0       	ldi	r25, 0x02	; 2
 53a:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
	uart_send_newline();
 53e:	0e 94 82 02 	call	0x504	; 0x504 <uart_send_newline>
	uart_send_string("            0000 800000000000000000000                                    ");
 542:	8d e8       	ldi	r24, 0x8D	; 141
 544:	92 e0       	ldi	r25, 0x02	; 2
 546:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
	uart_send_newline();
 54a:	0e 94 82 02 	call	0x504	; 0x504 <uart_send_newline>
	uart_send_string("           40000000000000000000000000000            'CAFETERA' ES UN PROYECTO DONDE SE " );
 54e:	88 ed       	ldi	r24, 0xD8	; 216
 550:	92 e0       	ldi	r25, 0x02	; 2
 552:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
	uart_send_newline();
 556:	0e 94 82 02 	call	0x504	; 0x504 <uart_send_newline>
	uart_send_string("           700000000000000000000000000000007              PUEDEN CONTROLAR TEMPERATURA, ");
 55a:	80 e3       	ldi	r24, 0x30	; 48
 55c:	93 e0       	ldi	r25, 0x03	; 3
 55e:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
	uart_send_newline();
 562:	0e 94 82 02 	call	0x504	; 0x504 <uart_send_newline>
	uart_send_string("            00000000000000000000000000000000000000000004      CANTIDAD DE PREMEZCLA,ETC  ");
 566:	89 e8       	ldi	r24, 0x89	; 137
 568:	93 e0       	ldi	r25, 0x03	; 3
 56a:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
	uart_send_newline();
 56e:	0e 94 82 02 	call	0x504	; 0x504 <uart_send_newline>
	uart_send_string("             800000000000000000000000000000000000000000000001      PARA MODIFICAR ESTOS  ");
 572:	83 ee       	ldi	r24, 0xE3	; 227
 574:	93 e0       	ldi	r25, 0x03	; 3
 576:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
	uart_send_newline();
 57a:	0e 94 82 02 	call	0x504	; 0x504 <uart_send_newline>
	uart_send_string("                  000000000000000000000000000000000000000000006       UTILICE LA UART   " );
 57e:	8d e3       	ldi	r24, 0x3D	; 61
 580:	94 e0       	ldi	r25, 0x04	; 4
 582:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
	uart_send_newline();
 586:	0e 94 82 02 	call	0x504	; 0x504 <uart_send_newline>
	uart_send_string("                     10000000000000000000000000000000000000000001 ");
 58a:	86 e9       	ldi	r24, 0x96	; 150
 58c:	94 e0       	ldi	r25, 0x04	; 4
 58e:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
	uart_send_newline();
 592:	0e 94 82 02 	call	0x504	; 0x504 <uart_send_newline>
	uart_send_string("                      00000000000000000000000000000000000000000000 ");
 596:	89 ed       	ldi	r24, 0xD9	; 217
 598:	94 e0       	ldi	r25, 0x04	; 4
 59a:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
	uart_send_newline();
 59e:	0e 94 82 02 	call	0x504	; 0x504 <uart_send_newline>
	uart_send_string("                        900000000000000000000000000000000000000000000 ");
 5a2:	8d e1       	ldi	r24, 0x1D	; 29
 5a4:	95 e0       	ldi	r25, 0x05	; 5
 5a6:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
	uart_send_newline();
 5aa:	0e 94 82 02 	call	0x504	; 0x504 <uart_send_newline>
	uart_send_string("       1  1             9000000000000000000000000000000000000000000000 ");
 5ae:	84 e6       	ldi	r24, 0x64	; 100
 5b0:	95 e0       	ldi	r25, 0x05	; 5
 5b2:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
	uart_send_newline();
 5b6:	0e 94 82 02 	call	0x504	; 0x504 <uart_send_newline>
	uart_send_string("        1  1             000000000000000000000000000000000000000000000");
 5ba:	8c ea       	ldi	r24, 0xAC	; 172
 5bc:	95 e0       	ldi	r25, 0x05	; 5
 5be:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
	uart_send_newline();
 5c2:	0e 94 82 02 	call	0x504	; 0x504 <uart_send_newline>
	uart_send_string("       1  1              9000000000000000000000000000000000000000000008 ");
 5c6:	83 ef       	ldi	r24, 0xF3	; 243
 5c8:	95 e0       	ldi	r25, 0x05	; 5
 5ca:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
	uart_send_newline();
 5ce:	0e 94 82 02 	call	0x504	; 0x504 <uart_send_newline>
	uart_send_string("     00000000037          600000000000000000000000000000000000000000005 ");
 5d2:	8c e3       	ldi	r24, 0x3C	; 60
 5d4:	96 e0       	ldi	r25, 0x06	; 6
 5d6:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
	uart_send_newline();
 5da:	0e 94 82 02 	call	0x504	; 0x504 <uart_send_newline>
	uart_send_string("     000000009  9          0000000000000000000000000000000000000000000  ");
 5de:	85 e8       	ldi	r24, 0x85	; 133
 5e0:	96 e0       	ldi	r25, 0x06	; 6
 5e2:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
	uart_send_newline();
 5e6:	0e 94 82 02 	call	0x504	; 0x504 <uart_send_newline>
	uart_send_string("     0000000002            900000000000000000000000000000000000000000  ");
 5ea:	8e ec       	ldi	r24, 0xCE	; 206
 5ec:	96 e0       	ldi	r25, 0x06	; 6
 5ee:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
	uart_send_newline();
 5f2:	0e 94 82 02 	call	0x504	; 0x504 <uart_send_newline>
	uart_send_string("     000000009             900 00002 50000000000000000000000000000000   ");
 5f6:	86 e1       	ldi	r24, 0x16	; 22
 5f8:	97 e0       	ldi	r25, 0x07	; 7
 5fa:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
	uart_send_newline();
 5fe:	0e 94 82 02 	call	0x504	; 0x504 <uart_send_newline>
	uart_send_string("     000000006             900 8006       70000000000000000000000000  ");
 602:	8f e5       	ldi	r24, 0x5F	; 95
 604:	97 e0       	ldi	r25, 0x07	; 7
 606:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
	uart_send_newline();
 60a:	0e 94 82 02 	call	0x504	; 0x504 <uart_send_newline>
	uart_send_string("  444666666666445         30006000                50000000000000000   ");
 60e:	86 ea       	ldi	r24, 0xA6	; 166
 610:	97 e0       	ldi	r25, 0x07	; 7
 612:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_send_string>
	uart_send_newline();
 616:	0e 94 82 02 	call	0x504	; 0x504 <uart_send_newline>
 61a:	08 95       	ret

0000061c <sprintf>:
 61c:	ae e0       	ldi	r26, 0x0E	; 14
 61e:	b0 e0       	ldi	r27, 0x00	; 0
 620:	e4 e1       	ldi	r30, 0x14	; 20
 622:	f3 e0       	ldi	r31, 0x03	; 3
 624:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__prologue_saves__+0x1c>
 628:	0d 89       	ldd	r16, Y+21	; 0x15
 62a:	1e 89       	ldd	r17, Y+22	; 0x16
 62c:	86 e0       	ldi	r24, 0x06	; 6
 62e:	8c 83       	std	Y+4, r24	; 0x04
 630:	1a 83       	std	Y+2, r17	; 0x02
 632:	09 83       	std	Y+1, r16	; 0x01
 634:	8f ef       	ldi	r24, 0xFF	; 255
 636:	9f e7       	ldi	r25, 0x7F	; 127
 638:	9e 83       	std	Y+6, r25	; 0x06
 63a:	8d 83       	std	Y+5, r24	; 0x05
 63c:	ae 01       	movw	r20, r28
 63e:	47 5e       	subi	r20, 0xE7	; 231
 640:	5f 4f       	sbci	r21, 0xFF	; 255
 642:	6f 89       	ldd	r22, Y+23	; 0x17
 644:	78 8d       	ldd	r23, Y+24	; 0x18
 646:	ce 01       	movw	r24, r28
 648:	01 96       	adiw	r24, 0x01	; 1
 64a:	0e 94 30 03 	call	0x660	; 0x660 <vfprintf>
 64e:	ef 81       	ldd	r30, Y+7	; 0x07
 650:	f8 85       	ldd	r31, Y+8	; 0x08
 652:	e0 0f       	add	r30, r16
 654:	f1 1f       	adc	r31, r17
 656:	10 82       	st	Z, r1
 658:	2e 96       	adiw	r28, 0x0e	; 14
 65a:	e4 e0       	ldi	r30, 0x04	; 4
 65c:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__epilogue_restores__+0x1c>

00000660 <vfprintf>:
 660:	ab e0       	ldi	r26, 0x0B	; 11
 662:	b0 e0       	ldi	r27, 0x00	; 0
 664:	e6 e3       	ldi	r30, 0x36	; 54
 666:	f3 e0       	ldi	r31, 0x03	; 3
 668:	0c 94 d7 05 	jmp	0xbae	; 0xbae <__prologue_saves__>
 66c:	6c 01       	movw	r12, r24
 66e:	7b 01       	movw	r14, r22
 670:	8a 01       	movw	r16, r20
 672:	fc 01       	movw	r30, r24
 674:	17 82       	std	Z+7, r1	; 0x07
 676:	16 82       	std	Z+6, r1	; 0x06
 678:	83 81       	ldd	r24, Z+3	; 0x03
 67a:	81 ff       	sbrs	r24, 1
 67c:	cc c1       	rjmp	.+920    	; 0xa16 <__stack+0x117>
 67e:	ce 01       	movw	r24, r28
 680:	01 96       	adiw	r24, 0x01	; 1
 682:	3c 01       	movw	r6, r24
 684:	f6 01       	movw	r30, r12
 686:	93 81       	ldd	r25, Z+3	; 0x03
 688:	f7 01       	movw	r30, r14
 68a:	93 fd       	sbrc	r25, 3
 68c:	85 91       	lpm	r24, Z+
 68e:	93 ff       	sbrs	r25, 3
 690:	81 91       	ld	r24, Z+
 692:	7f 01       	movw	r14, r30
 694:	88 23       	and	r24, r24
 696:	09 f4       	brne	.+2      	; 0x69a <vfprintf+0x3a>
 698:	ba c1       	rjmp	.+884    	; 0xa0e <__stack+0x10f>
 69a:	85 32       	cpi	r24, 0x25	; 37
 69c:	39 f4       	brne	.+14     	; 0x6ac <vfprintf+0x4c>
 69e:	93 fd       	sbrc	r25, 3
 6a0:	85 91       	lpm	r24, Z+
 6a2:	93 ff       	sbrs	r25, 3
 6a4:	81 91       	ld	r24, Z+
 6a6:	7f 01       	movw	r14, r30
 6a8:	85 32       	cpi	r24, 0x25	; 37
 6aa:	29 f4       	brne	.+10     	; 0x6b6 <vfprintf+0x56>
 6ac:	b6 01       	movw	r22, r12
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	0e 94 27 05 	call	0xa4e	; 0xa4e <fputc>
 6b4:	e7 cf       	rjmp	.-50     	; 0x684 <vfprintf+0x24>
 6b6:	91 2c       	mov	r9, r1
 6b8:	21 2c       	mov	r2, r1
 6ba:	31 2c       	mov	r3, r1
 6bc:	ff e1       	ldi	r31, 0x1F	; 31
 6be:	f3 15       	cp	r31, r3
 6c0:	d8 f0       	brcs	.+54     	; 0x6f8 <vfprintf+0x98>
 6c2:	8b 32       	cpi	r24, 0x2B	; 43
 6c4:	79 f0       	breq	.+30     	; 0x6e4 <vfprintf+0x84>
 6c6:	38 f4       	brcc	.+14     	; 0x6d6 <vfprintf+0x76>
 6c8:	80 32       	cpi	r24, 0x20	; 32
 6ca:	79 f0       	breq	.+30     	; 0x6ea <vfprintf+0x8a>
 6cc:	83 32       	cpi	r24, 0x23	; 35
 6ce:	a1 f4       	brne	.+40     	; 0x6f8 <vfprintf+0x98>
 6d0:	23 2d       	mov	r18, r3
 6d2:	20 61       	ori	r18, 0x10	; 16
 6d4:	1d c0       	rjmp	.+58     	; 0x710 <vfprintf+0xb0>
 6d6:	8d 32       	cpi	r24, 0x2D	; 45
 6d8:	61 f0       	breq	.+24     	; 0x6f2 <vfprintf+0x92>
 6da:	80 33       	cpi	r24, 0x30	; 48
 6dc:	69 f4       	brne	.+26     	; 0x6f8 <vfprintf+0x98>
 6de:	23 2d       	mov	r18, r3
 6e0:	21 60       	ori	r18, 0x01	; 1
 6e2:	16 c0       	rjmp	.+44     	; 0x710 <vfprintf+0xb0>
 6e4:	83 2d       	mov	r24, r3
 6e6:	82 60       	ori	r24, 0x02	; 2
 6e8:	38 2e       	mov	r3, r24
 6ea:	e3 2d       	mov	r30, r3
 6ec:	e4 60       	ori	r30, 0x04	; 4
 6ee:	3e 2e       	mov	r3, r30
 6f0:	2a c0       	rjmp	.+84     	; 0x746 <vfprintf+0xe6>
 6f2:	f3 2d       	mov	r31, r3
 6f4:	f8 60       	ori	r31, 0x08	; 8
 6f6:	1d c0       	rjmp	.+58     	; 0x732 <vfprintf+0xd2>
 6f8:	37 fc       	sbrc	r3, 7
 6fa:	2d c0       	rjmp	.+90     	; 0x756 <vfprintf+0xf6>
 6fc:	20 ed       	ldi	r18, 0xD0	; 208
 6fe:	28 0f       	add	r18, r24
 700:	2a 30       	cpi	r18, 0x0A	; 10
 702:	40 f0       	brcs	.+16     	; 0x714 <vfprintf+0xb4>
 704:	8e 32       	cpi	r24, 0x2E	; 46
 706:	b9 f4       	brne	.+46     	; 0x736 <vfprintf+0xd6>
 708:	36 fc       	sbrc	r3, 6
 70a:	81 c1       	rjmp	.+770    	; 0xa0e <__stack+0x10f>
 70c:	23 2d       	mov	r18, r3
 70e:	20 64       	ori	r18, 0x40	; 64
 710:	32 2e       	mov	r3, r18
 712:	19 c0       	rjmp	.+50     	; 0x746 <vfprintf+0xe6>
 714:	36 fe       	sbrs	r3, 6
 716:	06 c0       	rjmp	.+12     	; 0x724 <vfprintf+0xc4>
 718:	8a e0       	ldi	r24, 0x0A	; 10
 71a:	98 9e       	mul	r9, r24
 71c:	20 0d       	add	r18, r0
 71e:	11 24       	eor	r1, r1
 720:	92 2e       	mov	r9, r18
 722:	11 c0       	rjmp	.+34     	; 0x746 <vfprintf+0xe6>
 724:	ea e0       	ldi	r30, 0x0A	; 10
 726:	2e 9e       	mul	r2, r30
 728:	20 0d       	add	r18, r0
 72a:	11 24       	eor	r1, r1
 72c:	22 2e       	mov	r2, r18
 72e:	f3 2d       	mov	r31, r3
 730:	f0 62       	ori	r31, 0x20	; 32
 732:	3f 2e       	mov	r3, r31
 734:	08 c0       	rjmp	.+16     	; 0x746 <vfprintf+0xe6>
 736:	8c 36       	cpi	r24, 0x6C	; 108
 738:	21 f4       	brne	.+8      	; 0x742 <vfprintf+0xe2>
 73a:	83 2d       	mov	r24, r3
 73c:	80 68       	ori	r24, 0x80	; 128
 73e:	38 2e       	mov	r3, r24
 740:	02 c0       	rjmp	.+4      	; 0x746 <vfprintf+0xe6>
 742:	88 36       	cpi	r24, 0x68	; 104
 744:	41 f4       	brne	.+16     	; 0x756 <vfprintf+0xf6>
 746:	f7 01       	movw	r30, r14
 748:	93 fd       	sbrc	r25, 3
 74a:	85 91       	lpm	r24, Z+
 74c:	93 ff       	sbrs	r25, 3
 74e:	81 91       	ld	r24, Z+
 750:	7f 01       	movw	r14, r30
 752:	81 11       	cpse	r24, r1
 754:	b3 cf       	rjmp	.-154    	; 0x6bc <vfprintf+0x5c>
 756:	98 2f       	mov	r25, r24
 758:	9f 7d       	andi	r25, 0xDF	; 223
 75a:	95 54       	subi	r25, 0x45	; 69
 75c:	93 30       	cpi	r25, 0x03	; 3
 75e:	28 f4       	brcc	.+10     	; 0x76a <vfprintf+0x10a>
 760:	0c 5f       	subi	r16, 0xFC	; 252
 762:	1f 4f       	sbci	r17, 0xFF	; 255
 764:	9f e3       	ldi	r25, 0x3F	; 63
 766:	99 83       	std	Y+1, r25	; 0x01
 768:	0d c0       	rjmp	.+26     	; 0x784 <vfprintf+0x124>
 76a:	83 36       	cpi	r24, 0x63	; 99
 76c:	31 f0       	breq	.+12     	; 0x77a <vfprintf+0x11a>
 76e:	83 37       	cpi	r24, 0x73	; 115
 770:	71 f0       	breq	.+28     	; 0x78e <vfprintf+0x12e>
 772:	83 35       	cpi	r24, 0x53	; 83
 774:	09 f0       	breq	.+2      	; 0x778 <vfprintf+0x118>
 776:	59 c0       	rjmp	.+178    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 778:	21 c0       	rjmp	.+66     	; 0x7bc <vfprintf+0x15c>
 77a:	f8 01       	movw	r30, r16
 77c:	80 81       	ld	r24, Z
 77e:	89 83       	std	Y+1, r24	; 0x01
 780:	0e 5f       	subi	r16, 0xFE	; 254
 782:	1f 4f       	sbci	r17, 0xFF	; 255
 784:	88 24       	eor	r8, r8
 786:	83 94       	inc	r8
 788:	91 2c       	mov	r9, r1
 78a:	53 01       	movw	r10, r6
 78c:	13 c0       	rjmp	.+38     	; 0x7b4 <vfprintf+0x154>
 78e:	28 01       	movw	r4, r16
 790:	f2 e0       	ldi	r31, 0x02	; 2
 792:	4f 0e       	add	r4, r31
 794:	51 1c       	adc	r5, r1
 796:	f8 01       	movw	r30, r16
 798:	a0 80       	ld	r10, Z
 79a:	b1 80       	ldd	r11, Z+1	; 0x01
 79c:	36 fe       	sbrs	r3, 6
 79e:	03 c0       	rjmp	.+6      	; 0x7a6 <vfprintf+0x146>
 7a0:	69 2d       	mov	r22, r9
 7a2:	70 e0       	ldi	r23, 0x00	; 0
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <vfprintf+0x14a>
 7a6:	6f ef       	ldi	r22, 0xFF	; 255
 7a8:	7f ef       	ldi	r23, 0xFF	; 255
 7aa:	c5 01       	movw	r24, r10
 7ac:	0e 94 1c 05 	call	0xa38	; 0xa38 <strnlen>
 7b0:	4c 01       	movw	r8, r24
 7b2:	82 01       	movw	r16, r4
 7b4:	f3 2d       	mov	r31, r3
 7b6:	ff 77       	andi	r31, 0x7F	; 127
 7b8:	3f 2e       	mov	r3, r31
 7ba:	16 c0       	rjmp	.+44     	; 0x7e8 <vfprintf+0x188>
 7bc:	28 01       	movw	r4, r16
 7be:	22 e0       	ldi	r18, 0x02	; 2
 7c0:	42 0e       	add	r4, r18
 7c2:	51 1c       	adc	r5, r1
 7c4:	f8 01       	movw	r30, r16
 7c6:	a0 80       	ld	r10, Z
 7c8:	b1 80       	ldd	r11, Z+1	; 0x01
 7ca:	36 fe       	sbrs	r3, 6
 7cc:	03 c0       	rjmp	.+6      	; 0x7d4 <vfprintf+0x174>
 7ce:	69 2d       	mov	r22, r9
 7d0:	70 e0       	ldi	r23, 0x00	; 0
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <vfprintf+0x178>
 7d4:	6f ef       	ldi	r22, 0xFF	; 255
 7d6:	7f ef       	ldi	r23, 0xFF	; 255
 7d8:	c5 01       	movw	r24, r10
 7da:	0e 94 11 05 	call	0xa22	; 0xa22 <strnlen_P>
 7de:	4c 01       	movw	r8, r24
 7e0:	f3 2d       	mov	r31, r3
 7e2:	f0 68       	ori	r31, 0x80	; 128
 7e4:	3f 2e       	mov	r3, r31
 7e6:	82 01       	movw	r16, r4
 7e8:	33 fc       	sbrc	r3, 3
 7ea:	1b c0       	rjmp	.+54     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 7ec:	82 2d       	mov	r24, r2
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	88 16       	cp	r8, r24
 7f2:	99 06       	cpc	r9, r25
 7f4:	b0 f4       	brcc	.+44     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 7f6:	b6 01       	movw	r22, r12
 7f8:	80 e2       	ldi	r24, 0x20	; 32
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	0e 94 27 05 	call	0xa4e	; 0xa4e <fputc>
 800:	2a 94       	dec	r2
 802:	f4 cf       	rjmp	.-24     	; 0x7ec <vfprintf+0x18c>
 804:	f5 01       	movw	r30, r10
 806:	37 fc       	sbrc	r3, 7
 808:	85 91       	lpm	r24, Z+
 80a:	37 fe       	sbrs	r3, 7
 80c:	81 91       	ld	r24, Z+
 80e:	5f 01       	movw	r10, r30
 810:	b6 01       	movw	r22, r12
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	0e 94 27 05 	call	0xa4e	; 0xa4e <fputc>
 818:	21 10       	cpse	r2, r1
 81a:	2a 94       	dec	r2
 81c:	21 e0       	ldi	r18, 0x01	; 1
 81e:	82 1a       	sub	r8, r18
 820:	91 08       	sbc	r9, r1
 822:	81 14       	cp	r8, r1
 824:	91 04       	cpc	r9, r1
 826:	71 f7       	brne	.-36     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 828:	e8 c0       	rjmp	.+464    	; 0x9fa <__stack+0xfb>
 82a:	84 36       	cpi	r24, 0x64	; 100
 82c:	11 f0       	breq	.+4      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 82e:	89 36       	cpi	r24, 0x69	; 105
 830:	41 f5       	brne	.+80     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 832:	f8 01       	movw	r30, r16
 834:	37 fe       	sbrs	r3, 7
 836:	07 c0       	rjmp	.+14     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 838:	60 81       	ld	r22, Z
 83a:	71 81       	ldd	r23, Z+1	; 0x01
 83c:	82 81       	ldd	r24, Z+2	; 0x02
 83e:	93 81       	ldd	r25, Z+3	; 0x03
 840:	0c 5f       	subi	r16, 0xFC	; 252
 842:	1f 4f       	sbci	r17, 0xFF	; 255
 844:	08 c0       	rjmp	.+16     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 846:	60 81       	ld	r22, Z
 848:	71 81       	ldd	r23, Z+1	; 0x01
 84a:	07 2e       	mov	r0, r23
 84c:	00 0c       	add	r0, r0
 84e:	88 0b       	sbc	r24, r24
 850:	99 0b       	sbc	r25, r25
 852:	0e 5f       	subi	r16, 0xFE	; 254
 854:	1f 4f       	sbci	r17, 0xFF	; 255
 856:	f3 2d       	mov	r31, r3
 858:	ff 76       	andi	r31, 0x6F	; 111
 85a:	3f 2e       	mov	r3, r31
 85c:	97 ff       	sbrs	r25, 7
 85e:	09 c0       	rjmp	.+18     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 860:	90 95       	com	r25
 862:	80 95       	com	r24
 864:	70 95       	com	r23
 866:	61 95       	neg	r22
 868:	7f 4f       	sbci	r23, 0xFF	; 255
 86a:	8f 4f       	sbci	r24, 0xFF	; 255
 86c:	9f 4f       	sbci	r25, 0xFF	; 255
 86e:	f0 68       	ori	r31, 0x80	; 128
 870:	3f 2e       	mov	r3, r31
 872:	2a e0       	ldi	r18, 0x0A	; 10
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	a3 01       	movw	r20, r6
 878:	0e 94 63 05 	call	0xac6	; 0xac6 <__ultoa_invert>
 87c:	88 2e       	mov	r8, r24
 87e:	86 18       	sub	r8, r6
 880:	45 c0       	rjmp	.+138    	; 0x90c <__stack+0xd>
 882:	85 37       	cpi	r24, 0x75	; 117
 884:	31 f4       	brne	.+12     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
 886:	23 2d       	mov	r18, r3
 888:	2f 7e       	andi	r18, 0xEF	; 239
 88a:	b2 2e       	mov	r11, r18
 88c:	2a e0       	ldi	r18, 0x0A	; 10
 88e:	30 e0       	ldi	r19, 0x00	; 0
 890:	25 c0       	rjmp	.+74     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 892:	93 2d       	mov	r25, r3
 894:	99 7f       	andi	r25, 0xF9	; 249
 896:	b9 2e       	mov	r11, r25
 898:	8f 36       	cpi	r24, 0x6F	; 111
 89a:	c1 f0       	breq	.+48     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
 89c:	18 f4       	brcc	.+6      	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 89e:	88 35       	cpi	r24, 0x58	; 88
 8a0:	79 f0       	breq	.+30     	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 8a2:	b5 c0       	rjmp	.+362    	; 0xa0e <__stack+0x10f>
 8a4:	80 37       	cpi	r24, 0x70	; 112
 8a6:	19 f0       	breq	.+6      	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
 8a8:	88 37       	cpi	r24, 0x78	; 120
 8aa:	21 f0       	breq	.+8      	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
 8ac:	b0 c0       	rjmp	.+352    	; 0xa0e <__stack+0x10f>
 8ae:	e9 2f       	mov	r30, r25
 8b0:	e0 61       	ori	r30, 0x10	; 16
 8b2:	be 2e       	mov	r11, r30
 8b4:	b4 fe       	sbrs	r11, 4
 8b6:	0d c0       	rjmp	.+26     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 8b8:	fb 2d       	mov	r31, r11
 8ba:	f4 60       	ori	r31, 0x04	; 4
 8bc:	bf 2e       	mov	r11, r31
 8be:	09 c0       	rjmp	.+18     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 8c0:	34 fe       	sbrs	r3, 4
 8c2:	0a c0       	rjmp	.+20     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
 8c4:	29 2f       	mov	r18, r25
 8c6:	26 60       	ori	r18, 0x06	; 6
 8c8:	b2 2e       	mov	r11, r18
 8ca:	06 c0       	rjmp	.+12     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
 8cc:	28 e0       	ldi	r18, 0x08	; 8
 8ce:	30 e0       	ldi	r19, 0x00	; 0
 8d0:	05 c0       	rjmp	.+10     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8d2:	20 e1       	ldi	r18, 0x10	; 16
 8d4:	30 e0       	ldi	r19, 0x00	; 0
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8d8:	20 e1       	ldi	r18, 0x10	; 16
 8da:	32 e0       	ldi	r19, 0x02	; 2
 8dc:	f8 01       	movw	r30, r16
 8de:	b7 fe       	sbrs	r11, 7
 8e0:	07 c0       	rjmp	.+14     	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
 8e2:	60 81       	ld	r22, Z
 8e4:	71 81       	ldd	r23, Z+1	; 0x01
 8e6:	82 81       	ldd	r24, Z+2	; 0x02
 8e8:	93 81       	ldd	r25, Z+3	; 0x03
 8ea:	0c 5f       	subi	r16, 0xFC	; 252
 8ec:	1f 4f       	sbci	r17, 0xFF	; 255
 8ee:	06 c0       	rjmp	.+12     	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
 8f0:	60 81       	ld	r22, Z
 8f2:	71 81       	ldd	r23, Z+1	; 0x01
 8f4:	80 e0       	ldi	r24, 0x00	; 0
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	0e 5f       	subi	r16, 0xFE	; 254
 8fa:	1f 4f       	sbci	r17, 0xFF	; 255
 8fc:	a3 01       	movw	r20, r6
 8fe:	0e 94 63 05 	call	0xac6	; 0xac6 <__ultoa_invert>
 902:	88 2e       	mov	r8, r24
 904:	86 18       	sub	r8, r6
 906:	fb 2d       	mov	r31, r11
 908:	ff 77       	andi	r31, 0x7F	; 127
 90a:	3f 2e       	mov	r3, r31
 90c:	36 fe       	sbrs	r3, 6
 90e:	0d c0       	rjmp	.+26     	; 0x92a <__stack+0x2b>
 910:	23 2d       	mov	r18, r3
 912:	2e 7f       	andi	r18, 0xFE	; 254
 914:	a2 2e       	mov	r10, r18
 916:	89 14       	cp	r8, r9
 918:	58 f4       	brcc	.+22     	; 0x930 <__stack+0x31>
 91a:	34 fe       	sbrs	r3, 4
 91c:	0b c0       	rjmp	.+22     	; 0x934 <__stack+0x35>
 91e:	32 fc       	sbrc	r3, 2
 920:	09 c0       	rjmp	.+18     	; 0x934 <__stack+0x35>
 922:	83 2d       	mov	r24, r3
 924:	8e 7e       	andi	r24, 0xEE	; 238
 926:	a8 2e       	mov	r10, r24
 928:	05 c0       	rjmp	.+10     	; 0x934 <__stack+0x35>
 92a:	b8 2c       	mov	r11, r8
 92c:	a3 2c       	mov	r10, r3
 92e:	03 c0       	rjmp	.+6      	; 0x936 <__stack+0x37>
 930:	b8 2c       	mov	r11, r8
 932:	01 c0       	rjmp	.+2      	; 0x936 <__stack+0x37>
 934:	b9 2c       	mov	r11, r9
 936:	a4 fe       	sbrs	r10, 4
 938:	0f c0       	rjmp	.+30     	; 0x958 <__stack+0x59>
 93a:	fe 01       	movw	r30, r28
 93c:	e8 0d       	add	r30, r8
 93e:	f1 1d       	adc	r31, r1
 940:	80 81       	ld	r24, Z
 942:	80 33       	cpi	r24, 0x30	; 48
 944:	21 f4       	brne	.+8      	; 0x94e <__stack+0x4f>
 946:	9a 2d       	mov	r25, r10
 948:	99 7e       	andi	r25, 0xE9	; 233
 94a:	a9 2e       	mov	r10, r25
 94c:	09 c0       	rjmp	.+18     	; 0x960 <__stack+0x61>
 94e:	a2 fe       	sbrs	r10, 2
 950:	06 c0       	rjmp	.+12     	; 0x95e <__stack+0x5f>
 952:	b3 94       	inc	r11
 954:	b3 94       	inc	r11
 956:	04 c0       	rjmp	.+8      	; 0x960 <__stack+0x61>
 958:	8a 2d       	mov	r24, r10
 95a:	86 78       	andi	r24, 0x86	; 134
 95c:	09 f0       	breq	.+2      	; 0x960 <__stack+0x61>
 95e:	b3 94       	inc	r11
 960:	a3 fc       	sbrc	r10, 3
 962:	11 c0       	rjmp	.+34     	; 0x986 <__stack+0x87>
 964:	a0 fe       	sbrs	r10, 0
 966:	06 c0       	rjmp	.+12     	; 0x974 <__stack+0x75>
 968:	b2 14       	cp	r11, r2
 96a:	88 f4       	brcc	.+34     	; 0x98e <__stack+0x8f>
 96c:	28 0c       	add	r2, r8
 96e:	92 2c       	mov	r9, r2
 970:	9b 18       	sub	r9, r11
 972:	0e c0       	rjmp	.+28     	; 0x990 <__stack+0x91>
 974:	b2 14       	cp	r11, r2
 976:	60 f4       	brcc	.+24     	; 0x990 <__stack+0x91>
 978:	b6 01       	movw	r22, r12
 97a:	80 e2       	ldi	r24, 0x20	; 32
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	0e 94 27 05 	call	0xa4e	; 0xa4e <fputc>
 982:	b3 94       	inc	r11
 984:	f7 cf       	rjmp	.-18     	; 0x974 <__stack+0x75>
 986:	b2 14       	cp	r11, r2
 988:	18 f4       	brcc	.+6      	; 0x990 <__stack+0x91>
 98a:	2b 18       	sub	r2, r11
 98c:	02 c0       	rjmp	.+4      	; 0x992 <__stack+0x93>
 98e:	98 2c       	mov	r9, r8
 990:	21 2c       	mov	r2, r1
 992:	a4 fe       	sbrs	r10, 4
 994:	10 c0       	rjmp	.+32     	; 0x9b6 <__stack+0xb7>
 996:	b6 01       	movw	r22, r12
 998:	80 e3       	ldi	r24, 0x30	; 48
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	0e 94 27 05 	call	0xa4e	; 0xa4e <fputc>
 9a0:	a2 fe       	sbrs	r10, 2
 9a2:	17 c0       	rjmp	.+46     	; 0x9d2 <__stack+0xd3>
 9a4:	a1 fc       	sbrc	r10, 1
 9a6:	03 c0       	rjmp	.+6      	; 0x9ae <__stack+0xaf>
 9a8:	88 e7       	ldi	r24, 0x78	; 120
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <__stack+0xb3>
 9ae:	88 e5       	ldi	r24, 0x58	; 88
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	b6 01       	movw	r22, r12
 9b4:	0c c0       	rjmp	.+24     	; 0x9ce <__stack+0xcf>
 9b6:	8a 2d       	mov	r24, r10
 9b8:	86 78       	andi	r24, 0x86	; 134
 9ba:	59 f0       	breq	.+22     	; 0x9d2 <__stack+0xd3>
 9bc:	a1 fe       	sbrs	r10, 1
 9be:	02 c0       	rjmp	.+4      	; 0x9c4 <__stack+0xc5>
 9c0:	8b e2       	ldi	r24, 0x2B	; 43
 9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <__stack+0xc7>
 9c4:	80 e2       	ldi	r24, 0x20	; 32
 9c6:	a7 fc       	sbrc	r10, 7
 9c8:	8d e2       	ldi	r24, 0x2D	; 45
 9ca:	b6 01       	movw	r22, r12
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	0e 94 27 05 	call	0xa4e	; 0xa4e <fputc>
 9d2:	89 14       	cp	r8, r9
 9d4:	38 f4       	brcc	.+14     	; 0x9e4 <__stack+0xe5>
 9d6:	b6 01       	movw	r22, r12
 9d8:	80 e3       	ldi	r24, 0x30	; 48
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	0e 94 27 05 	call	0xa4e	; 0xa4e <fputc>
 9e0:	9a 94       	dec	r9
 9e2:	f7 cf       	rjmp	.-18     	; 0x9d2 <__stack+0xd3>
 9e4:	8a 94       	dec	r8
 9e6:	f3 01       	movw	r30, r6
 9e8:	e8 0d       	add	r30, r8
 9ea:	f1 1d       	adc	r31, r1
 9ec:	80 81       	ld	r24, Z
 9ee:	b6 01       	movw	r22, r12
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	0e 94 27 05 	call	0xa4e	; 0xa4e <fputc>
 9f6:	81 10       	cpse	r8, r1
 9f8:	f5 cf       	rjmp	.-22     	; 0x9e4 <__stack+0xe5>
 9fa:	22 20       	and	r2, r2
 9fc:	09 f4       	brne	.+2      	; 0xa00 <__stack+0x101>
 9fe:	42 ce       	rjmp	.-892    	; 0x684 <vfprintf+0x24>
 a00:	b6 01       	movw	r22, r12
 a02:	80 e2       	ldi	r24, 0x20	; 32
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	0e 94 27 05 	call	0xa4e	; 0xa4e <fputc>
 a0a:	2a 94       	dec	r2
 a0c:	f6 cf       	rjmp	.-20     	; 0x9fa <__stack+0xfb>
 a0e:	f6 01       	movw	r30, r12
 a10:	86 81       	ldd	r24, Z+6	; 0x06
 a12:	97 81       	ldd	r25, Z+7	; 0x07
 a14:	02 c0       	rjmp	.+4      	; 0xa1a <__stack+0x11b>
 a16:	8f ef       	ldi	r24, 0xFF	; 255
 a18:	9f ef       	ldi	r25, 0xFF	; 255
 a1a:	2b 96       	adiw	r28, 0x0b	; 11
 a1c:	e2 e1       	ldi	r30, 0x12	; 18
 a1e:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__epilogue_restores__>

00000a22 <strnlen_P>:
 a22:	fc 01       	movw	r30, r24
 a24:	05 90       	lpm	r0, Z+
 a26:	61 50       	subi	r22, 0x01	; 1
 a28:	70 40       	sbci	r23, 0x00	; 0
 a2a:	01 10       	cpse	r0, r1
 a2c:	d8 f7       	brcc	.-10     	; 0xa24 <strnlen_P+0x2>
 a2e:	80 95       	com	r24
 a30:	90 95       	com	r25
 a32:	8e 0f       	add	r24, r30
 a34:	9f 1f       	adc	r25, r31
 a36:	08 95       	ret

00000a38 <strnlen>:
 a38:	fc 01       	movw	r30, r24
 a3a:	61 50       	subi	r22, 0x01	; 1
 a3c:	70 40       	sbci	r23, 0x00	; 0
 a3e:	01 90       	ld	r0, Z+
 a40:	01 10       	cpse	r0, r1
 a42:	d8 f7       	brcc	.-10     	; 0xa3a <strnlen+0x2>
 a44:	80 95       	com	r24
 a46:	90 95       	com	r25
 a48:	8e 0f       	add	r24, r30
 a4a:	9f 1f       	adc	r25, r31
 a4c:	08 95       	ret

00000a4e <fputc>:
 a4e:	0f 93       	push	r16
 a50:	1f 93       	push	r17
 a52:	cf 93       	push	r28
 a54:	df 93       	push	r29
 a56:	fb 01       	movw	r30, r22
 a58:	23 81       	ldd	r18, Z+3	; 0x03
 a5a:	21 fd       	sbrc	r18, 1
 a5c:	03 c0       	rjmp	.+6      	; 0xa64 <fputc+0x16>
 a5e:	8f ef       	ldi	r24, 0xFF	; 255
 a60:	9f ef       	ldi	r25, 0xFF	; 255
 a62:	2c c0       	rjmp	.+88     	; 0xabc <fputc+0x6e>
 a64:	22 ff       	sbrs	r18, 2
 a66:	16 c0       	rjmp	.+44     	; 0xa94 <fputc+0x46>
 a68:	46 81       	ldd	r20, Z+6	; 0x06
 a6a:	57 81       	ldd	r21, Z+7	; 0x07
 a6c:	24 81       	ldd	r18, Z+4	; 0x04
 a6e:	35 81       	ldd	r19, Z+5	; 0x05
 a70:	42 17       	cp	r20, r18
 a72:	53 07       	cpc	r21, r19
 a74:	44 f4       	brge	.+16     	; 0xa86 <fputc+0x38>
 a76:	a0 81       	ld	r26, Z
 a78:	b1 81       	ldd	r27, Z+1	; 0x01
 a7a:	9d 01       	movw	r18, r26
 a7c:	2f 5f       	subi	r18, 0xFF	; 255
 a7e:	3f 4f       	sbci	r19, 0xFF	; 255
 a80:	31 83       	std	Z+1, r19	; 0x01
 a82:	20 83       	st	Z, r18
 a84:	8c 93       	st	X, r24
 a86:	26 81       	ldd	r18, Z+6	; 0x06
 a88:	37 81       	ldd	r19, Z+7	; 0x07
 a8a:	2f 5f       	subi	r18, 0xFF	; 255
 a8c:	3f 4f       	sbci	r19, 0xFF	; 255
 a8e:	37 83       	std	Z+7, r19	; 0x07
 a90:	26 83       	std	Z+6, r18	; 0x06
 a92:	14 c0       	rjmp	.+40     	; 0xabc <fputc+0x6e>
 a94:	8b 01       	movw	r16, r22
 a96:	ec 01       	movw	r28, r24
 a98:	fb 01       	movw	r30, r22
 a9a:	00 84       	ldd	r0, Z+8	; 0x08
 a9c:	f1 85       	ldd	r31, Z+9	; 0x09
 a9e:	e0 2d       	mov	r30, r0
 aa0:	09 95       	icall
 aa2:	89 2b       	or	r24, r25
 aa4:	e1 f6       	brne	.-72     	; 0xa5e <fputc+0x10>
 aa6:	d8 01       	movw	r26, r16
 aa8:	16 96       	adiw	r26, 0x06	; 6
 aaa:	8d 91       	ld	r24, X+
 aac:	9c 91       	ld	r25, X
 aae:	17 97       	sbiw	r26, 0x07	; 7
 ab0:	01 96       	adiw	r24, 0x01	; 1
 ab2:	17 96       	adiw	r26, 0x07	; 7
 ab4:	9c 93       	st	X, r25
 ab6:	8e 93       	st	-X, r24
 ab8:	16 97       	sbiw	r26, 0x06	; 6
 aba:	ce 01       	movw	r24, r28
 abc:	df 91       	pop	r29
 abe:	cf 91       	pop	r28
 ac0:	1f 91       	pop	r17
 ac2:	0f 91       	pop	r16
 ac4:	08 95       	ret

00000ac6 <__ultoa_invert>:
 ac6:	fa 01       	movw	r30, r20
 ac8:	aa 27       	eor	r26, r26
 aca:	28 30       	cpi	r18, 0x08	; 8
 acc:	51 f1       	breq	.+84     	; 0xb22 <__ultoa_invert+0x5c>
 ace:	20 31       	cpi	r18, 0x10	; 16
 ad0:	81 f1       	breq	.+96     	; 0xb32 <__ultoa_invert+0x6c>
 ad2:	e8 94       	clt
 ad4:	6f 93       	push	r22
 ad6:	6e 7f       	andi	r22, 0xFE	; 254
 ad8:	6e 5f       	subi	r22, 0xFE	; 254
 ada:	7f 4f       	sbci	r23, 0xFF	; 255
 adc:	8f 4f       	sbci	r24, 0xFF	; 255
 ade:	9f 4f       	sbci	r25, 0xFF	; 255
 ae0:	af 4f       	sbci	r26, 0xFF	; 255
 ae2:	b1 e0       	ldi	r27, 0x01	; 1
 ae4:	3e d0       	rcall	.+124    	; 0xb62 <__ultoa_invert+0x9c>
 ae6:	b4 e0       	ldi	r27, 0x04	; 4
 ae8:	3c d0       	rcall	.+120    	; 0xb62 <__ultoa_invert+0x9c>
 aea:	67 0f       	add	r22, r23
 aec:	78 1f       	adc	r23, r24
 aee:	89 1f       	adc	r24, r25
 af0:	9a 1f       	adc	r25, r26
 af2:	a1 1d       	adc	r26, r1
 af4:	68 0f       	add	r22, r24
 af6:	79 1f       	adc	r23, r25
 af8:	8a 1f       	adc	r24, r26
 afa:	91 1d       	adc	r25, r1
 afc:	a1 1d       	adc	r26, r1
 afe:	6a 0f       	add	r22, r26
 b00:	71 1d       	adc	r23, r1
 b02:	81 1d       	adc	r24, r1
 b04:	91 1d       	adc	r25, r1
 b06:	a1 1d       	adc	r26, r1
 b08:	20 d0       	rcall	.+64     	; 0xb4a <__ultoa_invert+0x84>
 b0a:	09 f4       	brne	.+2      	; 0xb0e <__ultoa_invert+0x48>
 b0c:	68 94       	set
 b0e:	3f 91       	pop	r19
 b10:	2a e0       	ldi	r18, 0x0A	; 10
 b12:	26 9f       	mul	r18, r22
 b14:	11 24       	eor	r1, r1
 b16:	30 19       	sub	r19, r0
 b18:	30 5d       	subi	r19, 0xD0	; 208
 b1a:	31 93       	st	Z+, r19
 b1c:	de f6       	brtc	.-74     	; 0xad4 <__ultoa_invert+0xe>
 b1e:	cf 01       	movw	r24, r30
 b20:	08 95       	ret
 b22:	46 2f       	mov	r20, r22
 b24:	47 70       	andi	r20, 0x07	; 7
 b26:	40 5d       	subi	r20, 0xD0	; 208
 b28:	41 93       	st	Z+, r20
 b2a:	b3 e0       	ldi	r27, 0x03	; 3
 b2c:	0f d0       	rcall	.+30     	; 0xb4c <__ultoa_invert+0x86>
 b2e:	c9 f7       	brne	.-14     	; 0xb22 <__ultoa_invert+0x5c>
 b30:	f6 cf       	rjmp	.-20     	; 0xb1e <__ultoa_invert+0x58>
 b32:	46 2f       	mov	r20, r22
 b34:	4f 70       	andi	r20, 0x0F	; 15
 b36:	40 5d       	subi	r20, 0xD0	; 208
 b38:	4a 33       	cpi	r20, 0x3A	; 58
 b3a:	18 f0       	brcs	.+6      	; 0xb42 <__ultoa_invert+0x7c>
 b3c:	49 5d       	subi	r20, 0xD9	; 217
 b3e:	31 fd       	sbrc	r19, 1
 b40:	40 52       	subi	r20, 0x20	; 32
 b42:	41 93       	st	Z+, r20
 b44:	02 d0       	rcall	.+4      	; 0xb4a <__ultoa_invert+0x84>
 b46:	a9 f7       	brne	.-22     	; 0xb32 <__ultoa_invert+0x6c>
 b48:	ea cf       	rjmp	.-44     	; 0xb1e <__ultoa_invert+0x58>
 b4a:	b4 e0       	ldi	r27, 0x04	; 4
 b4c:	a6 95       	lsr	r26
 b4e:	97 95       	ror	r25
 b50:	87 95       	ror	r24
 b52:	77 95       	ror	r23
 b54:	67 95       	ror	r22
 b56:	ba 95       	dec	r27
 b58:	c9 f7       	brne	.-14     	; 0xb4c <__ultoa_invert+0x86>
 b5a:	00 97       	sbiw	r24, 0x00	; 0
 b5c:	61 05       	cpc	r22, r1
 b5e:	71 05       	cpc	r23, r1
 b60:	08 95       	ret
 b62:	9b 01       	movw	r18, r22
 b64:	ac 01       	movw	r20, r24
 b66:	0a 2e       	mov	r0, r26
 b68:	06 94       	lsr	r0
 b6a:	57 95       	ror	r21
 b6c:	47 95       	ror	r20
 b6e:	37 95       	ror	r19
 b70:	27 95       	ror	r18
 b72:	ba 95       	dec	r27
 b74:	c9 f7       	brne	.-14     	; 0xb68 <__ultoa_invert+0xa2>
 b76:	62 0f       	add	r22, r18
 b78:	73 1f       	adc	r23, r19
 b7a:	84 1f       	adc	r24, r20
 b7c:	95 1f       	adc	r25, r21
 b7e:	a0 1d       	adc	r26, r0
 b80:	08 95       	ret

00000b82 <eeprom_read_byte>:
 b82:	f9 99       	sbic	0x1f, 1	; 31
 b84:	fe cf       	rjmp	.-4      	; 0xb82 <eeprom_read_byte>
 b86:	92 bd       	out	0x22, r25	; 34
 b88:	81 bd       	out	0x21, r24	; 33
 b8a:	f8 9a       	sbi	0x1f, 0	; 31
 b8c:	99 27       	eor	r25, r25
 b8e:	80 b5       	in	r24, 0x20	; 32
 b90:	08 95       	ret

00000b92 <eeprom_write_byte>:
 b92:	26 2f       	mov	r18, r22

00000b94 <eeprom_write_r18>:
 b94:	f9 99       	sbic	0x1f, 1	; 31
 b96:	fe cf       	rjmp	.-4      	; 0xb94 <eeprom_write_r18>
 b98:	1f ba       	out	0x1f, r1	; 31
 b9a:	92 bd       	out	0x22, r25	; 34
 b9c:	81 bd       	out	0x21, r24	; 33
 b9e:	20 bd       	out	0x20, r18	; 32
 ba0:	0f b6       	in	r0, 0x3f	; 63
 ba2:	f8 94       	cli
 ba4:	fa 9a       	sbi	0x1f, 2	; 31
 ba6:	f9 9a       	sbi	0x1f, 1	; 31
 ba8:	0f be       	out	0x3f, r0	; 63
 baa:	01 96       	adiw	r24, 0x01	; 1
 bac:	08 95       	ret

00000bae <__prologue_saves__>:
 bae:	2f 92       	push	r2
 bb0:	3f 92       	push	r3
 bb2:	4f 92       	push	r4
 bb4:	5f 92       	push	r5
 bb6:	6f 92       	push	r6
 bb8:	7f 92       	push	r7
 bba:	8f 92       	push	r8
 bbc:	9f 92       	push	r9
 bbe:	af 92       	push	r10
 bc0:	bf 92       	push	r11
 bc2:	cf 92       	push	r12
 bc4:	df 92       	push	r13
 bc6:	ef 92       	push	r14
 bc8:	ff 92       	push	r15
 bca:	0f 93       	push	r16
 bcc:	1f 93       	push	r17
 bce:	cf 93       	push	r28
 bd0:	df 93       	push	r29
 bd2:	cd b7       	in	r28, 0x3d	; 61
 bd4:	de b7       	in	r29, 0x3e	; 62
 bd6:	ca 1b       	sub	r28, r26
 bd8:	db 0b       	sbc	r29, r27
 bda:	0f b6       	in	r0, 0x3f	; 63
 bdc:	f8 94       	cli
 bde:	de bf       	out	0x3e, r29	; 62
 be0:	0f be       	out	0x3f, r0	; 63
 be2:	cd bf       	out	0x3d, r28	; 61
 be4:	09 94       	ijmp

00000be6 <__epilogue_restores__>:
 be6:	2a 88       	ldd	r2, Y+18	; 0x12
 be8:	39 88       	ldd	r3, Y+17	; 0x11
 bea:	48 88       	ldd	r4, Y+16	; 0x10
 bec:	5f 84       	ldd	r5, Y+15	; 0x0f
 bee:	6e 84       	ldd	r6, Y+14	; 0x0e
 bf0:	7d 84       	ldd	r7, Y+13	; 0x0d
 bf2:	8c 84       	ldd	r8, Y+12	; 0x0c
 bf4:	9b 84       	ldd	r9, Y+11	; 0x0b
 bf6:	aa 84       	ldd	r10, Y+10	; 0x0a
 bf8:	b9 84       	ldd	r11, Y+9	; 0x09
 bfa:	c8 84       	ldd	r12, Y+8	; 0x08
 bfc:	df 80       	ldd	r13, Y+7	; 0x07
 bfe:	ee 80       	ldd	r14, Y+6	; 0x06
 c00:	fd 80       	ldd	r15, Y+5	; 0x05
 c02:	0c 81       	ldd	r16, Y+4	; 0x04
 c04:	1b 81       	ldd	r17, Y+3	; 0x03
 c06:	aa 81       	ldd	r26, Y+2	; 0x02
 c08:	b9 81       	ldd	r27, Y+1	; 0x01
 c0a:	ce 0f       	add	r28, r30
 c0c:	d1 1d       	adc	r29, r1
 c0e:	0f b6       	in	r0, 0x3f	; 63
 c10:	f8 94       	cli
 c12:	de bf       	out	0x3e, r29	; 62
 c14:	0f be       	out	0x3f, r0	; 63
 c16:	cd bf       	out	0x3d, r28	; 61
 c18:	ed 01       	movw	r28, r26
 c1a:	08 95       	ret

00000c1c <_exit>:
 c1c:	f8 94       	cli

00000c1e <__stop_program>:
 c1e:	ff cf       	rjmp	.-2      	; 0xc1e <__stop_program>
