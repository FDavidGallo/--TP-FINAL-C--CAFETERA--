
tP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  00001816  000018aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001816  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  0080018c  0080018c  00001936  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001936  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001994  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  000019d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a36  00000000  00000000  00001c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f6b  00000000  00000000  000046c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001954  00000000  00000000  0000562d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000728  00000000  00000000  00006f84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000abc  00000000  00000000  000076ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012c7  00000000  00000000  00008168  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  0000942f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e1       	ldi	r30, 0x16	; 22
      7c:	f8 e1       	ldi	r31, 0x18	; 24
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 38       	cpi	r26, 0x8C	; 140
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ac e8       	ldi	r26, 0x8C	; 140
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 3d       	cpi	r26, 0xD9	; 217
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <main>
      9e:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <iniciar_ADC>:


#include "ADC.h"

void iniciar_ADC(void){
ADMUX |= (1 << REFS0); // Voltaje de referencia AVCC con capacitor externo en AREF (tension de referencia)
      a6:	ec e7       	ldi	r30, 0x7C	; 124
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	80 81       	ld	r24, Z
      ac:	80 64       	ori	r24, 0x40	; 64
      ae:	80 83       	st	Z, r24
ADMUX &= ~(1 << ADLAR); // ADC derecho justificado, los bits mas significativos se ubicaran en los bits mas altos del registo de resultado ADC
      b0:	80 81       	ld	r24, Z
      b2:	8f 7d       	andi	r24, 0xDF	; 223
      b4:	80 83       	st	Z, r24
ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //Prescaler en 128, divide la frecuencia del ADC por 128, esto hace que la conversion sea mas lenta pero precisa.
      b6:	ea e7       	ldi	r30, 0x7A	; 122
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	80 81       	ld	r24, Z
      bc:	87 60       	ori	r24, 0x07	; 7
      be:	80 83       	st	Z, r24
ADCSRA |= (1 << ADEN); // Habilita el ADC, el bit ADEN en 1 permite que se realicen las conversiones ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
      c6:	08 95       	ret

000000c8 <leer_ADC>:
}

void leer_ADC(char canal){
ADMUX &= 0xF0; // Limpiar bits de selección de canal, hace una AND con 0xF0 (11110000) es para asegurar que los bits de seleccion de canal esten en 0 antes de seleccionarlos
      c8:	ec e7       	ldi	r30, 0x7C	; 124
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	90 81       	ld	r25, Z
      ce:	90 7f       	andi	r25, 0xF0	; 240
      d0:	90 83       	st	Z, r25
ADMUX |= (0x00+canal); // Selecciona el pin analogico que deseamos, en el main por ej utilizamos con canales a0 (canal 0) y a1 (canal 1)
      d2:	90 81       	ld	r25, Z
      d4:	89 2b       	or	r24, r25
      d6:	80 83       	st	Z, r24
ADCSRA |= (1 << ADSC); // Iniciar conversión
      d8:	ea e7       	ldi	r30, 0x7A	; 122
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	80 81       	ld	r24, Z
      de:	80 64       	ori	r24, 0x40	; 64
      e0:	80 83       	st	Z, r24
while(ADCSRA & (1 << ADSC)); // Espera a que termine la conversión
      e2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
      e6:	86 fd       	sbrc	r24, 6
      e8:	fc cf       	rjmp	.-8      	; 0xe2 <leer_ADC+0x1a>
      ea:	08 95       	ret

000000ec <i2c_init>:

#include "i2c.h"
int ejecucionUnica = 1;

void i2c_init() { //Se encarga de inicializar el bus I2C en modo maestro con una velocidad de transmisión de 100 kHz
	TWBR = 25; // Frecuencia de reloj de 16MHz / (16 + 2 * TWBR * 1) = 100 kHz {con 25242kHz}
      ec:	89 e1       	ldi	r24, 0x19	; 25
      ee:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWSR = 0;  // Prescaler de 1
      f2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
      f6:	08 95       	ret

000000f8 <i2c_start>:
}

void i2c_start(){	//Envía una condición de inicio al bus I2C.
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTA); // Condición de inicio
      f8:	84 ea       	ldi	r24, 0xA4	; 164
      fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT))); // Verificar la condición de inicio
      fe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     102:	88 23       	and	r24, r24
     104:	e4 f7       	brge	.-8      	; 0xfe <i2c_start+0x6>
}
     106:	08 95       	ret

00000108 <i2c_write>:
	//TWINT (para limpiar la bandera de interrupción), 
	//TWEN (para habilitar el módulo I2C) y TWSTA (para enviar la condición de inicio). 

void i2c_write(char x){	//Se utiliza para escribir un byte de datos en el bus I2C. 
	TWDR = x; // Mover valor a I2C
     108:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN); // Habilite I2C y borra la interrupción
     10c:	84 e8       	ldi	r24, 0x84	; 132
     10e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));
     112:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     116:	88 23       	and	r24, r24
     118:	e4 f7       	brge	.-8      	; 0x112 <i2c_write+0xa>
}
     11a:	08 95       	ret

0000011c <i2c_stop>:

void i2c_stop(){	//Envía una condición de parada al bus I2C, indicando el final de la transmisión.
	TWCR = (1<<TWSTO)|(1<<TWINT)|(1<<TWEN);
     11c:	84 e9       	ldi	r24, 0x94	; 148
     11e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (TWCR&(1<TWSTO));	
     122:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     126:	80 fd       	sbrc	r24, 0
     128:	fc cf       	rjmp	.-8      	; 0x122 <i2c_stop+0x6>
}
     12a:	08 95       	ret

0000012c <enviarPulsoEnable>:
#include "LCD_I2C.h"
#include <util/delay.h>

void enviarPulsoEnable()
{
TWDR |= 0x02;					//---PIN En la pantalla LCD en = 1; -----Enclavar datos en el registro de datos LCD usando una señal de alta a baja
     12c:	eb eb       	ldi	r30, 0xBB	; 187
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	82 60       	ori	r24, 0x02	; 2
     134:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//---Habilita I2C y borra la interrupción- Esta linea y la siguiente simepre van despues de querer mandar un coamndo por TDWR
     136:	84 e8       	ldi	r24, 0x84	; 132
     138:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));	//---Siempre poner despues de la linea anterior al mandar datos por TWDR
     13c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     140:	88 23       	and	r24, r24
     142:	e4 f7       	brge	.-8      	; 0x13c <enviarPulsoEnable+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     144:	89 ef       	ldi	r24, 0xF9	; 249
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	01 97       	sbiw	r24, 0x01	; 1
     14a:	f1 f7       	brne	.-4      	; 0x148 <enviarPulsoEnable+0x1c>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <enviarPulsoEnable+0x22>
     14e:	00 00       	nop
_delay_ms(1);
TWDR &= ~0x02;					//---PIN del Enable de la LCD en = 0;
     150:	eb eb       	ldi	r30, 0xBB	; 187
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	8d 7f       	andi	r24, 0xFD	; 253
     158:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//---Habilita I2C y borra la interrupción
     15a:	84 e8       	ldi	r24, 0x84	; 132
     15c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     160:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     164:	88 23       	and	r24, r24
     166:	e4 f7       	brge	.-8      	; 0x160 <enviarPulsoEnable+0x34>
}
     168:	08 95       	ret

0000016a <enviarComando4Bits>:

void enviarComando4Bits(char v1)
{
TWDR &=~0x01;					//PIN RS de la pantalla LCD rs = 0; ----Seleccionar registro como registro de comando
     16a:	eb eb       	ldi	r30, 0xBB	; 187
     16c:	f0 e0       	ldi	r31, 0x00	; 0
     16e:	90 81       	ld	r25, Z
     170:	9e 7f       	andi	r25, 0xFE	; 254
     172:	90 83       	st	Z, r25
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     174:	94 e8       	ldi	r25, 0x84	; 132
     176:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     17a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     17e:	99 23       	and	r25, r25
     180:	e4 f7       	brge	.-8      	; 0x17a <enviarComando4Bits+0x10>
TWDR &= 0x0F;					//----Enmascaramiento de 4 bits superiores y envío a LCD
     182:	eb eb       	ldi	r30, 0xBB	; 187
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	90 81       	ld	r25, Z
     188:	9f 70       	andi	r25, 0x0F	; 15
     18a:	90 83       	st	Z, r25
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     18c:	94 e8       	ldi	r25, 0x84	; 132
     18e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     192:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     196:	99 23       	and	r25, r25
     198:	e4 f7       	brge	.-8      	; 0x192 <enviarComando4Bits+0x28>
TWDR |= (v1 & 0xF0);			//----
     19a:	eb eb       	ldi	r30, 0xBB	; 187
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	90 81       	ld	r25, Z
     1a0:	80 7f       	andi	r24, 0xF0	; 240
     1a2:	89 2b       	or	r24, r25
     1a4:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     1a6:	84 e8       	ldi	r24, 0x84	; 132
     1a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     1ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1b0:	88 23       	and	r24, r24
     1b2:	e4 f7       	brge	.-8      	; 0x1ac <enviarComando4Bits+0x42>
enviarPulsoEnable();
     1b4:	0e 94 96 00 	call	0x12c	; 0x12c <enviarPulsoEnable>
     1b8:	08 95       	ret

000001ba <enviarComando>:
}

void enviarComando(char v2)
{
     1ba:	cf 93       	push	r28
     1bc:	c8 2f       	mov	r28, r24
TWDR&=~0x01;					//rs = 0; ----Seleccionar registro como registro de comando
     1be:	eb eb       	ldi	r30, 0xBB	; 187
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 81       	ld	r24, Z
     1c4:	8e 7f       	andi	r24, 0xFE	; 254
     1c6:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     1c8:	84 e8       	ldi	r24, 0x84	; 132
     1ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     1ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1d2:	88 23       	and	r24, r24
     1d4:	e4 f7       	brge	.-8      	; 0x1ce <enviarComando+0x14>

TWDR &= 0x0F;                   //----borrando los 4 bits superiores
     1d6:	eb eb       	ldi	r30, 0xBB	; 187
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	80 81       	ld	r24, Z
     1dc:	8f 70       	andi	r24, 0x0F	; 15
     1de:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     1e0:	84 e8       	ldi	r24, 0x84	; 132
     1e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     1e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1ea:	88 23       	and	r24, r24
     1ec:	e4 f7       	brge	.-8      	; 0x1e6 <enviarComando+0x2c>
TWDR |= (v2 & 0xF0);			//----Enmascaramiento de 4 bits superiores y envío a LCD
     1ee:	eb eb       	ldi	r30, 0xBB	; 187
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	80 81       	ld	r24, Z
     1f4:	9c 2f       	mov	r25, r28
     1f6:	90 7f       	andi	r25, 0xF0	; 240
     1f8:	89 2b       	or	r24, r25
     1fa:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     1fc:	84 e8       	ldi	r24, 0x84	; 132
     1fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     202:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     206:	88 23       	and	r24, r24
     208:	e4 f7       	brge	.-8      	; 0x202 <enviarComando+0x48>
enviarPulsoEnable();
     20a:	0e 94 96 00 	call	0x12c	; 0x12c <enviarPulsoEnable>
	
TWDR &= 0x0F;                    //----borrando los 4 bits superiores
     20e:	eb eb       	ldi	r30, 0xBB	; 187
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	8f 70       	andi	r24, 0x0F	; 15
     216:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     218:	84 e8       	ldi	r24, 0x84	; 132
     21a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     21e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     222:	88 23       	and	r24, r24
     224:	e4 f7       	brge	.-8      	; 0x21e <enviarComando+0x64>
TWDR |= ((v2 & 0x0F)<<4);		//----Enmascaramiento de 4 bits inferiores y envío a LCD
     226:	eb eb       	ldi	r30, 0xBB	; 187
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	20 81       	ld	r18, Z
     22c:	30 e1       	ldi	r19, 0x10	; 16
     22e:	c3 9f       	mul	r28, r19
     230:	c0 01       	movw	r24, r0
     232:	11 24       	eor	r1, r1
     234:	82 2b       	or	r24, r18
     236:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilite I2C y borra la interrupción
     238:	84 e8       	ldi	r24, 0x84	; 132
     23a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     23e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     242:	88 23       	and	r24, r24
     244:	e4 f7       	brge	.-8      	; 0x23e <enviarComando+0x84>
enviarPulsoEnable();
     246:	0e 94 96 00 	call	0x12c	; 0x12c <enviarPulsoEnable>
}
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <escribirDato>:

void escribirDato(char v3)
{
     24e:	cf 93       	push	r28
     250:	c8 2f       	mov	r28, r24
TWDR|=0x01;						//RS = 1; ----Selecciona registro como registro de comando
     252:	eb eb       	ldi	r30, 0xBB	; 187
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	81 60       	ori	r24, 0x01	; 1
     25a:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     25c:	84 e8       	ldi	r24, 0x84	; 132
     25e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     262:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     266:	88 23       	and	r24, r24
     268:	e4 f7       	brge	.-8      	; 0x262 <escribirDato+0x14>
TWDR &= 0x0F;				    //----borrando los 4 bits superiores
     26a:	eb eb       	ldi	r30, 0xBB	; 187
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	80 81       	ld	r24, Z
     270:	8f 70       	andi	r24, 0x0F	; 15
     272:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     274:	84 e8       	ldi	r24, 0x84	; 132
     276:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     27a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     27e:	88 23       	and	r24, r24
     280:	e4 f7       	brge	.-8      	; 0x27a <escribirDato+0x2c>
TWDR |= (v3 & 0xF0);			//----Enmascaramiento de 4 bits superiores y envío a LCD
     282:	eb eb       	ldi	r30, 0xBB	; 187
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	9c 2f       	mov	r25, r28
     28a:	90 7f       	andi	r25, 0xF0	; 240
     28c:	89 2b       	or	r24, r25
     28e:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     290:	84 e8       	ldi	r24, 0x84	; 132
     292:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     296:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     29a:	88 23       	and	r24, r24
     29c:	e4 f7       	brge	.-8      	; 0x296 <escribirDato+0x48>
enviarPulsoEnable();
     29e:	0e 94 96 00 	call	0x12c	; 0x12c <enviarPulsoEnable>
	
TWDR &= 0x0F;					//----borrando los 4 bits superiores
     2a2:	eb eb       	ldi	r30, 0xBB	; 187
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	80 81       	ld	r24, Z
     2a8:	8f 70       	andi	r24, 0x0F	; 15
     2aa:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     2ac:	84 e8       	ldi	r24, 0x84	; 132
     2ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     2b2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2b6:	88 23       	and	r24, r24
     2b8:	e4 f7       	brge	.-8      	; 0x2b2 <escribirDato+0x64>
TWDR |= ((v3 & 0x0F)<<4);		//----Enmascaramiento de 4 bits inferiores y envío a LCD
     2ba:	eb eb       	ldi	r30, 0xBB	; 187
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	20 81       	ld	r18, Z
     2c0:	30 e1       	ldi	r19, 0x10	; 16
     2c2:	c3 9f       	mul	r28, r19
     2c4:	c0 01       	movw	r24, r0
     2c6:	11 24       	eor	r1, r1
     2c8:	82 2b       	or	r24, r18
     2ca:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     2cc:	84 e8       	ldi	r24, 0x84	; 132
     2ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     2d2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2d6:	88 23       	and	r24, r24
     2d8:	e4 f7       	brge	.-8      	; 0x2d2 <escribirDato+0x84>
enviarPulsoEnable();
     2da:	0e 94 96 00 	call	0x12c	; 0x12c <enviarPulsoEnable>
}
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <lcd_init>:

void lcd_init() {
i2c_init(); //inciamos la comunicación i2c
     2e2:	0e 94 76 00 	call	0xec	; 0xec <i2c_init>
i2c_start(); //Iniciamos el i2c
     2e6:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_start>
i2c_write(0x40); //Dirección del PCF8574
     2ea:	80 e4       	ldi	r24, 0x40	; 64
     2ec:	0e 94 84 00 	call	0x108	; 0x108 <i2c_write>
     2f0:	81 ee       	ldi	r24, 0xE1	; 225
     2f2:	94 e0       	ldi	r25, 0x04	; 4
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <lcd_init+0x12>
     2f8:	00 c0       	rjmp	.+0      	; 0x2fa <lcd_init+0x18>
     2fa:	00 00       	nop
// Inicialización del LCD de 20x4 en modo 4 bits.
_delay_ms(5);
enviarComando4Bits(0x30); // 3 veces
     2fc:	80 e3       	ldi	r24, 0x30	; 48
     2fe:	0e 94 b5 00 	call	0x16a	; 0x16a <enviarComando4Bits>
     302:	81 ee       	ldi	r24, 0xE1	; 225
     304:	94 e0       	ldi	r25, 0x04	; 4
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <lcd_init+0x24>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <lcd_init+0x2a>
     30c:	00 00       	nop
_delay_ms(5);
enviarComando4Bits(0x30);
     30e:	80 e3       	ldi	r24, 0x30	; 48
     310:	0e 94 b5 00 	call	0x16a	; 0x16a <enviarComando4Bits>
enviarComando4Bits(0x20); // Modo 4 bits
     314:	80 e2       	ldi	r24, 0x20	; 32
     316:	0e 94 b5 00 	call	0x16a	; 0x16a <enviarComando4Bits>
     31a:	81 ee       	ldi	r24, 0xE1	; 225
     31c:	94 e0       	ldi	r25, 0x04	; 4
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	f1 f7       	brne	.-4      	; 0x31e <lcd_init+0x3c>
     322:	00 c0       	rjmp	.+0      	; 0x324 <lcd_init+0x42>
     324:	00 00       	nop
_delay_ms(5);
	
// Configuración del LCD de 20x4
enviarComando(0x28);      // Función de 4 bits, 2 líneas, fuente 5x8
     326:	88 e2       	ldi	r24, 0x28	; 40
     328:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enviarComando>
enviarComando(0x0C);      // Encender el display, apagar el cursor
     32c:	8c e0       	ldi	r24, 0x0C	; 12
     32e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enviarComando>
enviarComando(0x01);      // Borrar pantalla
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enviarComando>
enviarComando(0x06);      // Desplazamiento del cursor a la derecha
     338:	86 e0       	ldi	r24, 0x06	; 6
     33a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enviarComando>
enviarComando(0x80);      // Posiciona el cursor en la primera línea, primera posición
     33e:	80 e8       	ldi	r24, 0x80	; 128
     340:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enviarComando>
     344:	08 95       	ret

00000346 <escribirEnLCD>:
}

void escribirEnLCD(char *c)
{
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	ec 01       	movw	r28, r24
while(*c != 0)			//----Espere hasta que todas las cadenas pasen a la pantalla LCD.
     34c:	03 c0       	rjmp	.+6      	; 0x354 <escribirEnLCD+0xe>
escribirDato(*c++);		//----Enviar la cadena a la pantalla LCD
     34e:	21 96       	adiw	r28, 0x01	; 1
     350:	0e 94 27 01 	call	0x24e	; 0x24e <escribirDato>
enviarComando(0x80);      // Posiciona el cursor en la primera línea, primera posición
}

void escribirEnLCD(char *c)
{
while(*c != 0)			//----Espere hasta que todas las cadenas pasen a la pantalla LCD.
     354:	88 81       	ld	r24, Y
     356:	81 11       	cpse	r24, r1
     358:	fa cf       	rjmp	.-12     	; 0x34e <escribirEnLCD+0x8>
escribirDato(*c++);		//----Enviar la cadena a la pantalla LCD
}
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <limpiar_LCD>:

void limpiar_LCD()
{
enviarComando(0x01);	//Comando para limpar el lcd
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enviarComando>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     366:	81 e2       	ldi	r24, 0x21	; 33
     368:	8a 95       	dec	r24
     36a:	f1 f7       	brne	.-4      	; 0x368 <limpiar_LCD+0x8>
     36c:	00 00       	nop
_delay_us(100);
enviarComando (0x80);	//Setea el cursor en la posicion cero
     36e:	80 e8       	ldi	r24, 0x80	; 128
     370:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enviarComando>
     374:	08 95       	ret

00000376 <SiguienteTextoLCD>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     376:	2f ef       	ldi	r18, 0xFF	; 255
     378:	86 e4       	ldi	r24, 0x46	; 70
     37a:	96 e8       	ldi	r25, 0x86	; 134
     37c:	21 50       	subi	r18, 0x01	; 1
     37e:	80 40       	sbci	r24, 0x00	; 0
     380:	90 40       	sbci	r25, 0x00	; 0
     382:	e1 f7       	brne	.-8      	; 0x37c <SiguienteTextoLCD+0x6>
     384:	00 c0       	rjmp	.+0      	; 0x386 <SiguienteTextoLCD+0x10>
     386:	00 00       	nop
}

void SiguienteTextoLCD(void){
	_delay_ms(44000);
	//limpiar_LCD();
	limpiar_LCD();
     388:	0e 94 b0 01 	call	0x360	; 0x360 <limpiar_LCD>
	escribirEnLCD(" ");
     38c:	86 e1       	ldi	r24, 0x16	; 22
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
     394:	83 ec       	ldi	r24, 0xC3	; 195
     396:	99 e0       	ldi	r25, 0x09	; 9
     398:	01 97       	sbiw	r24, 0x01	; 1
     39a:	f1 f7       	brne	.-4      	; 0x398 <SiguienteTextoLCD+0x22>
     39c:	00 c0       	rjmp	.+0      	; 0x39e <SiguienteTextoLCD+0x28>
     39e:	00 00       	nop
     3a0:	08 95       	ret

000003a2 <TWI_ini>:

//????????????? TWI
void TWI_ini(void)
{
	//??????? ???????? ???????? ??????
	TWBR=0x05;//???????? ??? ???????? ???????? ??????: 5
     3a2:	85 e0       	ldi	r24, 0x05	; 5
     3a4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     3a8:	08 95       	ret

000003aa <TWI_Start>:
void TWI_Start(void)
{
	//?????????? ?????? TWI: TWEN=1
	//????????? ???? ????????? "Start": TWSTA=1
	//????????? ???? ?????????? TWI: TWINT=1
	TWCR=(1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     3aa:	84 ea       	ldi	r24, 0xA4	; 164
     3ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(~TWCR&(1<<TWINT));//????????? ?????????? ????????
     3b0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3b4:	88 23       	and	r24, r24
     3b6:	e4 f7       	brge	.-8      	; 0x3b0 <TWI_Start+0x6>
}
     3b8:	08 95       	ret

000003ba <TWI_Sendbyte>:

//???????? ?????
void TWI_Sendbyte(unsigned char byte)
{
	TWDR=byte;//???????? ???? ? ??????? ??????
     3ba:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	//?????????? ?????? TWI
	//????????? ???? ?????????? TWI
	TWCR=(1<<TWEN)|(1<<TWINT);
     3be:	84 e8       	ldi	r24, 0x84	; 132
     3c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(~TWCR&(1<<TWINT));//????????? ?????????? ????????
     3c4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3c8:	88 23       	and	r24, r24
     3ca:	e4 f7       	brge	.-8      	; 0x3c4 <TWI_Sendbyte+0xa>
}
     3cc:	08 95       	ret

000003ce <TWI_Receivebytes>:
//????? ??????
void TWI_Receivebytes()
{
   //...............................18 ???..................................
   //????? ??????? ????? ?????? 
   TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);//?????????? "ACK": TWEA=1
     3ce:	84 ec       	ldi	r24, 0xC4	; 196
     3d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
   while(~TWCR&(1<<TWINT));//????????? ?????????? ????????
     3d4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3d8:	88 23       	and	r24, r24
     3da:	e4 f7       	brge	.-8      	; 0x3d4 <TWI_Receivebytes+0x6>
   a1=TWDR;//?????????? ??????? ???? ?? MCP3421 ? ?????????? a1=TWDR;
     3dc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	a0 e0       	ldi	r26, 0x00	; 0
     3e4:	b0 e0       	ldi	r27, 0x00	; 0
     3e6:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <a1>
     3ea:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <a1+0x1>
     3ee:	a0 93 9b 01 	sts	0x019B, r26	; 0x80019b <a1+0x2>
     3f2:	b0 93 9c 01 	sts	0x019C, r27	; 0x80019c <a1+0x3>
   //????? ??????? ????? ??????
   TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);//?????????? "ACK": TWEA=1
     3f6:	84 ec       	ldi	r24, 0xC4	; 196
     3f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
   while(~TWCR&(1<<TWINT));//????????? ?????????? ????????
     3fc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     400:	88 23       	and	r24, r24
     402:	e4 f7       	brge	.-8      	; 0x3fc <TWI_Receivebytes+0x2e>
   a2=TWDR;//?????????? ??????? ???? ?? MCP3421 ? ?????????? a1=TWDR;
     404:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	a0 e0       	ldi	r26, 0x00	; 0
     40c:	b0 e0       	ldi	r27, 0x00	; 0
     40e:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <a2>
     412:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <a2+0x1>
     416:	a0 93 a3 01 	sts	0x01A3, r26	; 0x8001a3 <a2+0x2>
     41a:	b0 93 a4 01 	sts	0x01A4, r27	; 0x8001a4 <a2+0x3>
   //????? ???????? ????? ??????
   TWCR=(1<<TWINT)|(1<<TWEN);//?????????? "NACK": TWEA ?? ?????????
     41e:	84 e8       	ldi	r24, 0x84	; 132
     420:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
   while(~TWCR&(1<<TWINT));//????????? ?????????? ????????
     424:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     428:	88 23       	and	r24, r24
     42a:	e4 f7       	brge	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
   a3=TWDR;//?????????? ??????? ???? ?? MCP3421 ? ?????????? a2
     42c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	a0 e0       	ldi	r26, 0x00	; 0
     434:	b0 e0       	ldi	r27, 0x00	; 0
     436:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <a3>
     43a:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <a3+0x1>
     43e:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <a3+0x2>
     442:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <a3+0x3>
     446:	08 95       	ret

00000448 <TWI_Stop>:
void TWI_Stop(void)
{
	//?????????? ?????? TWI: TWEN=1
	//????????? ???? ????????? "Stop": TWSTO=1
	//????????? ???? ?????????? TWI: TWINT=1
	TWCR=(1<<TWEN)|(1<<TWSTO)|(1<<TWINT);
     448:	84 e9       	ldi	r24, 0x94	; 148
     44a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     44e:	08 95       	ret

00000450 <MCP3421_config>:
}

//????????? MCP3421
void MCP3421_config(void)
{
	TWI_Start();
     450:	0e 94 d5 01 	call	0x3aa	; 0x3aa <TWI_Start>
	TWI_Sendbyte(0b11010000);//?????????? ????? MCP3421: 1101000 + 0 ??????
     454:	80 ed       	ldi	r24, 0xD0	; 208
     456:	0e 94 dd 01 	call	0x3ba	; 0x3ba <TWI_Sendbyte>
	TWI_Sendbyte(0b00011100);//?????????? ??????. ????: 00011100
     45a:	8c e1       	ldi	r24, 0x1C	; 28
     45c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <TWI_Sendbyte>
	TWI_Stop();
     460:	0e 94 24 02 	call	0x448	; 0x448 <TWI_Stop>
     464:	08 95       	ret

00000466 <MCP3421_read>:
}

//????????? ?????? ?? MCP3421

int MCP3421_read(void)
{
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
	TWI_ini(); //INCIALIZA EL TWI (TIENE UNA CONFIGURACIÓN ESPECIAL, NO HAY QUE TOCAR)
     46a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <TWI_ini>
	MCP3421_config(); //configura el sensor MCP3421
     46e:	0e 94 28 02 	call	0x450	; 0x450 <MCP3421_config>
	TWI_Start();
     472:	0e 94 d5 01 	call	0x3aa	; 0x3aa <TWI_Start>
	TWI_Sendbyte(0b11010001);//?????????? ????? MCP3421: 1101000 + 1 ??????
     476:	81 ed       	ldi	r24, 0xD1	; 209
     478:	0e 94 dd 01 	call	0x3ba	; 0x3ba <TWI_Sendbyte>
    TWI_Receivebytes();//??????? ????? ? ??????????? ?????????
     47c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <TWI_Receivebytes>
	int Resultado = (((int)a1 << 10) | ((int)a2 << 2) | ((int)a3 >> 6))-2;
     480:	20 91 99 01 	lds	r18, 0x0199	; 0x800199 <a1>
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	92 2f       	mov	r25, r18
     48a:	99 0f       	add	r25, r25
     48c:	99 0f       	add	r25, r25
     48e:	c0 91 a1 01 	lds	r28, 0x01A1	; 0x8001a1 <a2>
     492:	d0 91 a2 01 	lds	r29, 0x01A2	; 0x8001a2 <a2+0x1>
     496:	cc 0f       	add	r28, r28
     498:	dd 1f       	adc	r29, r29
     49a:	cc 0f       	add	r28, r28
     49c:	dd 1f       	adc	r29, r29
     49e:	c8 2b       	or	r28, r24
     4a0:	d9 2b       	or	r29, r25
     4a2:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <a3>
     4a6:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <a3+0x1>
     4aa:	08 2e       	mov	r0, r24
     4ac:	89 2f       	mov	r24, r25
     4ae:	00 0c       	add	r0, r0
     4b0:	88 1f       	adc	r24, r24
     4b2:	99 0b       	sbc	r25, r25
     4b4:	00 0c       	add	r0, r0
     4b6:	88 1f       	adc	r24, r24
     4b8:	99 1f       	adc	r25, r25
     4ba:	c8 2b       	or	r28, r24
     4bc:	d9 2b       	or	r29, r25
     4be:	22 97       	sbiw	r28, 0x02	; 2
    TWI_Stop();
     4c0:	0e 94 24 02 	call	0x448	; 0x448 <TWI_Stop>
	return Resultado; 
}
     4c4:	ce 01       	movw	r24, r28
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	08 95       	ret

000004cc <PesarAgua>:
int PesarAgua(void){
int valorLeido = MCP3421_read();
     4cc:	0e 94 33 02 	call	0x466	; 0x466 <MCP3421_read>
int Peso = ((((float)valorLeido + 2)*1000) / 2047 )* 20; //esto da en cm3 o ml, cambiese el numero luego por TamañoBidon (10 l o 20 l).
     4d0:	bc 01       	movw	r22, r24
     4d2:	99 0f       	add	r25, r25
     4d4:	88 0b       	sbc	r24, r24
     4d6:	99 0b       	sbc	r25, r25
     4d8:	0e 94 00 08 	call	0x1000	; 0x1000 <__floatsisf>
     4dc:	20 e0       	ldi	r18, 0x00	; 0
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	40 e0       	ldi	r20, 0x00	; 0
     4e2:	50 e4       	ldi	r21, 0x40	; 64
     4e4:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__addsf3>
     4e8:	20 e0       	ldi	r18, 0x00	; 0
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	4a e7       	ldi	r20, 0x7A	; 122
     4ee:	54 e4       	ldi	r21, 0x44	; 68
     4f0:	0e 94 8c 08 	call	0x1118	; 0x1118 <__mulsf3>
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	30 ee       	ldi	r19, 0xE0	; 224
     4f8:	4f ef       	ldi	r20, 0xFF	; 255
     4fa:	54 e4       	ldi	r21, 0x44	; 68
     4fc:	0e 94 56 07 	call	0xeac	; 0xeac <__divsf3>
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 ea       	ldi	r20, 0xA0	; 160
     506:	51 e4       	ldi	r21, 0x41	; 65
     508:	0e 94 8c 08 	call	0x1118	; 0x1118 <__mulsf3>
     50c:	0e 94 c8 07 	call	0xf90	; 0xf90 <__fixsfsi>
return Peso;}
     510:	cb 01       	movw	r24, r22
     512:	08 95       	ret

00000514 <i2c_read>:
	int MedicionTemperatura = atoi(buf);
	char buffer[10]; // Espacio para la cadena de caracteres
	sprintf(buffer, "%d", MedicionTemperatura); // Convierte el entero a una cadena
	uart_send_string(buffer);
	;
};
     514:	94 ea       	ldi	r25, 0xA4	; 164
     516:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     51a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     51e:	99 23       	and	r25, r25
     520:	e4 f7       	brge	.-8      	; 0x51a <i2c_read+0x6>
     522:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     526:	9b 7f       	andi	r25, 0xFB	; 251
     528:	98 30       	cpi	r25, 0x08	; 8
     52a:	09 f0       	breq	.+2      	; 0x52e <i2c_read+0x1a>
     52c:	57 c0       	rjmp	.+174    	; 0x5dc <i2c_read+0xc8>
     52e:	90 e9       	ldi	r25, 0x90	; 144
     530:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     534:	94 e8       	ldi	r25, 0x84	; 132
     536:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     53a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     53e:	99 23       	and	r25, r25
     540:	e4 f7       	brge	.-8      	; 0x53a <i2c_read+0x26>
     542:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     546:	9b 7f       	andi	r25, 0xFB	; 251
     548:	98 31       	cpi	r25, 0x18	; 24
     54a:	09 f0       	breq	.+2      	; 0x54e <i2c_read+0x3a>
     54c:	47 c0       	rjmp	.+142    	; 0x5dc <i2c_read+0xc8>
     54e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     552:	84 e8       	ldi	r24, 0x84	; 132
     554:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     558:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     55c:	88 23       	and	r24, r24
     55e:	e4 f7       	brge	.-8      	; 0x558 <i2c_read+0x44>
     560:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     564:	8b 7f       	andi	r24, 0xFB	; 251
     566:	88 32       	cpi	r24, 0x28	; 40
     568:	c9 f5       	brne	.+114    	; 0x5dc <i2c_read+0xc8>
     56a:	84 ea       	ldi	r24, 0xA4	; 164
     56c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     570:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     574:	88 23       	and	r24, r24
     576:	e4 f7       	brge	.-8      	; 0x570 <i2c_read+0x5c>
     578:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     57c:	8b 7f       	andi	r24, 0xFB	; 251
     57e:	80 31       	cpi	r24, 0x10	; 16
     580:	69 f5       	brne	.+90     	; 0x5dc <i2c_read+0xc8>
     582:	81 e9       	ldi	r24, 0x91	; 145
     584:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     588:	84 e8       	ldi	r24, 0x84	; 132
     58a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     58e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     592:	88 23       	and	r24, r24
     594:	e4 f7       	brge	.-8      	; 0x58e <i2c_read+0x7a>
     596:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     59a:	8b 7f       	andi	r24, 0xFB	; 251
     59c:	80 34       	cpi	r24, 0x40	; 64
     59e:	f1 f4       	brne	.+60     	; 0x5dc <i2c_read+0xc8>
     5a0:	15 c0       	rjmp	.+42     	; 0x5cc <i2c_read+0xb8>
     5a2:	21 15       	cp	r18, r1
     5a4:	31 05       	cpc	r19, r1
     5a6:	21 f4       	brne	.+8      	; 0x5b0 <i2c_read+0x9c>
     5a8:	84 e8       	ldi	r24, 0x84	; 132
     5aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5ae:	03 c0       	rjmp	.+6      	; 0x5b6 <i2c_read+0xa2>
     5b0:	84 ec       	ldi	r24, 0xC4	; 196
     5b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5b6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5ba:	88 23       	and	r24, r24
     5bc:	e4 f7       	brge	.-8      	; 0x5b6 <i2c_read+0xa2>
     5be:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     5c2:	fb 01       	movw	r30, r22
     5c4:	80 83       	st	Z, r24
     5c6:	a9 01       	movw	r20, r18
     5c8:	6f 5f       	subi	r22, 0xFF	; 255
     5ca:	7f 4f       	sbci	r23, 0xFF	; 255
     5cc:	9a 01       	movw	r18, r20
     5ce:	21 50       	subi	r18, 0x01	; 1
     5d0:	31 09       	sbc	r19, r1
     5d2:	45 2b       	or	r20, r21
     5d4:	31 f7       	brne	.-52     	; 0x5a2 <i2c_read+0x8e>
     5d6:	84 e9       	ldi	r24, 0x94	; 148
     5d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5dc:	08 95       	ret

000005de <i2c_wwrite>:
     5de:	94 ea       	ldi	r25, 0xA4	; 164
     5e0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5e4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5e8:	99 23       	and	r25, r25
     5ea:	e4 f7       	brge	.-8      	; 0x5e4 <i2c_wwrite+0x6>
     5ec:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     5f0:	9b 7f       	andi	r25, 0xFB	; 251
     5f2:	98 30       	cpi	r25, 0x08	; 8
     5f4:	d1 f5       	brne	.+116    	; 0x66a <i2c_wwrite+0x8c>
     5f6:	90 e9       	ldi	r25, 0x90	; 144
     5f8:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     5fc:	94 e8       	ldi	r25, 0x84	; 132
     5fe:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     602:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     606:	99 23       	and	r25, r25
     608:	e4 f7       	brge	.-8      	; 0x602 <i2c_wwrite+0x24>
     60a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     60e:	9b 7f       	andi	r25, 0xFB	; 251
     610:	98 31       	cpi	r25, 0x18	; 24
     612:	59 f5       	brne	.+86     	; 0x66a <i2c_wwrite+0x8c>
     614:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     618:	84 e8       	ldi	r24, 0x84	; 132
     61a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     61e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     622:	88 23       	and	r24, r24
     624:	e4 f7       	brge	.-8      	; 0x61e <i2c_wwrite+0x40>
     626:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     62a:	8b 7f       	andi	r24, 0xFB	; 251
     62c:	88 32       	cpi	r24, 0x28	; 40
     62e:	e9 f4       	brne	.+58     	; 0x66a <i2c_wwrite+0x8c>
     630:	14 c0       	rjmp	.+40     	; 0x65a <i2c_wwrite+0x7c>
     632:	fb 01       	movw	r30, r22
     634:	31 96       	adiw	r30, 0x01	; 1
     636:	db 01       	movw	r26, r22
     638:	8c 91       	ld	r24, X
     63a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     63e:	84 e8       	ldi	r24, 0x84	; 132
     640:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     644:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     648:	88 23       	and	r24, r24
     64a:	e4 f7       	brge	.-8      	; 0x644 <i2c_wwrite+0x66>
     64c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     650:	a9 01       	movw	r20, r18
     652:	8b 7f       	andi	r24, 0xFB	; 251
     654:	88 32       	cpi	r24, 0x28	; 40
     656:	49 f4       	brne	.+18     	; 0x66a <i2c_wwrite+0x8c>
     658:	bf 01       	movw	r22, r30
     65a:	9a 01       	movw	r18, r20
     65c:	21 50       	subi	r18, 0x01	; 1
     65e:	31 09       	sbc	r19, r1
     660:	45 2b       	or	r20, r21
     662:	39 f7       	brne	.-50     	; 0x632 <i2c_wwrite+0x54>
     664:	84 e9       	ldi	r24, 0x94	; 148
     666:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     66a:	08 95       	ret

0000066c <mcp_set_adc_resolution>:
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	1f 92       	push	r1
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
     678:	18 2f       	mov	r17, r24
     67a:	41 e0       	ldi	r20, 0x01	; 1
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	be 01       	movw	r22, r28
     680:	6f 5f       	subi	r22, 0xFF	; 255
     682:	7f 4f       	sbci	r23, 0xFF	; 255
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	0e 94 8a 02 	call	0x514	; 0x514 <i2c_read>
     68a:	89 81       	ldd	r24, Y+1	; 0x01
     68c:	28 2f       	mov	r18, r24
     68e:	2f 79       	andi	r18, 0x9F	; 159
     690:	30 e2       	ldi	r19, 0x20	; 32
     692:	13 9f       	mul	r17, r19
     694:	c0 01       	movw	r24, r0
     696:	11 24       	eor	r1, r1
     698:	82 2b       	or	r24, r18
     69a:	89 83       	std	Y+1, r24	; 0x01
     69c:	41 e0       	ldi	r20, 0x01	; 1
     69e:	50 e0       	ldi	r21, 0x00	; 0
     6a0:	be 01       	movw	r22, r28
     6a2:	6f 5f       	subi	r22, 0xFF	; 255
     6a4:	7f 4f       	sbci	r23, 0xFF	; 255
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	0e 94 ef 02 	call	0x5de	; 0x5de <i2c_wwrite>
     6ac:	0f 90       	pop	r0
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	08 95       	ret

000006b6 <mcp_set_power_mode>:
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	1f 92       	push	r1
     6be:	cd b7       	in	r28, 0x3d	; 61
     6c0:	de b7       	in	r29, 0x3e	; 62
     6c2:	18 2f       	mov	r17, r24
     6c4:	41 e0       	ldi	r20, 0x01	; 1
     6c6:	50 e0       	ldi	r21, 0x00	; 0
     6c8:	be 01       	movw	r22, r28
     6ca:	6f 5f       	subi	r22, 0xFF	; 255
     6cc:	7f 4f       	sbci	r23, 0xFF	; 255
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	0e 94 8a 02 	call	0x514	; 0x514 <i2c_read>
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	8e 7f       	andi	r24, 0xFE	; 254
     6d8:	18 2b       	or	r17, r24
     6da:	19 83       	std	Y+1, r17	; 0x01
     6dc:	41 e0       	ldi	r20, 0x01	; 1
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	be 01       	movw	r22, r28
     6e2:	6f 5f       	subi	r22, 0xFF	; 255
     6e4:	7f 4f       	sbci	r23, 0xFF	; 255
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	0e 94 ef 02 	call	0x5de	; 0x5de <i2c_wwrite>
     6ec:	0f 90       	pop	r0
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	08 95       	ret

000006f6 <mcp_read_temp_float>:
     6f6:	ef 92       	push	r14
     6f8:	ff 92       	push	r15
     6fa:	1f 93       	push	r17
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	00 d0       	rcall	.+0      	; 0x702 <mcp_read_temp_float+0xc>
     702:	cd b7       	in	r28, 0x3d	; 61
     704:	de b7       	in	r29, 0x3e	; 62
     706:	42 e0       	ldi	r20, 0x02	; 2
     708:	50 e0       	ldi	r21, 0x00	; 0
     70a:	be 01       	movw	r22, r28
     70c:	6f 5f       	subi	r22, 0xFF	; 255
     70e:	7f 4f       	sbci	r23, 0xFF	; 255
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	0e 94 8a 02 	call	0x514	; 0x514 <i2c_read>
     716:	e9 80       	ldd	r14, Y+1	; 0x01
     718:	fa 80       	ldd	r15, Y+2	; 0x02
     71a:	b7 01       	movw	r22, r14
     71c:	77 27       	eor	r23, r23
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	0e 94 fe 07 	call	0xffc	; 0xffc <__floatunsisf>
     726:	1f 2d       	mov	r17, r15
     728:	f7 fe       	sbrs	r15, 7
     72a:	06 c0       	rjmp	.+12     	; 0x738 <mcp_read_temp_float+0x42>
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	40 e0       	ldi	r20, 0x00	; 0
     732:	5f e3       	ldi	r21, 0x3F	; 63
     734:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__addsf3>
     738:	16 ff       	sbrs	r17, 6
     73a:	06 c0       	rjmp	.+12     	; 0x748 <mcp_read_temp_float+0x52>
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	40 e8       	ldi	r20, 0x80	; 128
     742:	5e e3       	ldi	r21, 0x3E	; 62
     744:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__addsf3>
     748:	15 ff       	sbrs	r17, 5
     74a:	06 c0       	rjmp	.+12     	; 0x758 <mcp_read_temp_float+0x62>
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	40 e0       	ldi	r20, 0x00	; 0
     752:	5e e3       	ldi	r21, 0x3E	; 62
     754:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__addsf3>
     758:	14 ff       	sbrs	r17, 4
     75a:	06 c0       	rjmp	.+12     	; 0x768 <mcp_read_temp_float+0x72>
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	40 e8       	ldi	r20, 0x80	; 128
     762:	5d e3       	ldi	r21, 0x3D	; 61
     764:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__addsf3>
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	ff 90       	pop	r15
     774:	ef 90       	pop	r14
     776:	08 95       	ret

00000778 <LeerTemperatura>:
int LeerTemperatura(void){
     778:	8f 92       	push	r8
     77a:	9f 92       	push	r9
     77c:	af 92       	push	r10
     77e:	bf 92       	push	r11
     780:	cf 92       	push	r12
     782:	df 92       	push	r13
     784:	ef 92       	push	r14
     786:	ff 92       	push	r15
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	cd b7       	in	r28, 0x3d	; 61
     792:	de b7       	in	r29, 0x3e	; 62
     794:	aa 97       	sbiw	r28, 0x2a	; 42
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	f8 94       	cli
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	cd bf       	out	0x3d, r28	; 61
	int i=1;
char buf[32];
uart_init();
     7a0:	0e 94 91 04 	call	0x922	; 0x922 <uart_init>
//init MCP9800 sensor
mcp_init();
mcp_set_adc_resolution(MCP_ADC_RES_12);
     7a4:	83 e0       	ldi	r24, 0x03	; 3
     7a6:	0e 94 36 03 	call	0x66c	; 0x66c <mcp_set_adc_resolution>
mcp_set_power_mode(MCP_POWER_UP);
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <mcp_set_power_mode>
for (i=1; i<=250; i++)
     7b0:	01 e0       	ldi	r16, 0x01	; 1
     7b2:	10 e0       	ldi	r17, 0x00	; 0
     7b4:	3c c0       	rjmp	.+120    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
{
	float temp = mcp_read_temp_float();
     7b6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <mcp_read_temp_float>
     7ba:	4b 01       	movw	r8, r22
     7bc:	5c 01       	movw	r10, r24
	int temp_whole = (int)temp; // Extract whole number part
     7be:	0e 94 c8 07 	call	0xf90	; 0xf90 <__fixsfsi>
     7c2:	6b 01       	movw	r12, r22
     7c4:	7c 01       	movw	r14, r24
	int temp_frac = (int)((temp - temp_whole) * 10000); // Extract fractional part with desired precision
     7c6:	07 2e       	mov	r0, r23
     7c8:	00 0c       	add	r0, r0
     7ca:	88 0b       	sbc	r24, r24
     7cc:	99 0b       	sbc	r25, r25
     7ce:	0e 94 00 08 	call	0x1000	; 0x1000 <__floatsisf>
     7d2:	9b 01       	movw	r18, r22
     7d4:	ac 01       	movw	r20, r24
     7d6:	c5 01       	movw	r24, r10
     7d8:	b4 01       	movw	r22, r8
     7da:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__subsf3>
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	30 e4       	ldi	r19, 0x40	; 64
     7e2:	4c e1       	ldi	r20, 0x1C	; 28
     7e4:	56 e4       	ldi	r21, 0x46	; 70
     7e6:	0e 94 8c 08 	call	0x1118	; 0x1118 <__mulsf3>
     7ea:	0e 94 c8 07 	call	0xf90	; 0xf90 <__fixsfsi>
     7ee:	9b 01       	movw	r18, r22
	if(temp_frac < 0) temp_frac = -temp_frac; // Ensure the fractional part is positive
     7f0:	77 23       	and	r23, r23
     7f2:	24 f4       	brge	.+8      	; 0x7fc <LeerTemperatura+0x84>
     7f4:	22 27       	eor	r18, r18
     7f6:	33 27       	eor	r19, r19
     7f8:	26 1b       	sub	r18, r22
     7fa:	37 0b       	sbc	r19, r23
	// Now print both parts separately
	sprintf(buf, "%d.%04d", temp_whole, temp_frac);
     7fc:	3f 93       	push	r19
     7fe:	2f 93       	push	r18
     800:	df 92       	push	r13
     802:	cf 92       	push	r12
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	9f 93       	push	r25
     80a:	8f 93       	push	r24
     80c:	ce 01       	movw	r24, r28
     80e:	01 96       	adiw	r24, 0x01	; 1
     810:	9f 93       	push	r25
     812:	8f 93       	push	r24
     814:	0e 94 1f 09 	call	0x123e	; 0x123e <sprintf>
	// Send the temperature string over UART
	uart_send_string("");
     818:	87 e1       	ldi	r24, 0x17	; 23
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	0e 94 a4 04 	call	0x948	; 0x948 <uart_send_string>
uart_init();
//init MCP9800 sensor
mcp_init();
mcp_set_adc_resolution(MCP_ADC_RES_12);
mcp_set_power_mode(MCP_POWER_UP);
for (i=1; i<=250; i++)
     820:	0f 5f       	subi	r16, 0xFF	; 255
     822:	1f 4f       	sbci	r17, 0xFF	; 255
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	f8 94       	cli
     828:	de bf       	out	0x3e, r29	; 62
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	cd bf       	out	0x3d, r28	; 61
     82e:	0b 3f       	cpi	r16, 0xFB	; 251
     830:	11 05       	cpc	r17, r1
     832:	0c f2       	brlt	.-126    	; 0x7b6 <LeerTemperatura+0x3e>
	// Now print both parts separately
	sprintf(buf, "%d.%04d", temp_whole, temp_frac);
	// Send the temperature string over UART
	uart_send_string("");
}
uart_send_string("");
     834:	87 e1       	ldi	r24, 0x17	; 23
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	0e 94 a4 04 	call	0x948	; 0x948 <uart_send_string>
//uart_send_string("Temperatura: ");
//uart_send_string(buf);
//uart_send_newline();
// Convert the formatted string to an integer
int MedicionTemperatura = atoi(buf);
     83c:	ce 01       	movw	r24, r28
     83e:	01 96       	adiw	r24, 0x01	; 1
     840:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <atoi>
char buffer[10]; // Espacio para la cadena de caracteres
sprintf(buffer, "%d", MedicionTemperatura); // Convierte el entero a una cadena
     844:	9f 93       	push	r25
     846:	8f 93       	push	r24
     848:	88 e1       	ldi	r24, 0x18	; 24
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	9f 93       	push	r25
     84e:	8f 93       	push	r24
     850:	8e 01       	movw	r16, r28
     852:	0f 5d       	subi	r16, 0xDF	; 223
     854:	1f 4f       	sbci	r17, 0xFF	; 255
     856:	1f 93       	push	r17
     858:	0f 93       	push	r16
     85a:	0e 94 1f 09 	call	0x123e	; 0x123e <sprintf>
MedicionTemperatura = atoi(buffer);
     85e:	c8 01       	movw	r24, r16
     860:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <atoi>
    return MedicionTemperatura;}
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
     86e:	0f 90       	pop	r0
     870:	aa 96       	adiw	r28, 0x2a	; 42
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	de bf       	out	0x3e, r29	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	cd bf       	out	0x3d, r28	; 61
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	ff 90       	pop	r15
     886:	ef 90       	pop	r14
     888:	df 90       	pop	r13
     88a:	cf 90       	pop	r12
     88c:	bf 90       	pop	r11
     88e:	af 90       	pop	r10
     890:	9f 90       	pop	r9
     892:	8f 90       	pop	r8
     894:	08 95       	ret

00000896 <ConfigurarPinesSensores>:
	uint8_t BotonSeleccionar = 0; // Estado del sensor de la taza (0 o 1)
	uint8_t BotonAceptar = 0; // Estado del sensor de la puerta (0 o 1)
	char Buffer[2];
void ConfigurarPinesSensores() {
	// ConfiGURAMOS CIERTOS PINES DEL PUERTO D COMO ENTRADAS DIGITALES
	DDRD &= ~(1 << PD3); // PD3 
     896:	8a b1       	in	r24, 0x0a	; 10
     898:	87 7f       	andi	r24, 0xF7	; 247
     89a:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << PD4); // PD4
     89c:	8a b1       	in	r24, 0x0a	; 10
     89e:	8f 7e       	andi	r24, 0xEF	; 239
     8a0:	8a b9       	out	0x0a, r24	; 10
	
	// Activamos las resistencias de pull-up internas
	// esto quiere decir que los sensores actuan por nivel bajo
	PORTD |= (1 << PD3); // PD3
     8a2:	8b b1       	in	r24, 0x0b	; 11
     8a4:	88 60       	ori	r24, 0x08	; 8
     8a6:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << PD4); // PD4
     8a8:	8b b1       	in	r24, 0x0b	; 11
     8aa:	80 61       	ori	r24, 0x10	; 16
     8ac:	8b b9       	out	0x0b, r24	; 11
     8ae:	08 95       	ret

000008b0 <LeerSensorPuerta>:

}

int LeerSensorPuerta(void){   //NOTA: SE DA POR ENTENDIDO QUE SESNSOR PUERTA ESTÁ EN EL PIN PD3
						   //      Y SENSOR TAZA EN PD4
  SensorPuerta = !((PIND & (1 << PD4)) ? 1 : 0); // Obtiene el nivel  lógico del sensor de la puerta
     8b0:	89 b1       	in	r24, 0x09	; 9
     8b2:	82 95       	swap	r24
     8b4:	8f 70       	andi	r24, 0x0F	; 15
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	89 27       	eor	r24, r25
     8ba:	81 70       	andi	r24, 0x01	; 1
     8bc:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <SensorPuerta>
  return SensorPuerta;
}
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	08 95       	ret

000008c4 <LeerSensorTaza>:

int LeerSensorTaza(void){   //NOTA: SE DA POR ENTENDIDO QUE SESNSOR PUERTA ESTÁ EN EL PIN PD3
	//      Y SENSOR TAZA EN PD4
	SensorTaza = !((PIND & (1 << PD3)) ? 1 : 0); // Obtiene el nivel lógico de SensorTaza
     8c4:	89 b1       	in	r24, 0x09	; 9
     8c6:	86 95       	lsr	r24
     8c8:	86 95       	lsr	r24
     8ca:	86 95       	lsr	r24
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	89 27       	eor	r24, r25
     8d0:	81 70       	andi	r24, 0x01	; 1
     8d2:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <SensorTaza>
	return SensorTaza;
}
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	08 95       	ret

000008da <ConfigurarBotones>:
void ConfigurarBotones(void){
	DDRD &= ~(1 << PPD5); // PD5 como entrada
     8da:	8a b1       	in	r24, 0x0a	; 10
     8dc:	8f 7d       	andi	r24, 0xDF	; 223
     8de:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << PPD6); // PD6 como entrada
     8e0:	8a b1       	in	r24, 0x0a	; 10
     8e2:	8f 7b       	andi	r24, 0xBF	; 191
     8e4:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PPD5); // Resistencia de pull up
     8e6:	8b b1       	in	r24, 0x0b	; 11
     8e8:	80 62       	ori	r24, 0x20	; 32
     8ea:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << PPD6); // Resistencia de pull up
     8ec:	8b b1       	in	r24, 0x0b	; 11
     8ee:	80 64       	ori	r24, 0x40	; 64
     8f0:	8b b9       	out	0x0b, r24	; 11
     8f2:	08 95       	ret

000008f4 <LeerBotonSeleccionar>:
}
int LeerBotonSeleccionar(void){   //NOTA: SE DA POR ENTENDIDO QUE SESNSOR PUERTA ESTÁ EN EL PIN PD3
	//      Y SENSOR TAZA EN PD4
	BotonSeleccionar = !((PIND & (1 << PPD5)) ? 1 : 0); // Obtiene el nivel  lógico del sensor de la puerta
     8f4:	89 b1       	in	r24, 0x09	; 9
     8f6:	82 95       	swap	r24
     8f8:	86 95       	lsr	r24
     8fa:	87 70       	andi	r24, 0x07	; 7
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	89 27       	eor	r24, r25
     900:	81 70       	andi	r24, 0x01	; 1
     902:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <BotonSeleccionar>
	return BotonSeleccionar;
}
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	08 95       	ret

0000090a <LeerBotonAceptar>:

int LeerBotonAceptar(void){   //NOTA: SE DA POR ENTENDIDO QUE SESNSOR PUERTA ESTÁ EN EL PIN PD3
	//      Y SENSOR TAZA EN PD4
	BotonAceptar = !((PIND & (1 << PPD6)) ? 1 : 0); // Obtiene el nivel lógico de SensorTaza
     90a:	89 b1       	in	r24, 0x09	; 9
     90c:	82 95       	swap	r24
     90e:	86 95       	lsr	r24
     910:	86 95       	lsr	r24
     912:	83 70       	andi	r24, 0x03	; 3
     914:	91 e0       	ldi	r25, 0x01	; 1
     916:	89 27       	eor	r24, r25
     918:	81 70       	andi	r24, 0x01	; 1
     91a:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <__data_end>
	return BotonAceptar;
}	
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	08 95       	ret

00000922 <uart_init>:

#include "UART.h"
void uart_init() {
	// Configurar la velocidad de transmisión a 9600
	UBRR0H = 0;
     922:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 103;
     926:	87 e6       	ldi	r24, 0x67	; 103
     928:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilitar el transmisor y el receptor
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);
     92c:	88 e1       	ldi	r24, 0x18	; 24
     92e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// Configurar el formato del trama: 8 bits de datos, 1 bit de parada
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     932:	86 e0       	ldi	r24, 0x06	; 6
     934:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     938:	08 95       	ret

0000093a <uart_send_char>:
}

// Enviar un solo carácter por la UART
void uart_send_char(char c) {
	while (!(UCSR0A & (1 << UDRE0))); // Esperar hasta que el buffer esté vacío
     93a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     93e:	95 ff       	sbrs	r25, 5
     940:	fc cf       	rjmp	.-8      	; 0x93a <uart_send_char>
	UDR0 = c;
     942:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     946:	08 95       	ret

00000948 <uart_send_string>:
}

// Enviar una cadena (texto) terminada en nulo por la UART
void uart_send_string(const char* str) {
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	ec 01       	movw	r28, r24
	while (*str) {
     94e:	03 c0       	rjmp	.+6      	; 0x956 <uart_send_string+0xe>
		uart_send_char(*str);
     950:	0e 94 9d 04 	call	0x93a	; 0x93a <uart_send_char>
		str++;
     954:	21 96       	adiw	r28, 0x01	; 1
	UDR0 = c;
}

// Enviar una cadena (texto) terminada en nulo por la UART
void uart_send_string(const char* str) {
	while (*str) {
     956:	88 81       	ld	r24, Y
     958:	81 11       	cpse	r24, r1
     95a:	fa cf       	rjmp	.-12     	; 0x950 <uart_send_string+0x8>
		uart_send_char(*str);
		str++;
	}
}
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	08 95       	ret

00000962 <uart_send_newline>:

// Enviar un carácter de salto de línea por la UART
void uart_send_newline() {
	uart_send_char(13);
     962:	8d e0       	ldi	r24, 0x0D	; 13
     964:	0e 94 9d 04 	call	0x93a	; 0x93a <uart_send_char>
	uart_send_char(10);
     968:	8a e0       	ldi	r24, 0x0A	; 10
     96a:	0e 94 9d 04 	call	0x93a	; 0x93a <uart_send_char>
     96e:	08 95       	ret

00000970 <MenuNivelesLcd>:
										// ATENCION: es del tipo volatile ya que cambien por interrupción
        uint8_t Simultaneidad = 0; // ¿Hay simultaneidad de presionamiento de los botones por más de 5 segundos? (0 o 1)
											
// Configurar el Timer1 para que interrumpa 

void MenuNivelesLcd(void){ //Esto se ejecuta só´lo si se han presionado "Seleccionar" y "Aceptar" por más de 5 segundos
     970:	0f 93       	push	r16
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
	escribirEnLCD(" Medidas");
     978:	8b e1       	ldi	r24, 0x1B	; 27
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
	SiguienteTextoLCD();
     980:	0e 94 bb 01 	call	0x376	; 0x376 <SiguienteTextoLCD>
	escribirEnLCD("Niveles de");
     984:	84 e2       	ldi	r24, 0x24	; 36
     986:	91 e0       	ldi	r25, 0x01	; 1
     988:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
	SiguienteTextoLCD();
     98c:	0e 94 bb 01 	call	0x376	; 0x376 <SiguienteTextoLCD>
	escribirEnLCD("Polvos %");
     990:	8f e2       	ldi	r24, 0x2F	; 47
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
	SiguienteTextoLCD();
     998:	0e 94 bb 01 	call	0x376	; 0x376 <SiguienteTextoLCD>
	escribirEnLCD("( en %)");
     99c:	88 e3       	ldi	r24, 0x38	; 56
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
	SiguienteTextoLCD();
     9a4:	0e 94 bb 01 	call	0x376	; 0x376 <SiguienteTextoLCD>
	 sprintf(Buffer, "%d", NivelPolvo1);
     9a8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <NivelPolvo1+0x1>
     9ac:	8f 93       	push	r24
     9ae:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <NivelPolvo1>
     9b2:	8f 93       	push	r24
     9b4:	08 e1       	ldi	r16, 0x18	; 24
     9b6:	11 e0       	ldi	r17, 0x01	; 1
     9b8:	1f 93       	push	r17
     9ba:	0f 93       	push	r16
     9bc:	cf eb       	ldi	r28, 0xBF	; 191
     9be:	d1 e0       	ldi	r29, 0x01	; 1
     9c0:	df 93       	push	r29
     9c2:	cf 93       	push	r28
     9c4:	0e 94 1f 09 	call	0x123e	; 0x123e <sprintf>
	escribirEnLCD(Buffer);
     9c8:	ce 01       	movw	r24, r28
     9ca:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
	SiguienteTextoLCD();
     9ce:	0e 94 bb 01 	call	0x376	; 0x376 <SiguienteTextoLCD>
	sprintf(Buffer, "%d", NivelPolvo2);
     9d2:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <NivelPolvo2+0x1>
     9d6:	8f 93       	push	r24
     9d8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <NivelPolvo2>
     9dc:	8f 93       	push	r24
     9de:	1f 93       	push	r17
     9e0:	0f 93       	push	r16
     9e2:	df 93       	push	r29
     9e4:	cf 93       	push	r28
     9e6:	0e 94 1f 09 	call	0x123e	; 0x123e <sprintf>
	escribirEnLCD(Buffer);
     9ea:	ce 01       	movw	r24, r28
     9ec:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
	SiguienteTextoLCD();
     9f0:	0e 94 bb 01 	call	0x376	; 0x376 <SiguienteTextoLCD>
	sprintf(Buffer, "%d", NivelPolvo3);
     9f4:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <NivelPolvo3+0x1>
     9f8:	8f 93       	push	r24
     9fa:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <NivelPolvo3>
     9fe:	8f 93       	push	r24
     a00:	1f 93       	push	r17
     a02:	0f 93       	push	r16
     a04:	df 93       	push	r29
     a06:	cf 93       	push	r28
     a08:	0e 94 1f 09 	call	0x123e	; 0x123e <sprintf>
	escribirEnLCD(Buffer);
     a0c:	ce 01       	movw	r24, r28
     a0e:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
	SiguienteTextoLCD();
     a12:	0e 94 bb 01 	call	0x376	; 0x376 <SiguienteTextoLCD>
	sprintf(Buffer, "%d", NivelPolvo4);
     a16:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <NivelPolvo4+0x1>
     a1a:	8f 93       	push	r24
     a1c:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <NivelPolvo4>
     a20:	8f 93       	push	r24
     a22:	1f 93       	push	r17
     a24:	0f 93       	push	r16
     a26:	df 93       	push	r29
     a28:	cf 93       	push	r28
     a2a:	0e 94 1f 09 	call	0x123e	; 0x123e <sprintf>
	escribirEnLCD(Buffer);
     a2e:	ce 01       	movw	r24, r28
     a30:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
	SiguienteTextoLCD();
     a34:	0e 94 bb 01 	call	0x376	; 0x376 <SiguienteTextoLCD>
	escribirEnLCD("Bidon:");
     a38:	80 e4       	ldi	r24, 0x40	; 64
     a3a:	91 e0       	ldi	r25, 0x01	; 1
     a3c:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
	SiguienteTextoLCD();
     a40:	0e 94 bb 01 	call	0x376	; 0x376 <SiguienteTextoLCD>
	escribirEnLCD(">Temperatura");
     a44:	87 e4       	ldi	r24, 0x47	; 71
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
	SiguienteTextoLCD();
     a4c:	0e 94 bb 01 	call	0x376	; 0x376 <SiguienteTextoLCD>
	sprintf(Buffer, "%d", TemperaturaBidon);
     a50:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <TemperaturaBidon+0x1>
     a54:	8f 93       	push	r24
     a56:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <TemperaturaBidon>
     a5a:	8f 93       	push	r24
     a5c:	1f 93       	push	r17
     a5e:	0f 93       	push	r16
     a60:	df 93       	push	r29
     a62:	cf 93       	push	r28
     a64:	0e 94 1f 09 	call	0x123e	; 0x123e <sprintf>
	escribirEnLCD(Buffer);
     a68:	ce 01       	movw	r24, r28
     a6a:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
	escribirEnLCD("*C");
     a6e:	84 e5       	ldi	r24, 0x54	; 84
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
	SiguienteTextoLCD();
     a76:	0e 94 bb 01 	call	0x376	; 0x376 <SiguienteTextoLCD>
	escribirEnLCD(">Volumen");
     a7a:	87 e5       	ldi	r24, 0x57	; 87
     a7c:	91 e0       	ldi	r25, 0x01	; 1
     a7e:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
	SiguienteTextoLCD();
     a82:	0e 94 bb 01 	call	0x376	; 0x376 <SiguienteTextoLCD>
	sprintf(Buffer, "%d", PesoBidon);
     a86:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <PesoBidon+0x1>
     a8a:	8f 93       	push	r24
     a8c:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <PesoBidon>
     a90:	8f 93       	push	r24
     a92:	1f 93       	push	r17
     a94:	0f 93       	push	r16
     a96:	df 93       	push	r29
     a98:	cf 93       	push	r28
     a9a:	0e 94 1f 09 	call	0x123e	; 0x123e <sprintf>
	escribirEnLCD(Buffer);
     a9e:	8d b7       	in	r24, 0x3d	; 61
     aa0:	9e b7       	in	r25, 0x3e	; 62
     aa2:	84 96       	adiw	r24, 0x24	; 36
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	f8 94       	cli
     aa8:	9e bf       	out	0x3e, r25	; 62
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	8d bf       	out	0x3d, r24	; 61
     aae:	ce 01       	movw	r24, r28
     ab0:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
	escribirEnLCD("ml");
     ab4:	80 e6       	ldi	r24, 0x60	; 96
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
	uart_send_newline();
     abc:	0e 94 b1 04 	call	0x962	; 0x962 <uart_send_newline>
	uart_send_string(Buffer);
     ac0:	ce 01       	movw	r24, r28
     ac2:	0e 94 a4 04 	call	0x948	; 0x948 <uart_send_string>
     ac6:	9f ed       	ldi	r25, 0xDF	; 223
     ac8:	22 eb       	ldi	r18, 0xB2	; 178
     aca:	83 e0       	ldi	r24, 0x03	; 3
     acc:	91 50       	subi	r25, 0x01	; 1
     ace:	20 40       	sbci	r18, 0x00	; 0
     ad0:	80 40       	sbci	r24, 0x00	; 0
     ad2:	e1 f7       	brne	.-8      	; 0xacc <MenuNivelesLcd+0x15c>
     ad4:	00 c0       	rjmp	.+0      	; 0xad6 <MenuNivelesLcd+0x166>
     ad6:	00 00       	nop
	_delay_ms(1212);
	SiguienteTextoLCD();
     ad8:	0e 94 bb 01 	call	0x376	; 0x376 <SiguienteTextoLCD>
}
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	08 95       	ret

00000ae6 <IniciarTemporizador>:
void IniciarTemporizador(void) {
	TCCR1B |= (1 << WGM12); // Modo CTC
     ae6:	e1 e8       	ldi	r30, 0x81	; 129
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	80 81       	ld	r24, Z
     aec:	88 60       	ori	r24, 0x08	; 8
     aee:	80 83       	st	Z, r24
	OCR1A = 64; // 
     af0:	80 e4       	ldi	r24, 0x40	; 64
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     af8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 |= (1 << OCIE1A); // Habilitar interrupción por comparación
     afc:	af e6       	ldi	r26, 0x6F	; 111
     afe:	b0 e0       	ldi	r27, 0x00	; 0
     b00:	8c 91       	ld	r24, X
     b02:	82 60       	ori	r24, 0x02	; 2
     b04:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS11) | (1 << CS10); // 
     b06:	80 81       	ld	r24, Z
     b08:	83 60       	ori	r24, 0x03	; 3
     b0a:	80 83       	st	Z, r24
     b0c:	08 95       	ret

00000b0e <__vector_11>:
}

// Rutina de servicio de interrupción para EL TEMPORIZADOR
ISR(TIMER1_COMPA_vect) {
     b0e:	1f 92       	push	r1
     b10:	0f 92       	push	r0
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	0f 92       	push	r0
     b16:	11 24       	eor	r1, r1
     b18:	2f 93       	push	r18
     b1a:	3f 93       	push	r19
     b1c:	4f 93       	push	r20
     b1e:	5f 93       	push	r21
     b20:	6f 93       	push	r22
     b22:	7f 93       	push	r23
     b24:	8f 93       	push	r24
     b26:	9f 93       	push	r25
     b28:	af 93       	push	r26
     b2a:	bf 93       	push	r27
     b2c:	ef 93       	push	r30
     b2e:	ff 93       	push	r31
	if ((BotonSeleccionarr == 1) && (BotonAceptarr == 1)) {
     b30:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <BotonSeleccionarr>
     b34:	81 30       	cpi	r24, 0x01	; 1
     b36:	81 f4       	brne	.+32     	; 0xb58 <__vector_11+0x4a>
     b38:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <BotonAceptarr>
     b3c:	81 30       	cpi	r24, 0x01	; 1
     b3e:	61 f4       	brne	.+24     	; 0xb58 <__vector_11+0x4a>
	     ContadorTiempo++;
     b40:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <ContadorTiempo>
     b44:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <ContadorTiempo+0x1>
     b48:	01 96       	adiw	r24, 0x01	; 1
     b4a:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <ContadorTiempo+0x1>
     b4e:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <ContadorTiempo>
		 Simultaneidad=0;
     b52:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <Simultaneidad>
     b56:	06 c0       	rjmp	.+12     	; 0xb64 <__vector_11+0x56>
		 
		} else {
		 // Reiniciar contador si el botón no está presionado
		ContadorTiempo=0;
     b58:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <ContadorTiempo+0x1>
     b5c:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <ContadorTiempo>
		Simultaneidad=0;
     b60:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <Simultaneidad>
     if (ContadorTiempo == 3800) { //cada 1 segundo
		 //ControlarTemperatura();
	 }
		 // Incrementar el contador de tiempo

	if (ContadorTiempo == 18999) { // 4978 m ~5 seg
     b64:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <ContadorTiempo>
     b68:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <ContadorTiempo+0x1>
     b6c:	87 33       	cpi	r24, 0x37	; 55
     b6e:	9a 44       	sbci	r25, 0x4A	; 74
     b70:	19 f5       	brne	.+70     	; 0xbb8 <__vector_11+0xaa>
		 Simultaneidad=1; // 
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <Simultaneidad>
		 //ControlarTemperatura(); //para evitar que se pierda mucho tiempo el control
		 ContadorTiempo = 0; // Reiniciar el contador de tiempo
     b78:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <ContadorTiempo+0x1>
     b7c:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <ContadorTiempo>
		 sprintf(Buffer, "%d", Simultaneidad); // Convierte el entero a una cadena
     b80:	1f 92       	push	r1
     b82:	8f 93       	push	r24
     b84:	88 e1       	ldi	r24, 0x18	; 24
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	9f 93       	push	r25
     b8a:	8f 93       	push	r24
     b8c:	8f eb       	ldi	r24, 0xBF	; 191
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	9f 93       	push	r25
     b92:	8f 93       	push	r24
     b94:	0e 94 1f 09 	call	0x123e	; 0x123e <sprintf>
		 uart_send_string(Buffer);
     b98:	8f eb       	ldi	r24, 0xBF	; 191
     b9a:	91 e0       	ldi	r25, 0x01	; 1
     b9c:	0e 94 a4 04 	call	0x948	; 0x948 <uart_send_string>
		  lcd_init();
     ba0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_init>
		  MenuNivelesLcd();
     ba4:	0e 94 b8 04 	call	0x970	; 0x970 <MenuNivelesLcd>
		 i2c_stop();
     ba8:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_stop>
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
	}
}
     bb8:	ff 91       	pop	r31
     bba:	ef 91       	pop	r30
     bbc:	bf 91       	pop	r27
     bbe:	af 91       	pop	r26
     bc0:	9f 91       	pop	r25
     bc2:	8f 91       	pop	r24
     bc4:	7f 91       	pop	r23
     bc6:	6f 91       	pop	r22
     bc8:	5f 91       	pop	r21
     bca:	4f 91       	pop	r20
     bcc:	3f 91       	pop	r19
     bce:	2f 91       	pop	r18
     bd0:	0f 90       	pop	r0
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	0f 90       	pop	r0
     bd6:	1f 90       	pop	r1
     bd8:	18 95       	reti

00000bda <LeerBotones>:

void LeerBotones(void) {
	BotonSeleccionarr = LeerBotonSeleccionar();
     bda:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <LeerBotonSeleccionar>
     bde:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <BotonSeleccionarr>
	BotonAceptarr = LeerBotonAceptar();
     be2:	0e 94 85 04 	call	0x90a	; 0x90a <LeerBotonAceptar>
     be6:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <BotonAceptarr>

	if (BotonSeleccionarr == 1) {
     bea:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <BotonSeleccionarr>
     bee:	81 30       	cpi	r24, 0x01	; 1
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <LeerBotones+0x1a>
     bf2:	41 c0       	rjmp	.+130    	; 0xc76 <LeerBotones+0x9c>
		SelectorMenuLCD = SelectorMenuLCD + 1;
     bf4:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <SelectorMenuLCD>
     bf8:	8f 5f       	subi	r24, 0xFF	; 255
     bfa:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <SelectorMenuLCD>
			if (SelectorMenuLCD == 5) {
     bfe:	85 30       	cpi	r24, 0x05	; 5
     c00:	61 f4       	brne	.+24     	; 0xc1a <LeerBotones+0x40>
				SelectorMenuLCD = 1;
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <SelectorMenuLCD>
     c08:	08 c0       	rjmp	.+16     	; 0xc1a <LeerBotones+0x40>
				}

		while (BotonSeleccionarr == 1) {  // Para evitar rebotes
			if (Simultaneidad==0){
     c0a:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <Simultaneidad>
     c0e:	81 11       	cpse	r24, r1
     c10:	04 c0       	rjmp	.+8      	; 0xc1a <LeerBotones+0x40>
			BotonSeleccionarr = LeerBotonSeleccionar();}  // Esperar a que se suelte el botón
     c12:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <LeerBotonSeleccionar>
     c16:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <BotonSeleccionarr>
		SelectorMenuLCD = SelectorMenuLCD + 1;
			if (SelectorMenuLCD == 5) {
				SelectorMenuLCD = 1;
				}

		while (BotonSeleccionarr == 1) {  // Para evitar rebotes
     c1a:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <BotonSeleccionarr>
     c1e:	81 30       	cpi	r24, 0x01	; 1
     c20:	a1 f3       	breq	.-24     	; 0xc0a <LeerBotones+0x30>
			if (Simultaneidad==0){
			BotonSeleccionarr = LeerBotonSeleccionar();}  // Esperar a que se suelte el botón
		}
			lcd_init(); // Inicializar el LCD
     c22:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_init>
			switch (SelectorMenuLCD) {
     c26:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <SelectorMenuLCD>
     c2a:	82 30       	cpi	r24, 0x02	; 2
     c2c:	71 f0       	breq	.+28     	; 0xc4a <LeerBotones+0x70>
     c2e:	18 f4       	brcc	.+6      	; 0xc36 <LeerBotones+0x5c>
     c30:	81 30       	cpi	r24, 0x01	; 1
     c32:	31 f0       	breq	.+12     	; 0xc40 <LeerBotones+0x66>
     c34:	19 c0       	rjmp	.+50     	; 0xc68 <LeerBotones+0x8e>
     c36:	83 30       	cpi	r24, 0x03	; 3
     c38:	69 f0       	breq	.+26     	; 0xc54 <LeerBotones+0x7a>
     c3a:	84 30       	cpi	r24, 0x04	; 4
     c3c:	81 f0       	breq	.+32     	; 0xc5e <LeerBotones+0x84>
     c3e:	14 c0       	rjmp	.+40     	; 0xc68 <LeerBotones+0x8e>
			case 1:
			escribirEnLCD(" Bebida 1");
     c40:	83 e6       	ldi	r24, 0x63	; 99
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
			break;
     c48:	08 95       	ret
			case 2:
			escribirEnLCD(" Bebida 2");
     c4a:	8d e6       	ldi	r24, 0x6D	; 109
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
			break;
     c52:	08 95       	ret
			case 3:
			escribirEnLCD(" Bebida 3");
     c54:	87 e7       	ldi	r24, 0x77	; 119
     c56:	91 e0       	ldi	r25, 0x01	; 1
     c58:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
			break;
     c5c:	08 95       	ret
			case 4:
			escribirEnLCD(" Bebida 4");
     c5e:	81 e8       	ldi	r24, 0x81	; 129
     c60:	91 e0       	ldi	r25, 0x01	; 1
     c62:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
			break;
     c66:	08 95       	ret
			default:
			SelectorMenuLCD=1;
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <SelectorMenuLCD>
			escribirEnLCD(" Bebida 1");
     c6e:	83 e6       	ldi	r24, 0x63	; 99
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
     c76:	08 95       	ret

00000c78 <LeerSensores>:
			break;
		i2c_stop();}
	}
}
void LeerSensores(void){
	 SensorrTaza=LeerSensorTaza();
     c78:	0e 94 62 04 	call	0x8c4	; 0x8c4 <LeerSensorTaza>
     c7c:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <SensorrTaza>
	 SensorrPuerta=LeerSensorPuerta();
     c80:	0e 94 58 04 	call	0x8b0	; 0x8b0 <LeerSensorPuerta>
     c84:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <SensorrPuerta>
     c88:	08 95       	ret

00000c8a <MedicionPolvos>:
	 } 
void MedicionPolvos(void){
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
	leer_ADC(0); // Lee el valor del pin PC0
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 64 00 	call	0xc8	; 0xc8 <leer_ADC>
	NivelPolvo1 = ((float)ADC/1023)*100; // Guarda el valor del ADC en porcentaje (por eso dividimos por la resolución y por 100)
     c96:	c8 e7       	ldi	r28, 0x78	; 120
     c98:	d0 e0       	ldi	r29, 0x00	; 0
     c9a:	68 81       	ld	r22, Y
     c9c:	79 81       	ldd	r23, Y+1	; 0x01
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	0e 94 fe 07 	call	0xffc	; 0xffc <__floatunsisf>
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 ec       	ldi	r19, 0xC0	; 192
     caa:	4f e7       	ldi	r20, 0x7F	; 127
     cac:	54 e4       	ldi	r21, 0x44	; 68
     cae:	0e 94 56 07 	call	0xeac	; 0xeac <__divsf3>
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	48 ec       	ldi	r20, 0xC8	; 200
     cb8:	52 e4       	ldi	r21, 0x42	; 66
     cba:	0e 94 8c 08 	call	0x1118	; 0x1118 <__mulsf3>
     cbe:	0e 94 c8 07 	call	0xf90	; 0xf90 <__fixsfsi>
     cc2:	70 93 b6 01 	sts	0x01B6, r23	; 0x8001b6 <NivelPolvo1+0x1>
     cc6:	60 93 b5 01 	sts	0x01B5, r22	; 0x8001b5 <NivelPolvo1>
    leer_ADC(1); // Lee el valor del pin PC0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 94 64 00 	call	0xc8	; 0xc8 <leer_ADC>
    NivelPolvo2 = ((float)ADC/1023)*100; // Guarda el valor del ADC en porcentaje (por eso dividimos por la resolución y por 100)
     cd2:	68 81       	ld	r22, Y
     cd4:	79 81       	ldd	r23, Y+1	; 0x01
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	0e 94 fe 07 	call	0xffc	; 0xffc <__floatunsisf>
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 ec       	ldi	r19, 0xC0	; 192
     ce2:	4f e7       	ldi	r20, 0x7F	; 127
     ce4:	54 e4       	ldi	r21, 0x44	; 68
     ce6:	0e 94 56 07 	call	0xeac	; 0xeac <__divsf3>
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	48 ec       	ldi	r20, 0xC8	; 200
     cf0:	52 e4       	ldi	r21, 0x42	; 66
     cf2:	0e 94 8c 08 	call	0x1118	; 0x1118 <__mulsf3>
     cf6:	0e 94 c8 07 	call	0xf90	; 0xf90 <__fixsfsi>
     cfa:	70 93 be 01 	sts	0x01BE, r23	; 0x8001be <NivelPolvo2+0x1>
     cfe:	60 93 bd 01 	sts	0x01BD, r22	; 0x8001bd <NivelPolvo2>
	 leer_ADC(2); // Lee el valor del pin PC0
     d02:	82 e0       	ldi	r24, 0x02	; 2
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 64 00 	call	0xc8	; 0xc8 <leer_ADC>
	 NivelPolvo3 = ((float)ADC/1023)*100; // Guarda el valor del ADC en porcentaje (por eso dividimos por la resolución y por 100)
     d0a:	68 81       	ld	r22, Y
     d0c:	79 81       	ldd	r23, Y+1	; 0x01
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	0e 94 fe 07 	call	0xffc	; 0xffc <__floatunsisf>
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 ec       	ldi	r19, 0xC0	; 192
     d1a:	4f e7       	ldi	r20, 0x7F	; 127
     d1c:	54 e4       	ldi	r21, 0x44	; 68
     d1e:	0e 94 56 07 	call	0xeac	; 0xeac <__divsf3>
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	48 ec       	ldi	r20, 0xC8	; 200
     d28:	52 e4       	ldi	r21, 0x42	; 66
     d2a:	0e 94 8c 08 	call	0x1118	; 0x1118 <__mulsf3>
     d2e:	0e 94 c8 07 	call	0xf90	; 0xf90 <__fixsfsi>
     d32:	70 93 bc 01 	sts	0x01BC, r23	; 0x8001bc <NivelPolvo3+0x1>
     d36:	60 93 bb 01 	sts	0x01BB, r22	; 0x8001bb <NivelPolvo3>
	leer_ADC(3); // Lee el valor del pin PC0
     d3a:	83 e0       	ldi	r24, 0x03	; 3
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	0e 94 64 00 	call	0xc8	; 0xc8 <leer_ADC>
	 NivelPolvo4 = ((float)ADC/1023)*100; // Guarda el valor del ADC en porcentaje (por eso dividimos por la resolución y por 100)
     d42:	68 81       	ld	r22, Y
     d44:	79 81       	ldd	r23, Y+1	; 0x01
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 fe 07 	call	0xffc	; 0xffc <__floatunsisf>
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 ec       	ldi	r19, 0xC0	; 192
     d52:	4f e7       	ldi	r20, 0x7F	; 127
     d54:	54 e4       	ldi	r21, 0x44	; 68
     d56:	0e 94 56 07 	call	0xeac	; 0xeac <__divsf3>
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	48 ec       	ldi	r20, 0xC8	; 200
     d60:	52 e4       	ldi	r21, 0x42	; 66
     d62:	0e 94 8c 08 	call	0x1118	; 0x1118 <__mulsf3>
     d66:	0e 94 c8 07 	call	0xf90	; 0xf90 <__fixsfsi>
     d6a:	70 93 ba 01 	sts	0x01BA, r23	; 0x8001ba <NivelPolvo4+0x1>
     d6e:	60 93 b9 01 	sts	0x01B9, r22	; 0x8001b9 <NivelPolvo4>
	};	
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	08 95       	ret

00000d78 <MedirBidon>:
void MedirBidon(void){
	TWI_ini(); //INCIALIZA EL i2c del mcp3421 (TIENE UNA CONFIGURACIÓN ESPECIAL, NO HAY QUE TOCAR)
     d78:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <TWI_ini>
	MCP3421_config(); //configura el sensor MCP3421
     d7c:	0e 94 28 02 	call	0x450	; 0x450 <MCP3421_config>
	PesoBidon=PesarAgua();
     d80:	0e 94 66 02 	call	0x4cc	; 0x4cc <PesarAgua>
     d84:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <PesoBidon+0x1>
     d88:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <PesoBidon>
	TWI_Stop(); //cerramos 
     d8c:	0e 94 24 02 	call	0x448	; 0x448 <TWI_Stop>
	TemperaturaBidon=LeerTemperatura();
     d90:	0e 94 bc 03 	call	0x778	; 0x778 <LeerTemperatura>
     d94:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <TemperaturaBidon+0x1>
     d98:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <TemperaturaBidon>
     d9c:	08 95       	ret

00000d9e <MedirVariables>:
	}
void MedirVariables(void){
		MedicionPolvos();
     d9e:	0e 94 45 06 	call	0xc8a	; 0xc8a <MedicionPolvos>
		MedirBidon();
     da2:	0e 94 bc 06 	call	0xd78	; 0xd78 <MedirBidon>
        LeerSensores();
     da6:	0e 94 3c 06 	call	0xc78	; 0xc78 <LeerSensores>
		LeerBotones();
     daa:	0e 94 ed 05 	call	0xbda	; 0xbda <LeerBotones>
     dae:	08 95       	ret

00000db0 <ConfiguracionIncial>:
	}
void ConfiguracionIncial(void){
	   iniciar_ADC();					// Inicializamos el ADC
     db0:	0e 94 53 00 	call	0xa6	; 0xa6 <iniciar_ADC>
       uart_init();						//Inicializamos la uart
     db4:	0e 94 91 04 	call	0x922	; 0x922 <uart_init>
	   ConfigurarPinesSensores();		//Configuramos los pines de los sensores 
     db8:	0e 94 4b 04 	call	0x896	; 0x896 <ConfigurarPinesSensores>
	   ConfigurarBotones();				//Configuramos los botones.
     dbc:	0e 94 6d 04 	call	0x8da	; 0x8da <ConfigurarBotones>
	   IniciarTemporizador();           // Configuramos el timer.
     dc0:	0e 94 73 05 	call	0xae6	; 0xae6 <IniciarTemporizador>
	   sei();                           // Habilitar interrupciones globales
     dc4:	78 94       	sei
     dc6:	08 95       	ret

00000dc8 <main>:
vvvvvv   Función main  vvvvvvv
==============================
*/
   
int main(void){ 
	   ConfiguracionIncial();//Configuramos todo
     dc8:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <ConfiguracionIncial>
	while(1){	 
	MedirVariables();// Sensamos todas nuestras variables
     dcc:	0e 94 cf 06 	call	0xd9e	; 0xd9e <MedirVariables>
     dd0:	fd cf       	rjmp	.-6      	; 0xdcc <main+0x4>

00000dd2 <__subsf3>:
     dd2:	50 58       	subi	r21, 0x80	; 128

00000dd4 <__addsf3>:
     dd4:	bb 27       	eor	r27, r27
     dd6:	aa 27       	eor	r26, r26
     dd8:	0e 94 01 07 	call	0xe02	; 0xe02 <__addsf3x>
     ddc:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__fp_round>
     de0:	0e 94 44 08 	call	0x1088	; 0x1088 <__fp_pscA>
     de4:	38 f0       	brcs	.+14     	; 0xdf4 <__addsf3+0x20>
     de6:	0e 94 4b 08 	call	0x1096	; 0x1096 <__fp_pscB>
     dea:	20 f0       	brcs	.+8      	; 0xdf4 <__addsf3+0x20>
     dec:	39 f4       	brne	.+14     	; 0xdfc <__addsf3+0x28>
     dee:	9f 3f       	cpi	r25, 0xFF	; 255
     df0:	19 f4       	brne	.+6      	; 0xdf8 <__addsf3+0x24>
     df2:	26 f4       	brtc	.+8      	; 0xdfc <__addsf3+0x28>
     df4:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__fp_nan>
     df8:	0e f4       	brtc	.+2      	; 0xdfc <__addsf3+0x28>
     dfa:	e0 95       	com	r30
     dfc:	e7 fb       	bst	r30, 7
     dfe:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__fp_inf>

00000e02 <__addsf3x>:
     e02:	e9 2f       	mov	r30, r25
     e04:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__fp_split3>
     e08:	58 f3       	brcs	.-42     	; 0xde0 <__addsf3+0xc>
     e0a:	ba 17       	cp	r27, r26
     e0c:	62 07       	cpc	r22, r18
     e0e:	73 07       	cpc	r23, r19
     e10:	84 07       	cpc	r24, r20
     e12:	95 07       	cpc	r25, r21
     e14:	20 f0       	brcs	.+8      	; 0xe1e <__addsf3x+0x1c>
     e16:	79 f4       	brne	.+30     	; 0xe36 <__addsf3x+0x34>
     e18:	a6 f5       	brtc	.+104    	; 0xe82 <__addsf3x+0x80>
     e1a:	0c 94 85 08 	jmp	0x110a	; 0x110a <__fp_zero>
     e1e:	0e f4       	brtc	.+2      	; 0xe22 <__addsf3x+0x20>
     e20:	e0 95       	com	r30
     e22:	0b 2e       	mov	r0, r27
     e24:	ba 2f       	mov	r27, r26
     e26:	a0 2d       	mov	r26, r0
     e28:	0b 01       	movw	r0, r22
     e2a:	b9 01       	movw	r22, r18
     e2c:	90 01       	movw	r18, r0
     e2e:	0c 01       	movw	r0, r24
     e30:	ca 01       	movw	r24, r20
     e32:	a0 01       	movw	r20, r0
     e34:	11 24       	eor	r1, r1
     e36:	ff 27       	eor	r31, r31
     e38:	59 1b       	sub	r21, r25
     e3a:	99 f0       	breq	.+38     	; 0xe62 <__addsf3x+0x60>
     e3c:	59 3f       	cpi	r21, 0xF9	; 249
     e3e:	50 f4       	brcc	.+20     	; 0xe54 <__addsf3x+0x52>
     e40:	50 3e       	cpi	r21, 0xE0	; 224
     e42:	68 f1       	brcs	.+90     	; 0xe9e <__addsf3x+0x9c>
     e44:	1a 16       	cp	r1, r26
     e46:	f0 40       	sbci	r31, 0x00	; 0
     e48:	a2 2f       	mov	r26, r18
     e4a:	23 2f       	mov	r18, r19
     e4c:	34 2f       	mov	r19, r20
     e4e:	44 27       	eor	r20, r20
     e50:	58 5f       	subi	r21, 0xF8	; 248
     e52:	f3 cf       	rjmp	.-26     	; 0xe3a <__addsf3x+0x38>
     e54:	46 95       	lsr	r20
     e56:	37 95       	ror	r19
     e58:	27 95       	ror	r18
     e5a:	a7 95       	ror	r26
     e5c:	f0 40       	sbci	r31, 0x00	; 0
     e5e:	53 95       	inc	r21
     e60:	c9 f7       	brne	.-14     	; 0xe54 <__addsf3x+0x52>
     e62:	7e f4       	brtc	.+30     	; 0xe82 <__addsf3x+0x80>
     e64:	1f 16       	cp	r1, r31
     e66:	ba 0b       	sbc	r27, r26
     e68:	62 0b       	sbc	r22, r18
     e6a:	73 0b       	sbc	r23, r19
     e6c:	84 0b       	sbc	r24, r20
     e6e:	ba f0       	brmi	.+46     	; 0xe9e <__addsf3x+0x9c>
     e70:	91 50       	subi	r25, 0x01	; 1
     e72:	a1 f0       	breq	.+40     	; 0xe9c <__addsf3x+0x9a>
     e74:	ff 0f       	add	r31, r31
     e76:	bb 1f       	adc	r27, r27
     e78:	66 1f       	adc	r22, r22
     e7a:	77 1f       	adc	r23, r23
     e7c:	88 1f       	adc	r24, r24
     e7e:	c2 f7       	brpl	.-16     	; 0xe70 <__addsf3x+0x6e>
     e80:	0e c0       	rjmp	.+28     	; 0xe9e <__addsf3x+0x9c>
     e82:	ba 0f       	add	r27, r26
     e84:	62 1f       	adc	r22, r18
     e86:	73 1f       	adc	r23, r19
     e88:	84 1f       	adc	r24, r20
     e8a:	48 f4       	brcc	.+18     	; 0xe9e <__addsf3x+0x9c>
     e8c:	87 95       	ror	r24
     e8e:	77 95       	ror	r23
     e90:	67 95       	ror	r22
     e92:	b7 95       	ror	r27
     e94:	f7 95       	ror	r31
     e96:	9e 3f       	cpi	r25, 0xFE	; 254
     e98:	08 f0       	brcs	.+2      	; 0xe9c <__addsf3x+0x9a>
     e9a:	b0 cf       	rjmp	.-160    	; 0xdfc <__addsf3+0x28>
     e9c:	93 95       	inc	r25
     e9e:	88 0f       	add	r24, r24
     ea0:	08 f0       	brcs	.+2      	; 0xea4 <__addsf3x+0xa2>
     ea2:	99 27       	eor	r25, r25
     ea4:	ee 0f       	add	r30, r30
     ea6:	97 95       	ror	r25
     ea8:	87 95       	ror	r24
     eaa:	08 95       	ret

00000eac <__divsf3>:
     eac:	0e 94 6a 07 	call	0xed4	; 0xed4 <__divsf3x>
     eb0:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__fp_round>
     eb4:	0e 94 4b 08 	call	0x1096	; 0x1096 <__fp_pscB>
     eb8:	58 f0       	brcs	.+22     	; 0xed0 <__divsf3+0x24>
     eba:	0e 94 44 08 	call	0x1088	; 0x1088 <__fp_pscA>
     ebe:	40 f0       	brcs	.+16     	; 0xed0 <__divsf3+0x24>
     ec0:	29 f4       	brne	.+10     	; 0xecc <__divsf3+0x20>
     ec2:	5f 3f       	cpi	r21, 0xFF	; 255
     ec4:	29 f0       	breq	.+10     	; 0xed0 <__divsf3+0x24>
     ec6:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__fp_inf>
     eca:	51 11       	cpse	r21, r1
     ecc:	0c 94 86 08 	jmp	0x110c	; 0x110c <__fp_szero>
     ed0:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__fp_nan>

00000ed4 <__divsf3x>:
     ed4:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__fp_split3>
     ed8:	68 f3       	brcs	.-38     	; 0xeb4 <__divsf3+0x8>

00000eda <__divsf3_pse>:
     eda:	99 23       	and	r25, r25
     edc:	b1 f3       	breq	.-20     	; 0xeca <__divsf3+0x1e>
     ede:	55 23       	and	r21, r21
     ee0:	91 f3       	breq	.-28     	; 0xec6 <__divsf3+0x1a>
     ee2:	95 1b       	sub	r25, r21
     ee4:	55 0b       	sbc	r21, r21
     ee6:	bb 27       	eor	r27, r27
     ee8:	aa 27       	eor	r26, r26
     eea:	62 17       	cp	r22, r18
     eec:	73 07       	cpc	r23, r19
     eee:	84 07       	cpc	r24, r20
     ef0:	38 f0       	brcs	.+14     	; 0xf00 <__divsf3_pse+0x26>
     ef2:	9f 5f       	subi	r25, 0xFF	; 255
     ef4:	5f 4f       	sbci	r21, 0xFF	; 255
     ef6:	22 0f       	add	r18, r18
     ef8:	33 1f       	adc	r19, r19
     efa:	44 1f       	adc	r20, r20
     efc:	aa 1f       	adc	r26, r26
     efe:	a9 f3       	breq	.-22     	; 0xeea <__divsf3_pse+0x10>
     f00:	35 d0       	rcall	.+106    	; 0xf6c <__divsf3_pse+0x92>
     f02:	0e 2e       	mov	r0, r30
     f04:	3a f0       	brmi	.+14     	; 0xf14 <__divsf3_pse+0x3a>
     f06:	e0 e8       	ldi	r30, 0x80	; 128
     f08:	32 d0       	rcall	.+100    	; 0xf6e <__divsf3_pse+0x94>
     f0a:	91 50       	subi	r25, 0x01	; 1
     f0c:	50 40       	sbci	r21, 0x00	; 0
     f0e:	e6 95       	lsr	r30
     f10:	00 1c       	adc	r0, r0
     f12:	ca f7       	brpl	.-14     	; 0xf06 <__divsf3_pse+0x2c>
     f14:	2b d0       	rcall	.+86     	; 0xf6c <__divsf3_pse+0x92>
     f16:	fe 2f       	mov	r31, r30
     f18:	29 d0       	rcall	.+82     	; 0xf6c <__divsf3_pse+0x92>
     f1a:	66 0f       	add	r22, r22
     f1c:	77 1f       	adc	r23, r23
     f1e:	88 1f       	adc	r24, r24
     f20:	bb 1f       	adc	r27, r27
     f22:	26 17       	cp	r18, r22
     f24:	37 07       	cpc	r19, r23
     f26:	48 07       	cpc	r20, r24
     f28:	ab 07       	cpc	r26, r27
     f2a:	b0 e8       	ldi	r27, 0x80	; 128
     f2c:	09 f0       	breq	.+2      	; 0xf30 <__divsf3_pse+0x56>
     f2e:	bb 0b       	sbc	r27, r27
     f30:	80 2d       	mov	r24, r0
     f32:	bf 01       	movw	r22, r30
     f34:	ff 27       	eor	r31, r31
     f36:	93 58       	subi	r25, 0x83	; 131
     f38:	5f 4f       	sbci	r21, 0xFF	; 255
     f3a:	3a f0       	brmi	.+14     	; 0xf4a <__divsf3_pse+0x70>
     f3c:	9e 3f       	cpi	r25, 0xFE	; 254
     f3e:	51 05       	cpc	r21, r1
     f40:	78 f0       	brcs	.+30     	; 0xf60 <__divsf3_pse+0x86>
     f42:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__fp_inf>
     f46:	0c 94 86 08 	jmp	0x110c	; 0x110c <__fp_szero>
     f4a:	5f 3f       	cpi	r21, 0xFF	; 255
     f4c:	e4 f3       	brlt	.-8      	; 0xf46 <__divsf3_pse+0x6c>
     f4e:	98 3e       	cpi	r25, 0xE8	; 232
     f50:	d4 f3       	brlt	.-12     	; 0xf46 <__divsf3_pse+0x6c>
     f52:	86 95       	lsr	r24
     f54:	77 95       	ror	r23
     f56:	67 95       	ror	r22
     f58:	b7 95       	ror	r27
     f5a:	f7 95       	ror	r31
     f5c:	9f 5f       	subi	r25, 0xFF	; 255
     f5e:	c9 f7       	brne	.-14     	; 0xf52 <__divsf3_pse+0x78>
     f60:	88 0f       	add	r24, r24
     f62:	91 1d       	adc	r25, r1
     f64:	96 95       	lsr	r25
     f66:	87 95       	ror	r24
     f68:	97 f9       	bld	r25, 7
     f6a:	08 95       	ret
     f6c:	e1 e0       	ldi	r30, 0x01	; 1
     f6e:	66 0f       	add	r22, r22
     f70:	77 1f       	adc	r23, r23
     f72:	88 1f       	adc	r24, r24
     f74:	bb 1f       	adc	r27, r27
     f76:	62 17       	cp	r22, r18
     f78:	73 07       	cpc	r23, r19
     f7a:	84 07       	cpc	r24, r20
     f7c:	ba 07       	cpc	r27, r26
     f7e:	20 f0       	brcs	.+8      	; 0xf88 <__divsf3_pse+0xae>
     f80:	62 1b       	sub	r22, r18
     f82:	73 0b       	sbc	r23, r19
     f84:	84 0b       	sbc	r24, r20
     f86:	ba 0b       	sbc	r27, r26
     f88:	ee 1f       	adc	r30, r30
     f8a:	88 f7       	brcc	.-30     	; 0xf6e <__divsf3_pse+0x94>
     f8c:	e0 95       	com	r30
     f8e:	08 95       	ret

00000f90 <__fixsfsi>:
     f90:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fixunssfsi>
     f94:	68 94       	set
     f96:	b1 11       	cpse	r27, r1
     f98:	0c 94 86 08 	jmp	0x110c	; 0x110c <__fp_szero>
     f9c:	08 95       	ret

00000f9e <__fixunssfsi>:
     f9e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fp_splitA>
     fa2:	88 f0       	brcs	.+34     	; 0xfc6 <__fixunssfsi+0x28>
     fa4:	9f 57       	subi	r25, 0x7F	; 127
     fa6:	98 f0       	brcs	.+38     	; 0xfce <__fixunssfsi+0x30>
     fa8:	b9 2f       	mov	r27, r25
     faa:	99 27       	eor	r25, r25
     fac:	b7 51       	subi	r27, 0x17	; 23
     fae:	b0 f0       	brcs	.+44     	; 0xfdc <__fixunssfsi+0x3e>
     fb0:	e1 f0       	breq	.+56     	; 0xfea <__fixunssfsi+0x4c>
     fb2:	66 0f       	add	r22, r22
     fb4:	77 1f       	adc	r23, r23
     fb6:	88 1f       	adc	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	1a f0       	brmi	.+6      	; 0xfc2 <__fixunssfsi+0x24>
     fbc:	ba 95       	dec	r27
     fbe:	c9 f7       	brne	.-14     	; 0xfb2 <__fixunssfsi+0x14>
     fc0:	14 c0       	rjmp	.+40     	; 0xfea <__fixunssfsi+0x4c>
     fc2:	b1 30       	cpi	r27, 0x01	; 1
     fc4:	91 f0       	breq	.+36     	; 0xfea <__fixunssfsi+0x4c>
     fc6:	0e 94 85 08 	call	0x110a	; 0x110a <__fp_zero>
     fca:	b1 e0       	ldi	r27, 0x01	; 1
     fcc:	08 95       	ret
     fce:	0c 94 85 08 	jmp	0x110a	; 0x110a <__fp_zero>
     fd2:	67 2f       	mov	r22, r23
     fd4:	78 2f       	mov	r23, r24
     fd6:	88 27       	eor	r24, r24
     fd8:	b8 5f       	subi	r27, 0xF8	; 248
     fda:	39 f0       	breq	.+14     	; 0xfea <__fixunssfsi+0x4c>
     fdc:	b9 3f       	cpi	r27, 0xF9	; 249
     fde:	cc f3       	brlt	.-14     	; 0xfd2 <__fixunssfsi+0x34>
     fe0:	86 95       	lsr	r24
     fe2:	77 95       	ror	r23
     fe4:	67 95       	ror	r22
     fe6:	b3 95       	inc	r27
     fe8:	d9 f7       	brne	.-10     	; 0xfe0 <__fixunssfsi+0x42>
     fea:	3e f4       	brtc	.+14     	; 0xffa <__fixunssfsi+0x5c>
     fec:	90 95       	com	r25
     fee:	80 95       	com	r24
     ff0:	70 95       	com	r23
     ff2:	61 95       	neg	r22
     ff4:	7f 4f       	sbci	r23, 0xFF	; 255
     ff6:	8f 4f       	sbci	r24, 0xFF	; 255
     ff8:	9f 4f       	sbci	r25, 0xFF	; 255
     ffa:	08 95       	ret

00000ffc <__floatunsisf>:
     ffc:	e8 94       	clt
     ffe:	09 c0       	rjmp	.+18     	; 0x1012 <__floatsisf+0x12>

00001000 <__floatsisf>:
    1000:	97 fb       	bst	r25, 7
    1002:	3e f4       	brtc	.+14     	; 0x1012 <__floatsisf+0x12>
    1004:	90 95       	com	r25
    1006:	80 95       	com	r24
    1008:	70 95       	com	r23
    100a:	61 95       	neg	r22
    100c:	7f 4f       	sbci	r23, 0xFF	; 255
    100e:	8f 4f       	sbci	r24, 0xFF	; 255
    1010:	9f 4f       	sbci	r25, 0xFF	; 255
    1012:	99 23       	and	r25, r25
    1014:	a9 f0       	breq	.+42     	; 0x1040 <__floatsisf+0x40>
    1016:	f9 2f       	mov	r31, r25
    1018:	96 e9       	ldi	r25, 0x96	; 150
    101a:	bb 27       	eor	r27, r27
    101c:	93 95       	inc	r25
    101e:	f6 95       	lsr	r31
    1020:	87 95       	ror	r24
    1022:	77 95       	ror	r23
    1024:	67 95       	ror	r22
    1026:	b7 95       	ror	r27
    1028:	f1 11       	cpse	r31, r1
    102a:	f8 cf       	rjmp	.-16     	; 0x101c <__floatsisf+0x1c>
    102c:	fa f4       	brpl	.+62     	; 0x106c <__floatsisf+0x6c>
    102e:	bb 0f       	add	r27, r27
    1030:	11 f4       	brne	.+4      	; 0x1036 <__floatsisf+0x36>
    1032:	60 ff       	sbrs	r22, 0
    1034:	1b c0       	rjmp	.+54     	; 0x106c <__floatsisf+0x6c>
    1036:	6f 5f       	subi	r22, 0xFF	; 255
    1038:	7f 4f       	sbci	r23, 0xFF	; 255
    103a:	8f 4f       	sbci	r24, 0xFF	; 255
    103c:	9f 4f       	sbci	r25, 0xFF	; 255
    103e:	16 c0       	rjmp	.+44     	; 0x106c <__floatsisf+0x6c>
    1040:	88 23       	and	r24, r24
    1042:	11 f0       	breq	.+4      	; 0x1048 <__floatsisf+0x48>
    1044:	96 e9       	ldi	r25, 0x96	; 150
    1046:	11 c0       	rjmp	.+34     	; 0x106a <__floatsisf+0x6a>
    1048:	77 23       	and	r23, r23
    104a:	21 f0       	breq	.+8      	; 0x1054 <__floatsisf+0x54>
    104c:	9e e8       	ldi	r25, 0x8E	; 142
    104e:	87 2f       	mov	r24, r23
    1050:	76 2f       	mov	r23, r22
    1052:	05 c0       	rjmp	.+10     	; 0x105e <__floatsisf+0x5e>
    1054:	66 23       	and	r22, r22
    1056:	71 f0       	breq	.+28     	; 0x1074 <__floatsisf+0x74>
    1058:	96 e8       	ldi	r25, 0x86	; 134
    105a:	86 2f       	mov	r24, r22
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	2a f0       	brmi	.+10     	; 0x106c <__floatsisf+0x6c>
    1062:	9a 95       	dec	r25
    1064:	66 0f       	add	r22, r22
    1066:	77 1f       	adc	r23, r23
    1068:	88 1f       	adc	r24, r24
    106a:	da f7       	brpl	.-10     	; 0x1062 <__floatsisf+0x62>
    106c:	88 0f       	add	r24, r24
    106e:	96 95       	lsr	r25
    1070:	87 95       	ror	r24
    1072:	97 f9       	bld	r25, 7
    1074:	08 95       	ret

00001076 <__fp_inf>:
    1076:	97 f9       	bld	r25, 7
    1078:	9f 67       	ori	r25, 0x7F	; 127
    107a:	80 e8       	ldi	r24, 0x80	; 128
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	08 95       	ret

00001082 <__fp_nan>:
    1082:	9f ef       	ldi	r25, 0xFF	; 255
    1084:	80 ec       	ldi	r24, 0xC0	; 192
    1086:	08 95       	ret

00001088 <__fp_pscA>:
    1088:	00 24       	eor	r0, r0
    108a:	0a 94       	dec	r0
    108c:	16 16       	cp	r1, r22
    108e:	17 06       	cpc	r1, r23
    1090:	18 06       	cpc	r1, r24
    1092:	09 06       	cpc	r0, r25
    1094:	08 95       	ret

00001096 <__fp_pscB>:
    1096:	00 24       	eor	r0, r0
    1098:	0a 94       	dec	r0
    109a:	12 16       	cp	r1, r18
    109c:	13 06       	cpc	r1, r19
    109e:	14 06       	cpc	r1, r20
    10a0:	05 06       	cpc	r0, r21
    10a2:	08 95       	ret

000010a4 <__fp_round>:
    10a4:	09 2e       	mov	r0, r25
    10a6:	03 94       	inc	r0
    10a8:	00 0c       	add	r0, r0
    10aa:	11 f4       	brne	.+4      	; 0x10b0 <__fp_round+0xc>
    10ac:	88 23       	and	r24, r24
    10ae:	52 f0       	brmi	.+20     	; 0x10c4 <__fp_round+0x20>
    10b0:	bb 0f       	add	r27, r27
    10b2:	40 f4       	brcc	.+16     	; 0x10c4 <__fp_round+0x20>
    10b4:	bf 2b       	or	r27, r31
    10b6:	11 f4       	brne	.+4      	; 0x10bc <__fp_round+0x18>
    10b8:	60 ff       	sbrs	r22, 0
    10ba:	04 c0       	rjmp	.+8      	; 0x10c4 <__fp_round+0x20>
    10bc:	6f 5f       	subi	r22, 0xFF	; 255
    10be:	7f 4f       	sbci	r23, 0xFF	; 255
    10c0:	8f 4f       	sbci	r24, 0xFF	; 255
    10c2:	9f 4f       	sbci	r25, 0xFF	; 255
    10c4:	08 95       	ret

000010c6 <__fp_split3>:
    10c6:	57 fd       	sbrc	r21, 7
    10c8:	90 58       	subi	r25, 0x80	; 128
    10ca:	44 0f       	add	r20, r20
    10cc:	55 1f       	adc	r21, r21
    10ce:	59 f0       	breq	.+22     	; 0x10e6 <__fp_splitA+0x10>
    10d0:	5f 3f       	cpi	r21, 0xFF	; 255
    10d2:	71 f0       	breq	.+28     	; 0x10f0 <__fp_splitA+0x1a>
    10d4:	47 95       	ror	r20

000010d6 <__fp_splitA>:
    10d6:	88 0f       	add	r24, r24
    10d8:	97 fb       	bst	r25, 7
    10da:	99 1f       	adc	r25, r25
    10dc:	61 f0       	breq	.+24     	; 0x10f6 <__fp_splitA+0x20>
    10de:	9f 3f       	cpi	r25, 0xFF	; 255
    10e0:	79 f0       	breq	.+30     	; 0x1100 <__fp_splitA+0x2a>
    10e2:	87 95       	ror	r24
    10e4:	08 95       	ret
    10e6:	12 16       	cp	r1, r18
    10e8:	13 06       	cpc	r1, r19
    10ea:	14 06       	cpc	r1, r20
    10ec:	55 1f       	adc	r21, r21
    10ee:	f2 cf       	rjmp	.-28     	; 0x10d4 <__fp_split3+0xe>
    10f0:	46 95       	lsr	r20
    10f2:	f1 df       	rcall	.-30     	; 0x10d6 <__fp_splitA>
    10f4:	08 c0       	rjmp	.+16     	; 0x1106 <__fp_splitA+0x30>
    10f6:	16 16       	cp	r1, r22
    10f8:	17 06       	cpc	r1, r23
    10fa:	18 06       	cpc	r1, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	f1 cf       	rjmp	.-30     	; 0x10e2 <__fp_splitA+0xc>
    1100:	86 95       	lsr	r24
    1102:	71 05       	cpc	r23, r1
    1104:	61 05       	cpc	r22, r1
    1106:	08 94       	sec
    1108:	08 95       	ret

0000110a <__fp_zero>:
    110a:	e8 94       	clt

0000110c <__fp_szero>:
    110c:	bb 27       	eor	r27, r27
    110e:	66 27       	eor	r22, r22
    1110:	77 27       	eor	r23, r23
    1112:	cb 01       	movw	r24, r22
    1114:	97 f9       	bld	r25, 7
    1116:	08 95       	ret

00001118 <__mulsf3>:
    1118:	0e 94 9f 08 	call	0x113e	; 0x113e <__mulsf3x>
    111c:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__fp_round>
    1120:	0e 94 44 08 	call	0x1088	; 0x1088 <__fp_pscA>
    1124:	38 f0       	brcs	.+14     	; 0x1134 <__mulsf3+0x1c>
    1126:	0e 94 4b 08 	call	0x1096	; 0x1096 <__fp_pscB>
    112a:	20 f0       	brcs	.+8      	; 0x1134 <__mulsf3+0x1c>
    112c:	95 23       	and	r25, r21
    112e:	11 f0       	breq	.+4      	; 0x1134 <__mulsf3+0x1c>
    1130:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__fp_inf>
    1134:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__fp_nan>
    1138:	11 24       	eor	r1, r1
    113a:	0c 94 86 08 	jmp	0x110c	; 0x110c <__fp_szero>

0000113e <__mulsf3x>:
    113e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__fp_split3>
    1142:	70 f3       	brcs	.-36     	; 0x1120 <__mulsf3+0x8>

00001144 <__mulsf3_pse>:
    1144:	95 9f       	mul	r25, r21
    1146:	c1 f3       	breq	.-16     	; 0x1138 <__mulsf3+0x20>
    1148:	95 0f       	add	r25, r21
    114a:	50 e0       	ldi	r21, 0x00	; 0
    114c:	55 1f       	adc	r21, r21
    114e:	62 9f       	mul	r22, r18
    1150:	f0 01       	movw	r30, r0
    1152:	72 9f       	mul	r23, r18
    1154:	bb 27       	eor	r27, r27
    1156:	f0 0d       	add	r31, r0
    1158:	b1 1d       	adc	r27, r1
    115a:	63 9f       	mul	r22, r19
    115c:	aa 27       	eor	r26, r26
    115e:	f0 0d       	add	r31, r0
    1160:	b1 1d       	adc	r27, r1
    1162:	aa 1f       	adc	r26, r26
    1164:	64 9f       	mul	r22, r20
    1166:	66 27       	eor	r22, r22
    1168:	b0 0d       	add	r27, r0
    116a:	a1 1d       	adc	r26, r1
    116c:	66 1f       	adc	r22, r22
    116e:	82 9f       	mul	r24, r18
    1170:	22 27       	eor	r18, r18
    1172:	b0 0d       	add	r27, r0
    1174:	a1 1d       	adc	r26, r1
    1176:	62 1f       	adc	r22, r18
    1178:	73 9f       	mul	r23, r19
    117a:	b0 0d       	add	r27, r0
    117c:	a1 1d       	adc	r26, r1
    117e:	62 1f       	adc	r22, r18
    1180:	83 9f       	mul	r24, r19
    1182:	a0 0d       	add	r26, r0
    1184:	61 1d       	adc	r22, r1
    1186:	22 1f       	adc	r18, r18
    1188:	74 9f       	mul	r23, r20
    118a:	33 27       	eor	r19, r19
    118c:	a0 0d       	add	r26, r0
    118e:	61 1d       	adc	r22, r1
    1190:	23 1f       	adc	r18, r19
    1192:	84 9f       	mul	r24, r20
    1194:	60 0d       	add	r22, r0
    1196:	21 1d       	adc	r18, r1
    1198:	82 2f       	mov	r24, r18
    119a:	76 2f       	mov	r23, r22
    119c:	6a 2f       	mov	r22, r26
    119e:	11 24       	eor	r1, r1
    11a0:	9f 57       	subi	r25, 0x7F	; 127
    11a2:	50 40       	sbci	r21, 0x00	; 0
    11a4:	9a f0       	brmi	.+38     	; 0x11cc <__mulsf3_pse+0x88>
    11a6:	f1 f0       	breq	.+60     	; 0x11e4 <__mulsf3_pse+0xa0>
    11a8:	88 23       	and	r24, r24
    11aa:	4a f0       	brmi	.+18     	; 0x11be <__mulsf3_pse+0x7a>
    11ac:	ee 0f       	add	r30, r30
    11ae:	ff 1f       	adc	r31, r31
    11b0:	bb 1f       	adc	r27, r27
    11b2:	66 1f       	adc	r22, r22
    11b4:	77 1f       	adc	r23, r23
    11b6:	88 1f       	adc	r24, r24
    11b8:	91 50       	subi	r25, 0x01	; 1
    11ba:	50 40       	sbci	r21, 0x00	; 0
    11bc:	a9 f7       	brne	.-22     	; 0x11a8 <__mulsf3_pse+0x64>
    11be:	9e 3f       	cpi	r25, 0xFE	; 254
    11c0:	51 05       	cpc	r21, r1
    11c2:	80 f0       	brcs	.+32     	; 0x11e4 <__mulsf3_pse+0xa0>
    11c4:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__fp_inf>
    11c8:	0c 94 86 08 	jmp	0x110c	; 0x110c <__fp_szero>
    11cc:	5f 3f       	cpi	r21, 0xFF	; 255
    11ce:	e4 f3       	brlt	.-8      	; 0x11c8 <__mulsf3_pse+0x84>
    11d0:	98 3e       	cpi	r25, 0xE8	; 232
    11d2:	d4 f3       	brlt	.-12     	; 0x11c8 <__mulsf3_pse+0x84>
    11d4:	86 95       	lsr	r24
    11d6:	77 95       	ror	r23
    11d8:	67 95       	ror	r22
    11da:	b7 95       	ror	r27
    11dc:	f7 95       	ror	r31
    11de:	e7 95       	ror	r30
    11e0:	9f 5f       	subi	r25, 0xFF	; 255
    11e2:	c1 f7       	brne	.-16     	; 0x11d4 <__mulsf3_pse+0x90>
    11e4:	fe 2b       	or	r31, r30
    11e6:	88 0f       	add	r24, r24
    11e8:	91 1d       	adc	r25, r1
    11ea:	96 95       	lsr	r25
    11ec:	87 95       	ror	r24
    11ee:	97 f9       	bld	r25, 7
    11f0:	08 95       	ret

000011f2 <atoi>:
    11f2:	fc 01       	movw	r30, r24
    11f4:	88 27       	eor	r24, r24
    11f6:	99 27       	eor	r25, r25
    11f8:	e8 94       	clt
    11fa:	21 91       	ld	r18, Z+
    11fc:	20 32       	cpi	r18, 0x20	; 32
    11fe:	e9 f3       	breq	.-6      	; 0x11fa <atoi+0x8>
    1200:	29 30       	cpi	r18, 0x09	; 9
    1202:	10 f0       	brcs	.+4      	; 0x1208 <atoi+0x16>
    1204:	2e 30       	cpi	r18, 0x0E	; 14
    1206:	c8 f3       	brcs	.-14     	; 0x11fa <atoi+0x8>
    1208:	2b 32       	cpi	r18, 0x2B	; 43
    120a:	41 f0       	breq	.+16     	; 0x121c <atoi+0x2a>
    120c:	2d 32       	cpi	r18, 0x2D	; 45
    120e:	39 f4       	brne	.+14     	; 0x121e <atoi+0x2c>
    1210:	68 94       	set
    1212:	04 c0       	rjmp	.+8      	; 0x121c <atoi+0x2a>
    1214:	0e 94 17 09 	call	0x122e	; 0x122e <__mulhi_const_10>
    1218:	82 0f       	add	r24, r18
    121a:	91 1d       	adc	r25, r1
    121c:	21 91       	ld	r18, Z+
    121e:	20 53       	subi	r18, 0x30	; 48
    1220:	2a 30       	cpi	r18, 0x0A	; 10
    1222:	c0 f3       	brcs	.-16     	; 0x1214 <atoi+0x22>
    1224:	1e f4       	brtc	.+6      	; 0x122c <atoi+0x3a>
    1226:	90 95       	com	r25
    1228:	81 95       	neg	r24
    122a:	9f 4f       	sbci	r25, 0xFF	; 255
    122c:	08 95       	ret

0000122e <__mulhi_const_10>:
    122e:	7a e0       	ldi	r23, 0x0A	; 10
    1230:	97 9f       	mul	r25, r23
    1232:	90 2d       	mov	r25, r0
    1234:	87 9f       	mul	r24, r23
    1236:	80 2d       	mov	r24, r0
    1238:	91 0d       	add	r25, r1
    123a:	11 24       	eor	r1, r1
    123c:	08 95       	ret

0000123e <sprintf>:
    123e:	ae e0       	ldi	r26, 0x0E	; 14
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e5 e2       	ldi	r30, 0x25	; 37
    1244:	f9 e0       	ldi	r31, 0x09	; 9
    1246:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <__prologue_saves__+0x1c>
    124a:	0d 89       	ldd	r16, Y+21	; 0x15
    124c:	1e 89       	ldd	r17, Y+22	; 0x16
    124e:	86 e0       	ldi	r24, 0x06	; 6
    1250:	8c 83       	std	Y+4, r24	; 0x04
    1252:	1a 83       	std	Y+2, r17	; 0x02
    1254:	09 83       	std	Y+1, r16	; 0x01
    1256:	8f ef       	ldi	r24, 0xFF	; 255
    1258:	9f e7       	ldi	r25, 0x7F	; 127
    125a:	9e 83       	std	Y+6, r25	; 0x06
    125c:	8d 83       	std	Y+5, r24	; 0x05
    125e:	ae 01       	movw	r20, r28
    1260:	47 5e       	subi	r20, 0xE7	; 231
    1262:	5f 4f       	sbci	r21, 0xFF	; 255
    1264:	6f 89       	ldd	r22, Y+23	; 0x17
    1266:	78 8d       	ldd	r23, Y+24	; 0x18
    1268:	ce 01       	movw	r24, r28
    126a:	01 96       	adiw	r24, 0x01	; 1
    126c:	0e 94 41 09 	call	0x1282	; 0x1282 <vfprintf>
    1270:	ef 81       	ldd	r30, Y+7	; 0x07
    1272:	f8 85       	ldd	r31, Y+8	; 0x08
    1274:	e0 0f       	add	r30, r16
    1276:	f1 1f       	adc	r31, r17
    1278:	10 82       	st	Z, r1
    127a:	2e 96       	adiw	r28, 0x0e	; 14
    127c:	e4 e0       	ldi	r30, 0x04	; 4
    127e:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__epilogue_restores__+0x1c>

00001282 <vfprintf>:
    1282:	ab e0       	ldi	r26, 0x0B	; 11
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e7 e4       	ldi	r30, 0x47	; 71
    1288:	f9 e0       	ldi	r31, 0x09	; 9
    128a:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__prologue_saves__>
    128e:	6c 01       	movw	r12, r24
    1290:	7b 01       	movw	r14, r22
    1292:	8a 01       	movw	r16, r20
    1294:	fc 01       	movw	r30, r24
    1296:	17 82       	std	Z+7, r1	; 0x07
    1298:	16 82       	std	Z+6, r1	; 0x06
    129a:	83 81       	ldd	r24, Z+3	; 0x03
    129c:	81 ff       	sbrs	r24, 1
    129e:	cc c1       	rjmp	.+920    	; 0x1638 <vfprintf+0x3b6>
    12a0:	ce 01       	movw	r24, r28
    12a2:	01 96       	adiw	r24, 0x01	; 1
    12a4:	3c 01       	movw	r6, r24
    12a6:	f6 01       	movw	r30, r12
    12a8:	93 81       	ldd	r25, Z+3	; 0x03
    12aa:	f7 01       	movw	r30, r14
    12ac:	93 fd       	sbrc	r25, 3
    12ae:	85 91       	lpm	r24, Z+
    12b0:	93 ff       	sbrs	r25, 3
    12b2:	81 91       	ld	r24, Z+
    12b4:	7f 01       	movw	r14, r30
    12b6:	88 23       	and	r24, r24
    12b8:	09 f4       	brne	.+2      	; 0x12bc <vfprintf+0x3a>
    12ba:	ba c1       	rjmp	.+884    	; 0x1630 <vfprintf+0x3ae>
    12bc:	85 32       	cpi	r24, 0x25	; 37
    12be:	39 f4       	brne	.+14     	; 0x12ce <vfprintf+0x4c>
    12c0:	93 fd       	sbrc	r25, 3
    12c2:	85 91       	lpm	r24, Z+
    12c4:	93 ff       	sbrs	r25, 3
    12c6:	81 91       	ld	r24, Z+
    12c8:	7f 01       	movw	r14, r30
    12ca:	85 32       	cpi	r24, 0x25	; 37
    12cc:	29 f4       	brne	.+10     	; 0x12d8 <vfprintf+0x56>
    12ce:	b6 01       	movw	r22, r12
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	0e 94 38 0b 	call	0x1670	; 0x1670 <fputc>
    12d6:	e7 cf       	rjmp	.-50     	; 0x12a6 <vfprintf+0x24>
    12d8:	91 2c       	mov	r9, r1
    12da:	21 2c       	mov	r2, r1
    12dc:	31 2c       	mov	r3, r1
    12de:	ff e1       	ldi	r31, 0x1F	; 31
    12e0:	f3 15       	cp	r31, r3
    12e2:	d8 f0       	brcs	.+54     	; 0x131a <vfprintf+0x98>
    12e4:	8b 32       	cpi	r24, 0x2B	; 43
    12e6:	79 f0       	breq	.+30     	; 0x1306 <vfprintf+0x84>
    12e8:	38 f4       	brcc	.+14     	; 0x12f8 <vfprintf+0x76>
    12ea:	80 32       	cpi	r24, 0x20	; 32
    12ec:	79 f0       	breq	.+30     	; 0x130c <vfprintf+0x8a>
    12ee:	83 32       	cpi	r24, 0x23	; 35
    12f0:	a1 f4       	brne	.+40     	; 0x131a <vfprintf+0x98>
    12f2:	23 2d       	mov	r18, r3
    12f4:	20 61       	ori	r18, 0x10	; 16
    12f6:	1d c0       	rjmp	.+58     	; 0x1332 <vfprintf+0xb0>
    12f8:	8d 32       	cpi	r24, 0x2D	; 45
    12fa:	61 f0       	breq	.+24     	; 0x1314 <vfprintf+0x92>
    12fc:	80 33       	cpi	r24, 0x30	; 48
    12fe:	69 f4       	brne	.+26     	; 0x131a <vfprintf+0x98>
    1300:	23 2d       	mov	r18, r3
    1302:	21 60       	ori	r18, 0x01	; 1
    1304:	16 c0       	rjmp	.+44     	; 0x1332 <vfprintf+0xb0>
    1306:	83 2d       	mov	r24, r3
    1308:	82 60       	ori	r24, 0x02	; 2
    130a:	38 2e       	mov	r3, r24
    130c:	e3 2d       	mov	r30, r3
    130e:	e4 60       	ori	r30, 0x04	; 4
    1310:	3e 2e       	mov	r3, r30
    1312:	2a c0       	rjmp	.+84     	; 0x1368 <vfprintf+0xe6>
    1314:	f3 2d       	mov	r31, r3
    1316:	f8 60       	ori	r31, 0x08	; 8
    1318:	1d c0       	rjmp	.+58     	; 0x1354 <vfprintf+0xd2>
    131a:	37 fc       	sbrc	r3, 7
    131c:	2d c0       	rjmp	.+90     	; 0x1378 <vfprintf+0xf6>
    131e:	20 ed       	ldi	r18, 0xD0	; 208
    1320:	28 0f       	add	r18, r24
    1322:	2a 30       	cpi	r18, 0x0A	; 10
    1324:	40 f0       	brcs	.+16     	; 0x1336 <vfprintf+0xb4>
    1326:	8e 32       	cpi	r24, 0x2E	; 46
    1328:	b9 f4       	brne	.+46     	; 0x1358 <vfprintf+0xd6>
    132a:	36 fc       	sbrc	r3, 6
    132c:	81 c1       	rjmp	.+770    	; 0x1630 <vfprintf+0x3ae>
    132e:	23 2d       	mov	r18, r3
    1330:	20 64       	ori	r18, 0x40	; 64
    1332:	32 2e       	mov	r3, r18
    1334:	19 c0       	rjmp	.+50     	; 0x1368 <vfprintf+0xe6>
    1336:	36 fe       	sbrs	r3, 6
    1338:	06 c0       	rjmp	.+12     	; 0x1346 <vfprintf+0xc4>
    133a:	8a e0       	ldi	r24, 0x0A	; 10
    133c:	98 9e       	mul	r9, r24
    133e:	20 0d       	add	r18, r0
    1340:	11 24       	eor	r1, r1
    1342:	92 2e       	mov	r9, r18
    1344:	11 c0       	rjmp	.+34     	; 0x1368 <vfprintf+0xe6>
    1346:	ea e0       	ldi	r30, 0x0A	; 10
    1348:	2e 9e       	mul	r2, r30
    134a:	20 0d       	add	r18, r0
    134c:	11 24       	eor	r1, r1
    134e:	22 2e       	mov	r2, r18
    1350:	f3 2d       	mov	r31, r3
    1352:	f0 62       	ori	r31, 0x20	; 32
    1354:	3f 2e       	mov	r3, r31
    1356:	08 c0       	rjmp	.+16     	; 0x1368 <vfprintf+0xe6>
    1358:	8c 36       	cpi	r24, 0x6C	; 108
    135a:	21 f4       	brne	.+8      	; 0x1364 <vfprintf+0xe2>
    135c:	83 2d       	mov	r24, r3
    135e:	80 68       	ori	r24, 0x80	; 128
    1360:	38 2e       	mov	r3, r24
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <vfprintf+0xe6>
    1364:	88 36       	cpi	r24, 0x68	; 104
    1366:	41 f4       	brne	.+16     	; 0x1378 <vfprintf+0xf6>
    1368:	f7 01       	movw	r30, r14
    136a:	93 fd       	sbrc	r25, 3
    136c:	85 91       	lpm	r24, Z+
    136e:	93 ff       	sbrs	r25, 3
    1370:	81 91       	ld	r24, Z+
    1372:	7f 01       	movw	r14, r30
    1374:	81 11       	cpse	r24, r1
    1376:	b3 cf       	rjmp	.-154    	; 0x12de <vfprintf+0x5c>
    1378:	98 2f       	mov	r25, r24
    137a:	9f 7d       	andi	r25, 0xDF	; 223
    137c:	95 54       	subi	r25, 0x45	; 69
    137e:	93 30       	cpi	r25, 0x03	; 3
    1380:	28 f4       	brcc	.+10     	; 0x138c <vfprintf+0x10a>
    1382:	0c 5f       	subi	r16, 0xFC	; 252
    1384:	1f 4f       	sbci	r17, 0xFF	; 255
    1386:	9f e3       	ldi	r25, 0x3F	; 63
    1388:	99 83       	std	Y+1, r25	; 0x01
    138a:	0d c0       	rjmp	.+26     	; 0x13a6 <vfprintf+0x124>
    138c:	83 36       	cpi	r24, 0x63	; 99
    138e:	31 f0       	breq	.+12     	; 0x139c <vfprintf+0x11a>
    1390:	83 37       	cpi	r24, 0x73	; 115
    1392:	71 f0       	breq	.+28     	; 0x13b0 <vfprintf+0x12e>
    1394:	83 35       	cpi	r24, 0x53	; 83
    1396:	09 f0       	breq	.+2      	; 0x139a <vfprintf+0x118>
    1398:	59 c0       	rjmp	.+178    	; 0x144c <vfprintf+0x1ca>
    139a:	21 c0       	rjmp	.+66     	; 0x13de <vfprintf+0x15c>
    139c:	f8 01       	movw	r30, r16
    139e:	80 81       	ld	r24, Z
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	0e 5f       	subi	r16, 0xFE	; 254
    13a4:	1f 4f       	sbci	r17, 0xFF	; 255
    13a6:	88 24       	eor	r8, r8
    13a8:	83 94       	inc	r8
    13aa:	91 2c       	mov	r9, r1
    13ac:	53 01       	movw	r10, r6
    13ae:	13 c0       	rjmp	.+38     	; 0x13d6 <vfprintf+0x154>
    13b0:	28 01       	movw	r4, r16
    13b2:	f2 e0       	ldi	r31, 0x02	; 2
    13b4:	4f 0e       	add	r4, r31
    13b6:	51 1c       	adc	r5, r1
    13b8:	f8 01       	movw	r30, r16
    13ba:	a0 80       	ld	r10, Z
    13bc:	b1 80       	ldd	r11, Z+1	; 0x01
    13be:	36 fe       	sbrs	r3, 6
    13c0:	03 c0       	rjmp	.+6      	; 0x13c8 <vfprintf+0x146>
    13c2:	69 2d       	mov	r22, r9
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <vfprintf+0x14a>
    13c8:	6f ef       	ldi	r22, 0xFF	; 255
    13ca:	7f ef       	ldi	r23, 0xFF	; 255
    13cc:	c5 01       	movw	r24, r10
    13ce:	0e 94 2d 0b 	call	0x165a	; 0x165a <strnlen>
    13d2:	4c 01       	movw	r8, r24
    13d4:	82 01       	movw	r16, r4
    13d6:	f3 2d       	mov	r31, r3
    13d8:	ff 77       	andi	r31, 0x7F	; 127
    13da:	3f 2e       	mov	r3, r31
    13dc:	16 c0       	rjmp	.+44     	; 0x140a <vfprintf+0x188>
    13de:	28 01       	movw	r4, r16
    13e0:	22 e0       	ldi	r18, 0x02	; 2
    13e2:	42 0e       	add	r4, r18
    13e4:	51 1c       	adc	r5, r1
    13e6:	f8 01       	movw	r30, r16
    13e8:	a0 80       	ld	r10, Z
    13ea:	b1 80       	ldd	r11, Z+1	; 0x01
    13ec:	36 fe       	sbrs	r3, 6
    13ee:	03 c0       	rjmp	.+6      	; 0x13f6 <vfprintf+0x174>
    13f0:	69 2d       	mov	r22, r9
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <vfprintf+0x178>
    13f6:	6f ef       	ldi	r22, 0xFF	; 255
    13f8:	7f ef       	ldi	r23, 0xFF	; 255
    13fa:	c5 01       	movw	r24, r10
    13fc:	0e 94 22 0b 	call	0x1644	; 0x1644 <strnlen_P>
    1400:	4c 01       	movw	r8, r24
    1402:	f3 2d       	mov	r31, r3
    1404:	f0 68       	ori	r31, 0x80	; 128
    1406:	3f 2e       	mov	r3, r31
    1408:	82 01       	movw	r16, r4
    140a:	33 fc       	sbrc	r3, 3
    140c:	1b c0       	rjmp	.+54     	; 0x1444 <vfprintf+0x1c2>
    140e:	82 2d       	mov	r24, r2
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	88 16       	cp	r8, r24
    1414:	99 06       	cpc	r9, r25
    1416:	b0 f4       	brcc	.+44     	; 0x1444 <vfprintf+0x1c2>
    1418:	b6 01       	movw	r22, r12
    141a:	80 e2       	ldi	r24, 0x20	; 32
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 38 0b 	call	0x1670	; 0x1670 <fputc>
    1422:	2a 94       	dec	r2
    1424:	f4 cf       	rjmp	.-24     	; 0x140e <vfprintf+0x18c>
    1426:	f5 01       	movw	r30, r10
    1428:	37 fc       	sbrc	r3, 7
    142a:	85 91       	lpm	r24, Z+
    142c:	37 fe       	sbrs	r3, 7
    142e:	81 91       	ld	r24, Z+
    1430:	5f 01       	movw	r10, r30
    1432:	b6 01       	movw	r22, r12
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 38 0b 	call	0x1670	; 0x1670 <fputc>
    143a:	21 10       	cpse	r2, r1
    143c:	2a 94       	dec	r2
    143e:	21 e0       	ldi	r18, 0x01	; 1
    1440:	82 1a       	sub	r8, r18
    1442:	91 08       	sbc	r9, r1
    1444:	81 14       	cp	r8, r1
    1446:	91 04       	cpc	r9, r1
    1448:	71 f7       	brne	.-36     	; 0x1426 <vfprintf+0x1a4>
    144a:	e8 c0       	rjmp	.+464    	; 0x161c <vfprintf+0x39a>
    144c:	84 36       	cpi	r24, 0x64	; 100
    144e:	11 f0       	breq	.+4      	; 0x1454 <vfprintf+0x1d2>
    1450:	89 36       	cpi	r24, 0x69	; 105
    1452:	41 f5       	brne	.+80     	; 0x14a4 <vfprintf+0x222>
    1454:	f8 01       	movw	r30, r16
    1456:	37 fe       	sbrs	r3, 7
    1458:	07 c0       	rjmp	.+14     	; 0x1468 <vfprintf+0x1e6>
    145a:	60 81       	ld	r22, Z
    145c:	71 81       	ldd	r23, Z+1	; 0x01
    145e:	82 81       	ldd	r24, Z+2	; 0x02
    1460:	93 81       	ldd	r25, Z+3	; 0x03
    1462:	0c 5f       	subi	r16, 0xFC	; 252
    1464:	1f 4f       	sbci	r17, 0xFF	; 255
    1466:	08 c0       	rjmp	.+16     	; 0x1478 <vfprintf+0x1f6>
    1468:	60 81       	ld	r22, Z
    146a:	71 81       	ldd	r23, Z+1	; 0x01
    146c:	07 2e       	mov	r0, r23
    146e:	00 0c       	add	r0, r0
    1470:	88 0b       	sbc	r24, r24
    1472:	99 0b       	sbc	r25, r25
    1474:	0e 5f       	subi	r16, 0xFE	; 254
    1476:	1f 4f       	sbci	r17, 0xFF	; 255
    1478:	f3 2d       	mov	r31, r3
    147a:	ff 76       	andi	r31, 0x6F	; 111
    147c:	3f 2e       	mov	r3, r31
    147e:	97 ff       	sbrs	r25, 7
    1480:	09 c0       	rjmp	.+18     	; 0x1494 <vfprintf+0x212>
    1482:	90 95       	com	r25
    1484:	80 95       	com	r24
    1486:	70 95       	com	r23
    1488:	61 95       	neg	r22
    148a:	7f 4f       	sbci	r23, 0xFF	; 255
    148c:	8f 4f       	sbci	r24, 0xFF	; 255
    148e:	9f 4f       	sbci	r25, 0xFF	; 255
    1490:	f0 68       	ori	r31, 0x80	; 128
    1492:	3f 2e       	mov	r3, r31
    1494:	2a e0       	ldi	r18, 0x0A	; 10
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	a3 01       	movw	r20, r6
    149a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <__ultoa_invert>
    149e:	88 2e       	mov	r8, r24
    14a0:	86 18       	sub	r8, r6
    14a2:	45 c0       	rjmp	.+138    	; 0x152e <vfprintf+0x2ac>
    14a4:	85 37       	cpi	r24, 0x75	; 117
    14a6:	31 f4       	brne	.+12     	; 0x14b4 <vfprintf+0x232>
    14a8:	23 2d       	mov	r18, r3
    14aa:	2f 7e       	andi	r18, 0xEF	; 239
    14ac:	b2 2e       	mov	r11, r18
    14ae:	2a e0       	ldi	r18, 0x0A	; 10
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	25 c0       	rjmp	.+74     	; 0x14fe <vfprintf+0x27c>
    14b4:	93 2d       	mov	r25, r3
    14b6:	99 7f       	andi	r25, 0xF9	; 249
    14b8:	b9 2e       	mov	r11, r25
    14ba:	8f 36       	cpi	r24, 0x6F	; 111
    14bc:	c1 f0       	breq	.+48     	; 0x14ee <vfprintf+0x26c>
    14be:	18 f4       	brcc	.+6      	; 0x14c6 <vfprintf+0x244>
    14c0:	88 35       	cpi	r24, 0x58	; 88
    14c2:	79 f0       	breq	.+30     	; 0x14e2 <vfprintf+0x260>
    14c4:	b5 c0       	rjmp	.+362    	; 0x1630 <vfprintf+0x3ae>
    14c6:	80 37       	cpi	r24, 0x70	; 112
    14c8:	19 f0       	breq	.+6      	; 0x14d0 <vfprintf+0x24e>
    14ca:	88 37       	cpi	r24, 0x78	; 120
    14cc:	21 f0       	breq	.+8      	; 0x14d6 <vfprintf+0x254>
    14ce:	b0 c0       	rjmp	.+352    	; 0x1630 <vfprintf+0x3ae>
    14d0:	e9 2f       	mov	r30, r25
    14d2:	e0 61       	ori	r30, 0x10	; 16
    14d4:	be 2e       	mov	r11, r30
    14d6:	b4 fe       	sbrs	r11, 4
    14d8:	0d c0       	rjmp	.+26     	; 0x14f4 <vfprintf+0x272>
    14da:	fb 2d       	mov	r31, r11
    14dc:	f4 60       	ori	r31, 0x04	; 4
    14de:	bf 2e       	mov	r11, r31
    14e0:	09 c0       	rjmp	.+18     	; 0x14f4 <vfprintf+0x272>
    14e2:	34 fe       	sbrs	r3, 4
    14e4:	0a c0       	rjmp	.+20     	; 0x14fa <vfprintf+0x278>
    14e6:	29 2f       	mov	r18, r25
    14e8:	26 60       	ori	r18, 0x06	; 6
    14ea:	b2 2e       	mov	r11, r18
    14ec:	06 c0       	rjmp	.+12     	; 0x14fa <vfprintf+0x278>
    14ee:	28 e0       	ldi	r18, 0x08	; 8
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	05 c0       	rjmp	.+10     	; 0x14fe <vfprintf+0x27c>
    14f4:	20 e1       	ldi	r18, 0x10	; 16
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <vfprintf+0x27c>
    14fa:	20 e1       	ldi	r18, 0x10	; 16
    14fc:	32 e0       	ldi	r19, 0x02	; 2
    14fe:	f8 01       	movw	r30, r16
    1500:	b7 fe       	sbrs	r11, 7
    1502:	07 c0       	rjmp	.+14     	; 0x1512 <vfprintf+0x290>
    1504:	60 81       	ld	r22, Z
    1506:	71 81       	ldd	r23, Z+1	; 0x01
    1508:	82 81       	ldd	r24, Z+2	; 0x02
    150a:	93 81       	ldd	r25, Z+3	; 0x03
    150c:	0c 5f       	subi	r16, 0xFC	; 252
    150e:	1f 4f       	sbci	r17, 0xFF	; 255
    1510:	06 c0       	rjmp	.+12     	; 0x151e <vfprintf+0x29c>
    1512:	60 81       	ld	r22, Z
    1514:	71 81       	ldd	r23, Z+1	; 0x01
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	0e 5f       	subi	r16, 0xFE	; 254
    151c:	1f 4f       	sbci	r17, 0xFF	; 255
    151e:	a3 01       	movw	r20, r6
    1520:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <__ultoa_invert>
    1524:	88 2e       	mov	r8, r24
    1526:	86 18       	sub	r8, r6
    1528:	fb 2d       	mov	r31, r11
    152a:	ff 77       	andi	r31, 0x7F	; 127
    152c:	3f 2e       	mov	r3, r31
    152e:	36 fe       	sbrs	r3, 6
    1530:	0d c0       	rjmp	.+26     	; 0x154c <vfprintf+0x2ca>
    1532:	23 2d       	mov	r18, r3
    1534:	2e 7f       	andi	r18, 0xFE	; 254
    1536:	a2 2e       	mov	r10, r18
    1538:	89 14       	cp	r8, r9
    153a:	58 f4       	brcc	.+22     	; 0x1552 <vfprintf+0x2d0>
    153c:	34 fe       	sbrs	r3, 4
    153e:	0b c0       	rjmp	.+22     	; 0x1556 <vfprintf+0x2d4>
    1540:	32 fc       	sbrc	r3, 2
    1542:	09 c0       	rjmp	.+18     	; 0x1556 <vfprintf+0x2d4>
    1544:	83 2d       	mov	r24, r3
    1546:	8e 7e       	andi	r24, 0xEE	; 238
    1548:	a8 2e       	mov	r10, r24
    154a:	05 c0       	rjmp	.+10     	; 0x1556 <vfprintf+0x2d4>
    154c:	b8 2c       	mov	r11, r8
    154e:	a3 2c       	mov	r10, r3
    1550:	03 c0       	rjmp	.+6      	; 0x1558 <vfprintf+0x2d6>
    1552:	b8 2c       	mov	r11, r8
    1554:	01 c0       	rjmp	.+2      	; 0x1558 <vfprintf+0x2d6>
    1556:	b9 2c       	mov	r11, r9
    1558:	a4 fe       	sbrs	r10, 4
    155a:	0f c0       	rjmp	.+30     	; 0x157a <vfprintf+0x2f8>
    155c:	fe 01       	movw	r30, r28
    155e:	e8 0d       	add	r30, r8
    1560:	f1 1d       	adc	r31, r1
    1562:	80 81       	ld	r24, Z
    1564:	80 33       	cpi	r24, 0x30	; 48
    1566:	21 f4       	brne	.+8      	; 0x1570 <vfprintf+0x2ee>
    1568:	9a 2d       	mov	r25, r10
    156a:	99 7e       	andi	r25, 0xE9	; 233
    156c:	a9 2e       	mov	r10, r25
    156e:	09 c0       	rjmp	.+18     	; 0x1582 <vfprintf+0x300>
    1570:	a2 fe       	sbrs	r10, 2
    1572:	06 c0       	rjmp	.+12     	; 0x1580 <vfprintf+0x2fe>
    1574:	b3 94       	inc	r11
    1576:	b3 94       	inc	r11
    1578:	04 c0       	rjmp	.+8      	; 0x1582 <vfprintf+0x300>
    157a:	8a 2d       	mov	r24, r10
    157c:	86 78       	andi	r24, 0x86	; 134
    157e:	09 f0       	breq	.+2      	; 0x1582 <vfprintf+0x300>
    1580:	b3 94       	inc	r11
    1582:	a3 fc       	sbrc	r10, 3
    1584:	11 c0       	rjmp	.+34     	; 0x15a8 <vfprintf+0x326>
    1586:	a0 fe       	sbrs	r10, 0
    1588:	06 c0       	rjmp	.+12     	; 0x1596 <vfprintf+0x314>
    158a:	b2 14       	cp	r11, r2
    158c:	88 f4       	brcc	.+34     	; 0x15b0 <vfprintf+0x32e>
    158e:	28 0c       	add	r2, r8
    1590:	92 2c       	mov	r9, r2
    1592:	9b 18       	sub	r9, r11
    1594:	0e c0       	rjmp	.+28     	; 0x15b2 <vfprintf+0x330>
    1596:	b2 14       	cp	r11, r2
    1598:	60 f4       	brcc	.+24     	; 0x15b2 <vfprintf+0x330>
    159a:	b6 01       	movw	r22, r12
    159c:	80 e2       	ldi	r24, 0x20	; 32
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	0e 94 38 0b 	call	0x1670	; 0x1670 <fputc>
    15a4:	b3 94       	inc	r11
    15a6:	f7 cf       	rjmp	.-18     	; 0x1596 <vfprintf+0x314>
    15a8:	b2 14       	cp	r11, r2
    15aa:	18 f4       	brcc	.+6      	; 0x15b2 <vfprintf+0x330>
    15ac:	2b 18       	sub	r2, r11
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <vfprintf+0x332>
    15b0:	98 2c       	mov	r9, r8
    15b2:	21 2c       	mov	r2, r1
    15b4:	a4 fe       	sbrs	r10, 4
    15b6:	10 c0       	rjmp	.+32     	; 0x15d8 <vfprintf+0x356>
    15b8:	b6 01       	movw	r22, r12
    15ba:	80 e3       	ldi	r24, 0x30	; 48
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	0e 94 38 0b 	call	0x1670	; 0x1670 <fputc>
    15c2:	a2 fe       	sbrs	r10, 2
    15c4:	17 c0       	rjmp	.+46     	; 0x15f4 <vfprintf+0x372>
    15c6:	a1 fc       	sbrc	r10, 1
    15c8:	03 c0       	rjmp	.+6      	; 0x15d0 <vfprintf+0x34e>
    15ca:	88 e7       	ldi	r24, 0x78	; 120
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <vfprintf+0x352>
    15d0:	88 e5       	ldi	r24, 0x58	; 88
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	b6 01       	movw	r22, r12
    15d6:	0c c0       	rjmp	.+24     	; 0x15f0 <vfprintf+0x36e>
    15d8:	8a 2d       	mov	r24, r10
    15da:	86 78       	andi	r24, 0x86	; 134
    15dc:	59 f0       	breq	.+22     	; 0x15f4 <vfprintf+0x372>
    15de:	a1 fe       	sbrs	r10, 1
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <vfprintf+0x364>
    15e2:	8b e2       	ldi	r24, 0x2B	; 43
    15e4:	01 c0       	rjmp	.+2      	; 0x15e8 <vfprintf+0x366>
    15e6:	80 e2       	ldi	r24, 0x20	; 32
    15e8:	a7 fc       	sbrc	r10, 7
    15ea:	8d e2       	ldi	r24, 0x2D	; 45
    15ec:	b6 01       	movw	r22, r12
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	0e 94 38 0b 	call	0x1670	; 0x1670 <fputc>
    15f4:	89 14       	cp	r8, r9
    15f6:	38 f4       	brcc	.+14     	; 0x1606 <vfprintf+0x384>
    15f8:	b6 01       	movw	r22, r12
    15fa:	80 e3       	ldi	r24, 0x30	; 48
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	0e 94 38 0b 	call	0x1670	; 0x1670 <fputc>
    1602:	9a 94       	dec	r9
    1604:	f7 cf       	rjmp	.-18     	; 0x15f4 <vfprintf+0x372>
    1606:	8a 94       	dec	r8
    1608:	f3 01       	movw	r30, r6
    160a:	e8 0d       	add	r30, r8
    160c:	f1 1d       	adc	r31, r1
    160e:	80 81       	ld	r24, Z
    1610:	b6 01       	movw	r22, r12
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	0e 94 38 0b 	call	0x1670	; 0x1670 <fputc>
    1618:	81 10       	cpse	r8, r1
    161a:	f5 cf       	rjmp	.-22     	; 0x1606 <vfprintf+0x384>
    161c:	22 20       	and	r2, r2
    161e:	09 f4       	brne	.+2      	; 0x1622 <vfprintf+0x3a0>
    1620:	42 ce       	rjmp	.-892    	; 0x12a6 <vfprintf+0x24>
    1622:	b6 01       	movw	r22, r12
    1624:	80 e2       	ldi	r24, 0x20	; 32
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	0e 94 38 0b 	call	0x1670	; 0x1670 <fputc>
    162c:	2a 94       	dec	r2
    162e:	f6 cf       	rjmp	.-20     	; 0x161c <vfprintf+0x39a>
    1630:	f6 01       	movw	r30, r12
    1632:	86 81       	ldd	r24, Z+6	; 0x06
    1634:	97 81       	ldd	r25, Z+7	; 0x07
    1636:	02 c0       	rjmp	.+4      	; 0x163c <vfprintf+0x3ba>
    1638:	8f ef       	ldi	r24, 0xFF	; 255
    163a:	9f ef       	ldi	r25, 0xFF	; 255
    163c:	2b 96       	adiw	r28, 0x0b	; 11
    163e:	e2 e1       	ldi	r30, 0x12	; 18
    1640:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__epilogue_restores__>

00001644 <strnlen_P>:
    1644:	fc 01       	movw	r30, r24
    1646:	05 90       	lpm	r0, Z+
    1648:	61 50       	subi	r22, 0x01	; 1
    164a:	70 40       	sbci	r23, 0x00	; 0
    164c:	01 10       	cpse	r0, r1
    164e:	d8 f7       	brcc	.-10     	; 0x1646 <strnlen_P+0x2>
    1650:	80 95       	com	r24
    1652:	90 95       	com	r25
    1654:	8e 0f       	add	r24, r30
    1656:	9f 1f       	adc	r25, r31
    1658:	08 95       	ret

0000165a <strnlen>:
    165a:	fc 01       	movw	r30, r24
    165c:	61 50       	subi	r22, 0x01	; 1
    165e:	70 40       	sbci	r23, 0x00	; 0
    1660:	01 90       	ld	r0, Z+
    1662:	01 10       	cpse	r0, r1
    1664:	d8 f7       	brcc	.-10     	; 0x165c <strnlen+0x2>
    1666:	80 95       	com	r24
    1668:	90 95       	com	r25
    166a:	8e 0f       	add	r24, r30
    166c:	9f 1f       	adc	r25, r31
    166e:	08 95       	ret

00001670 <fputc>:
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	fb 01       	movw	r30, r22
    167a:	23 81       	ldd	r18, Z+3	; 0x03
    167c:	21 fd       	sbrc	r18, 1
    167e:	03 c0       	rjmp	.+6      	; 0x1686 <fputc+0x16>
    1680:	8f ef       	ldi	r24, 0xFF	; 255
    1682:	9f ef       	ldi	r25, 0xFF	; 255
    1684:	2c c0       	rjmp	.+88     	; 0x16de <fputc+0x6e>
    1686:	22 ff       	sbrs	r18, 2
    1688:	16 c0       	rjmp	.+44     	; 0x16b6 <fputc+0x46>
    168a:	46 81       	ldd	r20, Z+6	; 0x06
    168c:	57 81       	ldd	r21, Z+7	; 0x07
    168e:	24 81       	ldd	r18, Z+4	; 0x04
    1690:	35 81       	ldd	r19, Z+5	; 0x05
    1692:	42 17       	cp	r20, r18
    1694:	53 07       	cpc	r21, r19
    1696:	44 f4       	brge	.+16     	; 0x16a8 <fputc+0x38>
    1698:	a0 81       	ld	r26, Z
    169a:	b1 81       	ldd	r27, Z+1	; 0x01
    169c:	9d 01       	movw	r18, r26
    169e:	2f 5f       	subi	r18, 0xFF	; 255
    16a0:	3f 4f       	sbci	r19, 0xFF	; 255
    16a2:	31 83       	std	Z+1, r19	; 0x01
    16a4:	20 83       	st	Z, r18
    16a6:	8c 93       	st	X, r24
    16a8:	26 81       	ldd	r18, Z+6	; 0x06
    16aa:	37 81       	ldd	r19, Z+7	; 0x07
    16ac:	2f 5f       	subi	r18, 0xFF	; 255
    16ae:	3f 4f       	sbci	r19, 0xFF	; 255
    16b0:	37 83       	std	Z+7, r19	; 0x07
    16b2:	26 83       	std	Z+6, r18	; 0x06
    16b4:	14 c0       	rjmp	.+40     	; 0x16de <fputc+0x6e>
    16b6:	8b 01       	movw	r16, r22
    16b8:	ec 01       	movw	r28, r24
    16ba:	fb 01       	movw	r30, r22
    16bc:	00 84       	ldd	r0, Z+8	; 0x08
    16be:	f1 85       	ldd	r31, Z+9	; 0x09
    16c0:	e0 2d       	mov	r30, r0
    16c2:	09 95       	icall
    16c4:	89 2b       	or	r24, r25
    16c6:	e1 f6       	brne	.-72     	; 0x1680 <fputc+0x10>
    16c8:	d8 01       	movw	r26, r16
    16ca:	16 96       	adiw	r26, 0x06	; 6
    16cc:	8d 91       	ld	r24, X+
    16ce:	9c 91       	ld	r25, X
    16d0:	17 97       	sbiw	r26, 0x07	; 7
    16d2:	01 96       	adiw	r24, 0x01	; 1
    16d4:	17 96       	adiw	r26, 0x07	; 7
    16d6:	9c 93       	st	X, r25
    16d8:	8e 93       	st	-X, r24
    16da:	16 97       	sbiw	r26, 0x06	; 6
    16dc:	ce 01       	movw	r24, r28
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	1f 91       	pop	r17
    16e4:	0f 91       	pop	r16
    16e6:	08 95       	ret

000016e8 <__ultoa_invert>:
    16e8:	fa 01       	movw	r30, r20
    16ea:	aa 27       	eor	r26, r26
    16ec:	28 30       	cpi	r18, 0x08	; 8
    16ee:	51 f1       	breq	.+84     	; 0x1744 <__ultoa_invert+0x5c>
    16f0:	20 31       	cpi	r18, 0x10	; 16
    16f2:	81 f1       	breq	.+96     	; 0x1754 <__ultoa_invert+0x6c>
    16f4:	e8 94       	clt
    16f6:	6f 93       	push	r22
    16f8:	6e 7f       	andi	r22, 0xFE	; 254
    16fa:	6e 5f       	subi	r22, 0xFE	; 254
    16fc:	7f 4f       	sbci	r23, 0xFF	; 255
    16fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1700:	9f 4f       	sbci	r25, 0xFF	; 255
    1702:	af 4f       	sbci	r26, 0xFF	; 255
    1704:	b1 e0       	ldi	r27, 0x01	; 1
    1706:	3e d0       	rcall	.+124    	; 0x1784 <__ultoa_invert+0x9c>
    1708:	b4 e0       	ldi	r27, 0x04	; 4
    170a:	3c d0       	rcall	.+120    	; 0x1784 <__ultoa_invert+0x9c>
    170c:	67 0f       	add	r22, r23
    170e:	78 1f       	adc	r23, r24
    1710:	89 1f       	adc	r24, r25
    1712:	9a 1f       	adc	r25, r26
    1714:	a1 1d       	adc	r26, r1
    1716:	68 0f       	add	r22, r24
    1718:	79 1f       	adc	r23, r25
    171a:	8a 1f       	adc	r24, r26
    171c:	91 1d       	adc	r25, r1
    171e:	a1 1d       	adc	r26, r1
    1720:	6a 0f       	add	r22, r26
    1722:	71 1d       	adc	r23, r1
    1724:	81 1d       	adc	r24, r1
    1726:	91 1d       	adc	r25, r1
    1728:	a1 1d       	adc	r26, r1
    172a:	20 d0       	rcall	.+64     	; 0x176c <__ultoa_invert+0x84>
    172c:	09 f4       	brne	.+2      	; 0x1730 <__ultoa_invert+0x48>
    172e:	68 94       	set
    1730:	3f 91       	pop	r19
    1732:	2a e0       	ldi	r18, 0x0A	; 10
    1734:	26 9f       	mul	r18, r22
    1736:	11 24       	eor	r1, r1
    1738:	30 19       	sub	r19, r0
    173a:	30 5d       	subi	r19, 0xD0	; 208
    173c:	31 93       	st	Z+, r19
    173e:	de f6       	brtc	.-74     	; 0x16f6 <__ultoa_invert+0xe>
    1740:	cf 01       	movw	r24, r30
    1742:	08 95       	ret
    1744:	46 2f       	mov	r20, r22
    1746:	47 70       	andi	r20, 0x07	; 7
    1748:	40 5d       	subi	r20, 0xD0	; 208
    174a:	41 93       	st	Z+, r20
    174c:	b3 e0       	ldi	r27, 0x03	; 3
    174e:	0f d0       	rcall	.+30     	; 0x176e <__ultoa_invert+0x86>
    1750:	c9 f7       	brne	.-14     	; 0x1744 <__ultoa_invert+0x5c>
    1752:	f6 cf       	rjmp	.-20     	; 0x1740 <__ultoa_invert+0x58>
    1754:	46 2f       	mov	r20, r22
    1756:	4f 70       	andi	r20, 0x0F	; 15
    1758:	40 5d       	subi	r20, 0xD0	; 208
    175a:	4a 33       	cpi	r20, 0x3A	; 58
    175c:	18 f0       	brcs	.+6      	; 0x1764 <__ultoa_invert+0x7c>
    175e:	49 5d       	subi	r20, 0xD9	; 217
    1760:	31 fd       	sbrc	r19, 1
    1762:	40 52       	subi	r20, 0x20	; 32
    1764:	41 93       	st	Z+, r20
    1766:	02 d0       	rcall	.+4      	; 0x176c <__ultoa_invert+0x84>
    1768:	a9 f7       	brne	.-22     	; 0x1754 <__ultoa_invert+0x6c>
    176a:	ea cf       	rjmp	.-44     	; 0x1740 <__ultoa_invert+0x58>
    176c:	b4 e0       	ldi	r27, 0x04	; 4
    176e:	a6 95       	lsr	r26
    1770:	97 95       	ror	r25
    1772:	87 95       	ror	r24
    1774:	77 95       	ror	r23
    1776:	67 95       	ror	r22
    1778:	ba 95       	dec	r27
    177a:	c9 f7       	brne	.-14     	; 0x176e <__ultoa_invert+0x86>
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	61 05       	cpc	r22, r1
    1780:	71 05       	cpc	r23, r1
    1782:	08 95       	ret
    1784:	9b 01       	movw	r18, r22
    1786:	ac 01       	movw	r20, r24
    1788:	0a 2e       	mov	r0, r26
    178a:	06 94       	lsr	r0
    178c:	57 95       	ror	r21
    178e:	47 95       	ror	r20
    1790:	37 95       	ror	r19
    1792:	27 95       	ror	r18
    1794:	ba 95       	dec	r27
    1796:	c9 f7       	brne	.-14     	; 0x178a <__ultoa_invert+0xa2>
    1798:	62 0f       	add	r22, r18
    179a:	73 1f       	adc	r23, r19
    179c:	84 1f       	adc	r24, r20
    179e:	95 1f       	adc	r25, r21
    17a0:	a0 1d       	adc	r26, r0
    17a2:	08 95       	ret

000017a4 <__prologue_saves__>:
    17a4:	2f 92       	push	r2
    17a6:	3f 92       	push	r3
    17a8:	4f 92       	push	r4
    17aa:	5f 92       	push	r5
    17ac:	6f 92       	push	r6
    17ae:	7f 92       	push	r7
    17b0:	8f 92       	push	r8
    17b2:	9f 92       	push	r9
    17b4:	af 92       	push	r10
    17b6:	bf 92       	push	r11
    17b8:	cf 92       	push	r12
    17ba:	df 92       	push	r13
    17bc:	ef 92       	push	r14
    17be:	ff 92       	push	r15
    17c0:	0f 93       	push	r16
    17c2:	1f 93       	push	r17
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	ca 1b       	sub	r28, r26
    17ce:	db 0b       	sbc	r29, r27
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	cd bf       	out	0x3d, r28	; 61
    17da:	09 94       	ijmp

000017dc <__epilogue_restores__>:
    17dc:	2a 88       	ldd	r2, Y+18	; 0x12
    17de:	39 88       	ldd	r3, Y+17	; 0x11
    17e0:	48 88       	ldd	r4, Y+16	; 0x10
    17e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    17e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    17e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    17e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    17ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    17ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    17ee:	b9 84       	ldd	r11, Y+9	; 0x09
    17f0:	c8 84       	ldd	r12, Y+8	; 0x08
    17f2:	df 80       	ldd	r13, Y+7	; 0x07
    17f4:	ee 80       	ldd	r14, Y+6	; 0x06
    17f6:	fd 80       	ldd	r15, Y+5	; 0x05
    17f8:	0c 81       	ldd	r16, Y+4	; 0x04
    17fa:	1b 81       	ldd	r17, Y+3	; 0x03
    17fc:	aa 81       	ldd	r26, Y+2	; 0x02
    17fe:	b9 81       	ldd	r27, Y+1	; 0x01
    1800:	ce 0f       	add	r28, r30
    1802:	d1 1d       	adc	r29, r1
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	de bf       	out	0x3e, r29	; 62
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	cd bf       	out	0x3d, r28	; 61
    180e:	ed 01       	movw	r28, r26
    1810:	08 95       	ret

00001812 <_exit>:
    1812:	f8 94       	cli

00001814 <__stop_program>:
    1814:	ff cf       	rjmp	.-2      	; 0x1814 <__stop_program>
