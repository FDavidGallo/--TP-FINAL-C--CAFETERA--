
tP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00001574  00001608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001574  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  00800150  00800150  00001658  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001658  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  000016f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002691  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eb8  00000000  00000000  00004025  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001733  00000000  00000000  00004edd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000618  00000000  00000000  00006610  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a68  00000000  00000000  00006c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f2f  00000000  00000000  00007690  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  000085bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e7       	ldi	r30, 0x74	; 116
      7c:	f5 e1       	ldi	r31, 0x15	; 21
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 35       	cpi	r26, 0x50	; 80
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a0 e5       	ldi	r26, 0x50	; 80
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 39       	cpi	r26, 0x99	; 153
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 93 05 	call	0xb26	; 0xb26 <main>
      9e:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <iniciar_ADC>:


#include "ADC.h"

void iniciar_ADC(void){
ADMUX |= (1 << REFS0); // Voltaje de referencia AVCC con capacitor externo en AREF (tension de referencia)
      a6:	ec e7       	ldi	r30, 0x7C	; 124
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	80 81       	ld	r24, Z
      ac:	80 64       	ori	r24, 0x40	; 64
      ae:	80 83       	st	Z, r24
ADMUX &= ~(1 << ADLAR); // ADC derecho justificado, los bits mas significativos se ubicaran en los bits mas altos del registo de resultado ADC
      b0:	80 81       	ld	r24, Z
      b2:	8f 7d       	andi	r24, 0xDF	; 223
      b4:	80 83       	st	Z, r24
ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //Prescaler en 128, divide la frecuencia del ADC por 128, esto hace que la conversion sea mas lenta pero precisa.
      b6:	ea e7       	ldi	r30, 0x7A	; 122
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	80 81       	ld	r24, Z
      bc:	87 60       	ori	r24, 0x07	; 7
      be:	80 83       	st	Z, r24
ADCSRA |= (1 << ADEN); // Habilita el ADC, el bit ADEN en 1 permite que se realicen las conversiones ADC
      c0:	80 81       	ld	r24, Z
      c2:	80 68       	ori	r24, 0x80	; 128
      c4:	80 83       	st	Z, r24
      c6:	08 95       	ret

000000c8 <leer_ADC>:
}

void leer_ADC(char canal){
ADMUX &= 0xF0; // Limpiar bits de selección de canal, hace una AND con 0xF0 (11110000) es para asegurar que los bits de seleccion de canal esten en 0 antes de seleccionarlos
      c8:	ec e7       	ldi	r30, 0x7C	; 124
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	90 81       	ld	r25, Z
      ce:	90 7f       	andi	r25, 0xF0	; 240
      d0:	90 83       	st	Z, r25
ADMUX |= (0x00+canal); // Selecciona el pin analogico que deseamos, en el main por ej utilizamos con canales a0 (canal 0) y a1 (canal 1)
      d2:	90 81       	ld	r25, Z
      d4:	89 2b       	or	r24, r25
      d6:	80 83       	st	Z, r24
ADCSRA |= (1 << ADSC); // Iniciar conversión
      d8:	ea e7       	ldi	r30, 0x7A	; 122
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	80 81       	ld	r24, Z
      de:	80 64       	ori	r24, 0x40	; 64
      e0:	80 83       	st	Z, r24
while(ADCSRA & (1 << ADSC)); // Espera a que termine la conversión
      e2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
      e6:	86 fd       	sbrc	r24, 6
      e8:	fc cf       	rjmp	.-8      	; 0xe2 <leer_ADC+0x1a>
      ea:	08 95       	ret

000000ec <i2c_init>:

#include "i2c.h"
int ejecucionUnica = 1;

void i2c_init() { //Se encarga de inicializar el bus I2C en modo maestro con una velocidad de transmisión de 100 kHz
	TWBR = 25; // Frecuencia de reloj de 16MHz / (16 + 2 * TWBR * 1) = 100 kHz {con 25242kHz}
      ec:	89 e1       	ldi	r24, 0x19	; 25
      ee:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWSR = 0;  // Prescaler de 1
      f2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
      f6:	08 95       	ret

000000f8 <i2c_start>:
}

void i2c_start(){	//Envía una condición de inicio al bus I2C.
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTA); // Condición de inicio
      f8:	84 ea       	ldi	r24, 0xA4	; 164
      fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT))); // Verificar la condición de inicio
      fe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     102:	88 23       	and	r24, r24
     104:	e4 f7       	brge	.-8      	; 0xfe <i2c_start+0x6>
}
     106:	08 95       	ret

00000108 <i2c_write>:
	//TWINT (para limpiar la bandera de interrupción), 
	//TWEN (para habilitar el módulo I2C) y TWSTA (para enviar la condición de inicio). 

void i2c_write(char x){	//Se utiliza para escribir un byte de datos en el bus I2C. 
	TWDR = x; // Mover valor a I2C
     108:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN); // Habilite I2C y borra la interrupción
     10c:	84 e8       	ldi	r24, 0x84	; 132
     10e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));
     112:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     116:	88 23       	and	r24, r24
     118:	e4 f7       	brge	.-8      	; 0x112 <i2c_write+0xa>
}
     11a:	08 95       	ret

0000011c <i2c_stop>:

void i2c_stop(){	//Envía una condición de parada al bus I2C, indicando el final de la transmisión.
	TWCR = (1<<TWSTO)|(1<<TWINT)|(1<<TWEN);
     11c:	84 e9       	ldi	r24, 0x94	; 148
     11e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (TWCR&(1<TWSTO));	
     122:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     126:	80 fd       	sbrc	r24, 0
     128:	fc cf       	rjmp	.-8      	; 0x122 <i2c_stop+0x6>
}
     12a:	08 95       	ret

0000012c <enviarPulsoEnable>:
#include "LCD_I2C.h"
#include <util/delay.h>

void enviarPulsoEnable()
{
TWDR |= 0x02;					//---PIN En la pantalla LCD en = 1; -----Enclavar datos en el registro de datos LCD usando una señal de alta a baja
     12c:	eb eb       	ldi	r30, 0xBB	; 187
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	82 60       	ori	r24, 0x02	; 2
     134:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//---Habilita I2C y borra la interrupción- Esta linea y la siguiente simepre van despues de querer mandar un coamndo por TDWR
     136:	84 e8       	ldi	r24, 0x84	; 132
     138:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));	//---Siempre poner despues de la linea anterior al mandar datos por TWDR
     13c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     140:	88 23       	and	r24, r24
     142:	e4 f7       	brge	.-8      	; 0x13c <enviarPulsoEnable+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     144:	89 ef       	ldi	r24, 0xF9	; 249
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	01 97       	sbiw	r24, 0x01	; 1
     14a:	f1 f7       	brne	.-4      	; 0x148 <enviarPulsoEnable+0x1c>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <enviarPulsoEnable+0x22>
     14e:	00 00       	nop
_delay_ms(1);
TWDR &= ~0x02;					//---PIN del Enable de la LCD en = 0;
     150:	eb eb       	ldi	r30, 0xBB	; 187
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	8d 7f       	andi	r24, 0xFD	; 253
     158:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//---Habilita I2C y borra la interrupción
     15a:	84 e8       	ldi	r24, 0x84	; 132
     15c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     160:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     164:	88 23       	and	r24, r24
     166:	e4 f7       	brge	.-8      	; 0x160 <enviarPulsoEnable+0x34>
}
     168:	08 95       	ret

0000016a <enviarComando4Bits>:

void enviarComando4Bits(char v1)
{
TWDR &=~0x01;					//PIN RS de la pantalla LCD rs = 0; ----Seleccionar registro como registro de comando
     16a:	eb eb       	ldi	r30, 0xBB	; 187
     16c:	f0 e0       	ldi	r31, 0x00	; 0
     16e:	90 81       	ld	r25, Z
     170:	9e 7f       	andi	r25, 0xFE	; 254
     172:	90 83       	st	Z, r25
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     174:	94 e8       	ldi	r25, 0x84	; 132
     176:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     17a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     17e:	99 23       	and	r25, r25
     180:	e4 f7       	brge	.-8      	; 0x17a <enviarComando4Bits+0x10>
TWDR &= 0x0F;					//----Enmascaramiento de 4 bits superiores y envío a LCD
     182:	eb eb       	ldi	r30, 0xBB	; 187
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	90 81       	ld	r25, Z
     188:	9f 70       	andi	r25, 0x0F	; 15
     18a:	90 83       	st	Z, r25
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     18c:	94 e8       	ldi	r25, 0x84	; 132
     18e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     192:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     196:	99 23       	and	r25, r25
     198:	e4 f7       	brge	.-8      	; 0x192 <enviarComando4Bits+0x28>
TWDR |= (v1 & 0xF0);			//----
     19a:	eb eb       	ldi	r30, 0xBB	; 187
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	90 81       	ld	r25, Z
     1a0:	80 7f       	andi	r24, 0xF0	; 240
     1a2:	89 2b       	or	r24, r25
     1a4:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     1a6:	84 e8       	ldi	r24, 0x84	; 132
     1a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     1ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1b0:	88 23       	and	r24, r24
     1b2:	e4 f7       	brge	.-8      	; 0x1ac <enviarComando4Bits+0x42>
enviarPulsoEnable();
     1b4:	0e 94 96 00 	call	0x12c	; 0x12c <enviarPulsoEnable>
     1b8:	08 95       	ret

000001ba <enviarComando>:
}

void enviarComando(char v2)
{
     1ba:	cf 93       	push	r28
     1bc:	c8 2f       	mov	r28, r24
TWDR&=~0x01;					//rs = 0; ----Seleccionar registro como registro de comando
     1be:	eb eb       	ldi	r30, 0xBB	; 187
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 81       	ld	r24, Z
     1c4:	8e 7f       	andi	r24, 0xFE	; 254
     1c6:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     1c8:	84 e8       	ldi	r24, 0x84	; 132
     1ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     1ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1d2:	88 23       	and	r24, r24
     1d4:	e4 f7       	brge	.-8      	; 0x1ce <enviarComando+0x14>

TWDR &= 0x0F;                   //----borrando los 4 bits superiores
     1d6:	eb eb       	ldi	r30, 0xBB	; 187
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	80 81       	ld	r24, Z
     1dc:	8f 70       	andi	r24, 0x0F	; 15
     1de:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     1e0:	84 e8       	ldi	r24, 0x84	; 132
     1e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     1e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1ea:	88 23       	and	r24, r24
     1ec:	e4 f7       	brge	.-8      	; 0x1e6 <enviarComando+0x2c>
TWDR |= (v2 & 0xF0);			//----Enmascaramiento de 4 bits superiores y envío a LCD
     1ee:	eb eb       	ldi	r30, 0xBB	; 187
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	80 81       	ld	r24, Z
     1f4:	9c 2f       	mov	r25, r28
     1f6:	90 7f       	andi	r25, 0xF0	; 240
     1f8:	89 2b       	or	r24, r25
     1fa:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     1fc:	84 e8       	ldi	r24, 0x84	; 132
     1fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     202:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     206:	88 23       	and	r24, r24
     208:	e4 f7       	brge	.-8      	; 0x202 <enviarComando+0x48>
enviarPulsoEnable();
     20a:	0e 94 96 00 	call	0x12c	; 0x12c <enviarPulsoEnable>
	
TWDR &= 0x0F;                    //----borrando los 4 bits superiores
     20e:	eb eb       	ldi	r30, 0xBB	; 187
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	8f 70       	andi	r24, 0x0F	; 15
     216:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     218:	84 e8       	ldi	r24, 0x84	; 132
     21a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     21e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     222:	88 23       	and	r24, r24
     224:	e4 f7       	brge	.-8      	; 0x21e <enviarComando+0x64>
TWDR |= ((v2 & 0x0F)<<4);		//----Enmascaramiento de 4 bits inferiores y envío a LCD
     226:	eb eb       	ldi	r30, 0xBB	; 187
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	20 81       	ld	r18, Z
     22c:	30 e1       	ldi	r19, 0x10	; 16
     22e:	c3 9f       	mul	r28, r19
     230:	c0 01       	movw	r24, r0
     232:	11 24       	eor	r1, r1
     234:	82 2b       	or	r24, r18
     236:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilite I2C y borra la interrupción
     238:	84 e8       	ldi	r24, 0x84	; 132
     23a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     23e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     242:	88 23       	and	r24, r24
     244:	e4 f7       	brge	.-8      	; 0x23e <enviarComando+0x84>
enviarPulsoEnable();
     246:	0e 94 96 00 	call	0x12c	; 0x12c <enviarPulsoEnable>
}
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <escribirDato>:

void escribirDato(char v3)
{
     24e:	cf 93       	push	r28
     250:	c8 2f       	mov	r28, r24
TWDR|=0x01;						//RS = 1; ----Selecciona registro como registro de comando
     252:	eb eb       	ldi	r30, 0xBB	; 187
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	81 60       	ori	r24, 0x01	; 1
     25a:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     25c:	84 e8       	ldi	r24, 0x84	; 132
     25e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     262:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     266:	88 23       	and	r24, r24
     268:	e4 f7       	brge	.-8      	; 0x262 <escribirDato+0x14>
TWDR &= 0x0F;				    //----borrando los 4 bits superiores
     26a:	eb eb       	ldi	r30, 0xBB	; 187
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	80 81       	ld	r24, Z
     270:	8f 70       	andi	r24, 0x0F	; 15
     272:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     274:	84 e8       	ldi	r24, 0x84	; 132
     276:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     27a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     27e:	88 23       	and	r24, r24
     280:	e4 f7       	brge	.-8      	; 0x27a <escribirDato+0x2c>
TWDR |= (v3 & 0xF0);			//----Enmascaramiento de 4 bits superiores y envío a LCD
     282:	eb eb       	ldi	r30, 0xBB	; 187
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	9c 2f       	mov	r25, r28
     28a:	90 7f       	andi	r25, 0xF0	; 240
     28c:	89 2b       	or	r24, r25
     28e:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     290:	84 e8       	ldi	r24, 0x84	; 132
     292:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     296:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     29a:	88 23       	and	r24, r24
     29c:	e4 f7       	brge	.-8      	; 0x296 <escribirDato+0x48>
enviarPulsoEnable();
     29e:	0e 94 96 00 	call	0x12c	; 0x12c <enviarPulsoEnable>
	
TWDR &= 0x0F;					//----borrando los 4 bits superiores
     2a2:	eb eb       	ldi	r30, 0xBB	; 187
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	80 81       	ld	r24, Z
     2a8:	8f 70       	andi	r24, 0x0F	; 15
     2aa:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     2ac:	84 e8       	ldi	r24, 0x84	; 132
     2ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     2b2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2b6:	88 23       	and	r24, r24
     2b8:	e4 f7       	brge	.-8      	; 0x2b2 <escribirDato+0x64>
TWDR |= ((v3 & 0x0F)<<4);		//----Enmascaramiento de 4 bits inferiores y envío a LCD
     2ba:	eb eb       	ldi	r30, 0xBB	; 187
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	20 81       	ld	r18, Z
     2c0:	30 e1       	ldi	r19, 0x10	; 16
     2c2:	c3 9f       	mul	r28, r19
     2c4:	c0 01       	movw	r24, r0
     2c6:	11 24       	eor	r1, r1
     2c8:	82 2b       	or	r24, r18
     2ca:	80 83       	st	Z, r24
TWCR = (1<<TWINT) | (1<<TWEN);	//Habilita I2C y borra la interrupción
     2cc:	84 e8       	ldi	r24, 0x84	; 132
     2ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while  (!(TWCR &(1<<TWINT)));
     2d2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2d6:	88 23       	and	r24, r24
     2d8:	e4 f7       	brge	.-8      	; 0x2d2 <escribirDato+0x84>
enviarPulsoEnable();
     2da:	0e 94 96 00 	call	0x12c	; 0x12c <enviarPulsoEnable>
}
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <lcd_init>:

void lcd_init() {
i2c_init(); //inciamos la comunicación i2c
     2e2:	0e 94 76 00 	call	0xec	; 0xec <i2c_init>
i2c_start(); //Iniciamos el i2c
     2e6:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_start>
i2c_write(0x40); //Dirección del PCF8574
     2ea:	80 e4       	ldi	r24, 0x40	; 64
     2ec:	0e 94 84 00 	call	0x108	; 0x108 <i2c_write>
     2f0:	81 ee       	ldi	r24, 0xE1	; 225
     2f2:	94 e0       	ldi	r25, 0x04	; 4
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <lcd_init+0x12>
     2f8:	00 c0       	rjmp	.+0      	; 0x2fa <lcd_init+0x18>
     2fa:	00 00       	nop
// Inicialización del LCD de 20x4 en modo 4 bits.
_delay_ms(5);
enviarComando4Bits(0x30); // 3 veces
     2fc:	80 e3       	ldi	r24, 0x30	; 48
     2fe:	0e 94 b5 00 	call	0x16a	; 0x16a <enviarComando4Bits>
     302:	81 ee       	ldi	r24, 0xE1	; 225
     304:	94 e0       	ldi	r25, 0x04	; 4
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <lcd_init+0x24>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <lcd_init+0x2a>
     30c:	00 00       	nop
_delay_ms(5);
enviarComando4Bits(0x30);
     30e:	80 e3       	ldi	r24, 0x30	; 48
     310:	0e 94 b5 00 	call	0x16a	; 0x16a <enviarComando4Bits>
enviarComando4Bits(0x20); // Modo 4 bits
     314:	80 e2       	ldi	r24, 0x20	; 32
     316:	0e 94 b5 00 	call	0x16a	; 0x16a <enviarComando4Bits>
     31a:	81 ee       	ldi	r24, 0xE1	; 225
     31c:	94 e0       	ldi	r25, 0x04	; 4
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	f1 f7       	brne	.-4      	; 0x31e <lcd_init+0x3c>
     322:	00 c0       	rjmp	.+0      	; 0x324 <lcd_init+0x42>
     324:	00 00       	nop
_delay_ms(5);
	
// Configuración del LCD de 20x4
enviarComando(0x28);      // Función de 4 bits, 2 líneas, fuente 5x8
     326:	88 e2       	ldi	r24, 0x28	; 40
     328:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enviarComando>
enviarComando(0x0C);      // Encender el display, apagar el cursor
     32c:	8c e0       	ldi	r24, 0x0C	; 12
     32e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enviarComando>
enviarComando(0x01);      // Borrar pantalla
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enviarComando>
enviarComando(0x06);      // Desplazamiento del cursor a la derecha
     338:	86 e0       	ldi	r24, 0x06	; 6
     33a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enviarComando>
enviarComando(0x80);      // Posiciona el cursor en la primera línea, primera posición
     33e:	80 e8       	ldi	r24, 0x80	; 128
     340:	0e 94 dd 00 	call	0x1ba	; 0x1ba <enviarComando>
     344:	08 95       	ret

00000346 <escribirEnLCD>:
}

void escribirEnLCD(char *c)
{
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	ec 01       	movw	r28, r24
while(*c != 0)			//----Espere hasta que todas las cadenas pasen a la pantalla LCD.
     34c:	03 c0       	rjmp	.+6      	; 0x354 <escribirEnLCD+0xe>
escribirDato(*c++);		//----Enviar la cadena a la pantalla LCD
     34e:	21 96       	adiw	r28, 0x01	; 1
     350:	0e 94 27 01 	call	0x24e	; 0x24e <escribirDato>
enviarComando(0x80);      // Posiciona el cursor en la primera línea, primera posición
}

void escribirEnLCD(char *c)
{
while(*c != 0)			//----Espere hasta que todas las cadenas pasen a la pantalla LCD.
     354:	88 81       	ld	r24, Y
     356:	81 11       	cpse	r24, r1
     358:	fa cf       	rjmp	.-12     	; 0x34e <escribirEnLCD+0x8>
escribirDato(*c++);		//----Enviar la cadena a la pantalla LCD
}
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <TWI_ini>:

//????????????? TWI
void TWI_ini(void)
{
	//??????? ???????? ???????? ??????
	TWBR=0x05;//???????? ??? ???????? ???????? ??????: 5
     360:	85 e0       	ldi	r24, 0x05	; 5
     362:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     366:	08 95       	ret

00000368 <TWI_Start>:
void TWI_Start(void)
{
	//?????????? ?????? TWI: TWEN=1
	//????????? ???? ????????? "Start": TWSTA=1
	//????????? ???? ?????????? TWI: TWINT=1
	TWCR=(1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     368:	84 ea       	ldi	r24, 0xA4	; 164
     36a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(~TWCR&(1<<TWINT));//????????? ?????????? ????????
     36e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     372:	88 23       	and	r24, r24
     374:	e4 f7       	brge	.-8      	; 0x36e <TWI_Start+0x6>
}
     376:	08 95       	ret

00000378 <TWI_Sendbyte>:

//???????? ?????
void TWI_Sendbyte(unsigned char byte)
{
	TWDR=byte;//???????? ???? ? ??????? ??????
     378:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	//?????????? ?????? TWI
	//????????? ???? ?????????? TWI
	TWCR=(1<<TWEN)|(1<<TWINT);
     37c:	84 e8       	ldi	r24, 0x84	; 132
     37e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(~TWCR&(1<<TWINT));//????????? ?????????? ????????
     382:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     386:	88 23       	and	r24, r24
     388:	e4 f7       	brge	.-8      	; 0x382 <TWI_Sendbyte+0xa>
}
     38a:	08 95       	ret

0000038c <TWI_Receivebytes>:
//????? ??????
void TWI_Receivebytes()
{
   //...............................18 ???..................................
   //????? ??????? ????? ?????? 
   TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);//?????????? "ACK": TWEA=1
     38c:	84 ec       	ldi	r24, 0xC4	; 196
     38e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
   while(~TWCR&(1<<TWINT));//????????? ?????????? ????????
     392:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     396:	88 23       	and	r24, r24
     398:	e4 f7       	brge	.-8      	; 0x392 <TWI_Receivebytes+0x6>
   a1=TWDR;//?????????? ??????? ???? ?? MCP3421 ? ?????????? a1=TWDR;
     39a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	a0 e0       	ldi	r26, 0x00	; 0
     3a2:	b0 e0       	ldi	r27, 0x00	; 0
     3a4:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <a1>
     3a8:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <a1+0x1>
     3ac:	a0 93 5b 01 	sts	0x015B, r26	; 0x80015b <a1+0x2>
     3b0:	b0 93 5c 01 	sts	0x015C, r27	; 0x80015c <a1+0x3>
   //????? ??????? ????? ??????
   TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);//?????????? "ACK": TWEA=1
     3b4:	84 ec       	ldi	r24, 0xC4	; 196
     3b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
   while(~TWCR&(1<<TWINT));//????????? ?????????? ????????
     3ba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3be:	88 23       	and	r24, r24
     3c0:	e4 f7       	brge	.-8      	; 0x3ba <TWI_Receivebytes+0x2e>
   a2=TWDR;//?????????? ??????? ???? ?? MCP3421 ? ?????????? a1=TWDR;
     3c2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	a0 e0       	ldi	r26, 0x00	; 0
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <a2>
     3d0:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <a2+0x1>
     3d4:	a0 93 63 01 	sts	0x0163, r26	; 0x800163 <a2+0x2>
     3d8:	b0 93 64 01 	sts	0x0164, r27	; 0x800164 <a2+0x3>
   //????? ???????? ????? ??????
   TWCR=(1<<TWINT)|(1<<TWEN);//?????????? "NACK": TWEA ?? ?????????
     3dc:	84 e8       	ldi	r24, 0x84	; 132
     3de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
   while(~TWCR&(1<<TWINT));//????????? ?????????? ????????
     3e2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3e6:	88 23       	and	r24, r24
     3e8:	e4 f7       	brge	.-8      	; 0x3e2 <TWI_Receivebytes+0x56>
   a3=TWDR;//?????????? ??????? ???? ?? MCP3421 ? ?????????? a2
     3ea:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	a0 e0       	ldi	r26, 0x00	; 0
     3f2:	b0 e0       	ldi	r27, 0x00	; 0
     3f4:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <a3>
     3f8:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <a3+0x1>
     3fc:	a0 93 5f 01 	sts	0x015F, r26	; 0x80015f <a3+0x2>
     400:	b0 93 60 01 	sts	0x0160, r27	; 0x800160 <a3+0x3>
     404:	08 95       	ret

00000406 <TWI_Stop>:
void TWI_Stop(void)
{
	//?????????? ?????? TWI: TWEN=1
	//????????? ???? ????????? "Stop": TWSTO=1
	//????????? ???? ?????????? TWI: TWINT=1
	TWCR=(1<<TWEN)|(1<<TWSTO)|(1<<TWINT);
     406:	84 e9       	ldi	r24, 0x94	; 148
     408:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     40c:	08 95       	ret

0000040e <MCP3421_config>:
}

//????????? MCP3421
void MCP3421_config(void)
{
	TWI_Start();
     40e:	0e 94 b4 01 	call	0x368	; 0x368 <TWI_Start>
	TWI_Sendbyte(0b11010000);//?????????? ????? MCP3421: 1101000 + 0 ??????
     412:	80 ed       	ldi	r24, 0xD0	; 208
     414:	0e 94 bc 01 	call	0x378	; 0x378 <TWI_Sendbyte>
	TWI_Sendbyte(0b00011100);//?????????? ??????. ????: 00011100
     418:	8c e1       	ldi	r24, 0x1C	; 28
     41a:	0e 94 bc 01 	call	0x378	; 0x378 <TWI_Sendbyte>
	TWI_Stop();
     41e:	0e 94 03 02 	call	0x406	; 0x406 <TWI_Stop>
     422:	08 95       	ret

00000424 <MCP3421_read>:
}

//????????? ?????? ?? MCP3421

int MCP3421_read(void)
{
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
	TWI_ini(); //INCIALIZA EL TWI (TIENE UNA CONFIGURACIÓN ESPECIAL, NO HAY QUE TOCAR)
     428:	0e 94 b0 01 	call	0x360	; 0x360 <TWI_ini>
	MCP3421_config(); //configura el sensor MCP3421
     42c:	0e 94 07 02 	call	0x40e	; 0x40e <MCP3421_config>
	TWI_Start();
     430:	0e 94 b4 01 	call	0x368	; 0x368 <TWI_Start>
	TWI_Sendbyte(0b11010001);//?????????? ????? MCP3421: 1101000 + 1 ??????
     434:	81 ed       	ldi	r24, 0xD1	; 209
     436:	0e 94 bc 01 	call	0x378	; 0x378 <TWI_Sendbyte>
    TWI_Receivebytes();//??????? ????? ? ??????????? ?????????
     43a:	0e 94 c6 01 	call	0x38c	; 0x38c <TWI_Receivebytes>
	int Resultado = (((int)a1 << 10) | ((int)a2 << 2) | ((int)a3 >> 6))-2;
     43e:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <a1>
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	92 2f       	mov	r25, r18
     448:	99 0f       	add	r25, r25
     44a:	99 0f       	add	r25, r25
     44c:	c0 91 61 01 	lds	r28, 0x0161	; 0x800161 <a2>
     450:	d0 91 62 01 	lds	r29, 0x0162	; 0x800162 <a2+0x1>
     454:	cc 0f       	add	r28, r28
     456:	dd 1f       	adc	r29, r29
     458:	cc 0f       	add	r28, r28
     45a:	dd 1f       	adc	r29, r29
     45c:	c8 2b       	or	r28, r24
     45e:	d9 2b       	or	r29, r25
     460:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <a3>
     464:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <a3+0x1>
     468:	08 2e       	mov	r0, r24
     46a:	89 2f       	mov	r24, r25
     46c:	00 0c       	add	r0, r0
     46e:	88 1f       	adc	r24, r24
     470:	99 0b       	sbc	r25, r25
     472:	00 0c       	add	r0, r0
     474:	88 1f       	adc	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	c8 2b       	or	r28, r24
     47a:	d9 2b       	or	r29, r25
     47c:	22 97       	sbiw	r28, 0x02	; 2
    TWI_Stop();
     47e:	0e 94 03 02 	call	0x406	; 0x406 <TWI_Stop>
	return Resultado; 
}
     482:	ce 01       	movw	r24, r28
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	08 95       	ret

0000048a <i2c_read>:
	int MedicionTemperatura = atoi(buf);
	char buffer[10]; // Espacio para la cadena de caracteres
	sprintf(buffer, "%d", MedicionTemperatura); // Convierte el entero a una cadena
	uart_send_string(buffer);
	;
};
     48a:	94 ea       	ldi	r25, 0xA4	; 164
     48c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     490:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     494:	99 23       	and	r25, r25
     496:	e4 f7       	brge	.-8      	; 0x490 <i2c_read+0x6>
     498:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     49c:	9b 7f       	andi	r25, 0xFB	; 251
     49e:	98 30       	cpi	r25, 0x08	; 8
     4a0:	09 f0       	breq	.+2      	; 0x4a4 <i2c_read+0x1a>
     4a2:	57 c0       	rjmp	.+174    	; 0x552 <i2c_read+0xc8>
     4a4:	90 e9       	ldi	r25, 0x90	; 144
     4a6:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     4aa:	94 e8       	ldi	r25, 0x84	; 132
     4ac:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     4b0:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     4b4:	99 23       	and	r25, r25
     4b6:	e4 f7       	brge	.-8      	; 0x4b0 <i2c_read+0x26>
     4b8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     4bc:	9b 7f       	andi	r25, 0xFB	; 251
     4be:	98 31       	cpi	r25, 0x18	; 24
     4c0:	09 f0       	breq	.+2      	; 0x4c4 <i2c_read+0x3a>
     4c2:	47 c0       	rjmp	.+142    	; 0x552 <i2c_read+0xc8>
     4c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     4c8:	84 e8       	ldi	r24, 0x84	; 132
     4ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     4ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     4d2:	88 23       	and	r24, r24
     4d4:	e4 f7       	brge	.-8      	; 0x4ce <i2c_read+0x44>
     4d6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     4da:	8b 7f       	andi	r24, 0xFB	; 251
     4dc:	88 32       	cpi	r24, 0x28	; 40
     4de:	c9 f5       	brne	.+114    	; 0x552 <i2c_read+0xc8>
     4e0:	84 ea       	ldi	r24, 0xA4	; 164
     4e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     4e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     4ea:	88 23       	and	r24, r24
     4ec:	e4 f7       	brge	.-8      	; 0x4e6 <i2c_read+0x5c>
     4ee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     4f2:	8b 7f       	andi	r24, 0xFB	; 251
     4f4:	80 31       	cpi	r24, 0x10	; 16
     4f6:	69 f5       	brne	.+90     	; 0x552 <i2c_read+0xc8>
     4f8:	81 e9       	ldi	r24, 0x91	; 145
     4fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     4fe:	84 e8       	ldi	r24, 0x84	; 132
     500:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     504:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     508:	88 23       	and	r24, r24
     50a:	e4 f7       	brge	.-8      	; 0x504 <i2c_read+0x7a>
     50c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     510:	8b 7f       	andi	r24, 0xFB	; 251
     512:	80 34       	cpi	r24, 0x40	; 64
     514:	f1 f4       	brne	.+60     	; 0x552 <i2c_read+0xc8>
     516:	15 c0       	rjmp	.+42     	; 0x542 <i2c_read+0xb8>
     518:	21 15       	cp	r18, r1
     51a:	31 05       	cpc	r19, r1
     51c:	21 f4       	brne	.+8      	; 0x526 <i2c_read+0x9c>
     51e:	84 e8       	ldi	r24, 0x84	; 132
     520:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     524:	03 c0       	rjmp	.+6      	; 0x52c <i2c_read+0xa2>
     526:	84 ec       	ldi	r24, 0xC4	; 196
     528:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     52c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     530:	88 23       	and	r24, r24
     532:	e4 f7       	brge	.-8      	; 0x52c <i2c_read+0xa2>
     534:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     538:	fb 01       	movw	r30, r22
     53a:	80 83       	st	Z, r24
     53c:	a9 01       	movw	r20, r18
     53e:	6f 5f       	subi	r22, 0xFF	; 255
     540:	7f 4f       	sbci	r23, 0xFF	; 255
     542:	9a 01       	movw	r18, r20
     544:	21 50       	subi	r18, 0x01	; 1
     546:	31 09       	sbc	r19, r1
     548:	45 2b       	or	r20, r21
     54a:	31 f7       	brne	.-52     	; 0x518 <i2c_read+0x8e>
     54c:	84 e9       	ldi	r24, 0x94	; 148
     54e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     552:	08 95       	ret

00000554 <i2c_wwrite>:
     554:	94 ea       	ldi	r25, 0xA4	; 164
     556:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     55a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     55e:	99 23       	and	r25, r25
     560:	e4 f7       	brge	.-8      	; 0x55a <i2c_wwrite+0x6>
     562:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     566:	9b 7f       	andi	r25, 0xFB	; 251
     568:	98 30       	cpi	r25, 0x08	; 8
     56a:	d1 f5       	brne	.+116    	; 0x5e0 <i2c_wwrite+0x8c>
     56c:	90 e9       	ldi	r25, 0x90	; 144
     56e:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     572:	94 e8       	ldi	r25, 0x84	; 132
     574:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     578:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     57c:	99 23       	and	r25, r25
     57e:	e4 f7       	brge	.-8      	; 0x578 <i2c_wwrite+0x24>
     580:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     584:	9b 7f       	andi	r25, 0xFB	; 251
     586:	98 31       	cpi	r25, 0x18	; 24
     588:	59 f5       	brne	.+86     	; 0x5e0 <i2c_wwrite+0x8c>
     58a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     58e:	84 e8       	ldi	r24, 0x84	; 132
     590:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     594:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     598:	88 23       	and	r24, r24
     59a:	e4 f7       	brge	.-8      	; 0x594 <i2c_wwrite+0x40>
     59c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     5a0:	8b 7f       	andi	r24, 0xFB	; 251
     5a2:	88 32       	cpi	r24, 0x28	; 40
     5a4:	e9 f4       	brne	.+58     	; 0x5e0 <i2c_wwrite+0x8c>
     5a6:	14 c0       	rjmp	.+40     	; 0x5d0 <i2c_wwrite+0x7c>
     5a8:	fb 01       	movw	r30, r22
     5aa:	31 96       	adiw	r30, 0x01	; 1
     5ac:	db 01       	movw	r26, r22
     5ae:	8c 91       	ld	r24, X
     5b0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     5b4:	84 e8       	ldi	r24, 0x84	; 132
     5b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5ba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5be:	88 23       	and	r24, r24
     5c0:	e4 f7       	brge	.-8      	; 0x5ba <i2c_wwrite+0x66>
     5c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     5c6:	a9 01       	movw	r20, r18
     5c8:	8b 7f       	andi	r24, 0xFB	; 251
     5ca:	88 32       	cpi	r24, 0x28	; 40
     5cc:	49 f4       	brne	.+18     	; 0x5e0 <i2c_wwrite+0x8c>
     5ce:	bf 01       	movw	r22, r30
     5d0:	9a 01       	movw	r18, r20
     5d2:	21 50       	subi	r18, 0x01	; 1
     5d4:	31 09       	sbc	r19, r1
     5d6:	45 2b       	or	r20, r21
     5d8:	39 f7       	brne	.-50     	; 0x5a8 <i2c_wwrite+0x54>
     5da:	84 e9       	ldi	r24, 0x94	; 148
     5dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5e0:	08 95       	ret

000005e2 <mcp_set_adc_resolution>:
     5e2:	1f 93       	push	r17
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	1f 92       	push	r1
     5ea:	cd b7       	in	r28, 0x3d	; 61
     5ec:	de b7       	in	r29, 0x3e	; 62
     5ee:	18 2f       	mov	r17, r24
     5f0:	41 e0       	ldi	r20, 0x01	; 1
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	be 01       	movw	r22, r28
     5f6:	6f 5f       	subi	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	0e 94 45 02 	call	0x48a	; 0x48a <i2c_read>
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	28 2f       	mov	r18, r24
     604:	2f 79       	andi	r18, 0x9F	; 159
     606:	30 e2       	ldi	r19, 0x20	; 32
     608:	13 9f       	mul	r17, r19
     60a:	c0 01       	movw	r24, r0
     60c:	11 24       	eor	r1, r1
     60e:	82 2b       	or	r24, r18
     610:	89 83       	std	Y+1, r24	; 0x01
     612:	41 e0       	ldi	r20, 0x01	; 1
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	be 01       	movw	r22, r28
     618:	6f 5f       	subi	r22, 0xFF	; 255
     61a:	7f 4f       	sbci	r23, 0xFF	; 255
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	0e 94 aa 02 	call	0x554	; 0x554 <i2c_wwrite>
     622:	0f 90       	pop	r0
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	08 95       	ret

0000062c <mcp_set_power_mode>:
     62c:	1f 93       	push	r17
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	1f 92       	push	r1
     634:	cd b7       	in	r28, 0x3d	; 61
     636:	de b7       	in	r29, 0x3e	; 62
     638:	18 2f       	mov	r17, r24
     63a:	41 e0       	ldi	r20, 0x01	; 1
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	be 01       	movw	r22, r28
     640:	6f 5f       	subi	r22, 0xFF	; 255
     642:	7f 4f       	sbci	r23, 0xFF	; 255
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	0e 94 45 02 	call	0x48a	; 0x48a <i2c_read>
     64a:	89 81       	ldd	r24, Y+1	; 0x01
     64c:	8e 7f       	andi	r24, 0xFE	; 254
     64e:	18 2b       	or	r17, r24
     650:	19 83       	std	Y+1, r17	; 0x01
     652:	41 e0       	ldi	r20, 0x01	; 1
     654:	50 e0       	ldi	r21, 0x00	; 0
     656:	be 01       	movw	r22, r28
     658:	6f 5f       	subi	r22, 0xFF	; 255
     65a:	7f 4f       	sbci	r23, 0xFF	; 255
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	0e 94 aa 02 	call	0x554	; 0x554 <i2c_wwrite>
     662:	0f 90       	pop	r0
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	08 95       	ret

0000066c <mcp_read_temp_float>:
     66c:	ef 92       	push	r14
     66e:	ff 92       	push	r15
     670:	1f 93       	push	r17
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	00 d0       	rcall	.+0      	; 0x678 <mcp_read_temp_float+0xc>
     678:	cd b7       	in	r28, 0x3d	; 61
     67a:	de b7       	in	r29, 0x3e	; 62
     67c:	42 e0       	ldi	r20, 0x02	; 2
     67e:	50 e0       	ldi	r21, 0x00	; 0
     680:	be 01       	movw	r22, r28
     682:	6f 5f       	subi	r22, 0xFF	; 255
     684:	7f 4f       	sbci	r23, 0xFF	; 255
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	0e 94 45 02 	call	0x48a	; 0x48a <i2c_read>
     68c:	e9 80       	ldd	r14, Y+1	; 0x01
     68e:	fa 80       	ldd	r15, Y+2	; 0x02
     690:	b7 01       	movw	r22, r14
     692:	77 27       	eor	r23, r23
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__floatunsisf>
     69c:	1f 2d       	mov	r17, r15
     69e:	f7 fe       	sbrs	r15, 7
     6a0:	06 c0       	rjmp	.+12     	; 0x6ae <mcp_read_temp_float+0x42>
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	40 e0       	ldi	r20, 0x00	; 0
     6a8:	5f e3       	ldi	r21, 0x3F	; 63
     6aa:	0e 94 99 05 	call	0xb32	; 0xb32 <__addsf3>
     6ae:	16 ff       	sbrs	r17, 6
     6b0:	06 c0       	rjmp	.+12     	; 0x6be <mcp_read_temp_float+0x52>
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	40 e8       	ldi	r20, 0x80	; 128
     6b8:	5e e3       	ldi	r21, 0x3E	; 62
     6ba:	0e 94 99 05 	call	0xb32	; 0xb32 <__addsf3>
     6be:	15 ff       	sbrs	r17, 5
     6c0:	06 c0       	rjmp	.+12     	; 0x6ce <mcp_read_temp_float+0x62>
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	40 e0       	ldi	r20, 0x00	; 0
     6c8:	5e e3       	ldi	r21, 0x3E	; 62
     6ca:	0e 94 99 05 	call	0xb32	; 0xb32 <__addsf3>
     6ce:	14 ff       	sbrs	r17, 4
     6d0:	06 c0       	rjmp	.+12     	; 0x6de <mcp_read_temp_float+0x72>
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	40 e8       	ldi	r20, 0x80	; 128
     6d8:	5d e3       	ldi	r21, 0x3D	; 61
     6da:	0e 94 99 05 	call	0xb32	; 0xb32 <__addsf3>
     6de:	0f 90       	pop	r0
     6e0:	0f 90       	pop	r0
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	ff 90       	pop	r15
     6ea:	ef 90       	pop	r14
     6ec:	08 95       	ret

000006ee <LeerTemperatura>:
int LeerTemperatura(void){
     6ee:	8f 92       	push	r8
     6f0:	9f 92       	push	r9
     6f2:	af 92       	push	r10
     6f4:	bf 92       	push	r11
     6f6:	cf 92       	push	r12
     6f8:	df 92       	push	r13
     6fa:	ef 92       	push	r14
     6fc:	ff 92       	push	r15
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
     70a:	aa 97       	sbiw	r28, 0x2a	; 42
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	f8 94       	cli
     710:	de bf       	out	0x3e, r29	; 62
     712:	0f be       	out	0x3f, r0	; 63
     714:	cd bf       	out	0x3d, r28	; 61
	int i=1;
char buf[32];
uart_init();
     716:	0e 94 4a 04 	call	0x894	; 0x894 <uart_init>
//init MCP9800 sensor
mcp_init();
mcp_set_adc_resolution(MCP_ADC_RES_12);
     71a:	83 e0       	ldi	r24, 0x03	; 3
     71c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <mcp_set_adc_resolution>
mcp_set_power_mode(MCP_POWER_UP);
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	0e 94 16 03 	call	0x62c	; 0x62c <mcp_set_power_mode>
for (i=1; i<=250; i++)
     726:	01 e0       	ldi	r16, 0x01	; 1
     728:	10 e0       	ldi	r17, 0x00	; 0
     72a:	3c c0       	rjmp	.+120    	; 0x7a4 <LeerTemperatura+0xb6>
{
	float temp = mcp_read_temp_float();
     72c:	0e 94 36 03 	call	0x66c	; 0x66c <mcp_read_temp_float>
     730:	4b 01       	movw	r8, r22
     732:	5c 01       	movw	r10, r24
	int temp_whole = (int)temp; // Extract whole number part
     734:	0e 94 77 06 	call	0xcee	; 0xcee <__fixsfsi>
     738:	6b 01       	movw	r12, r22
     73a:	7c 01       	movw	r14, r24
	int temp_frac = (int)((temp - temp_whole) * 10000); // Extract fractional part with desired precision
     73c:	07 2e       	mov	r0, r23
     73e:	00 0c       	add	r0, r0
     740:	88 0b       	sbc	r24, r24
     742:	99 0b       	sbc	r25, r25
     744:	0e 94 af 06 	call	0xd5e	; 0xd5e <__floatsisf>
     748:	9b 01       	movw	r18, r22
     74a:	ac 01       	movw	r20, r24
     74c:	c5 01       	movw	r24, r10
     74e:	b4 01       	movw	r22, r8
     750:	0e 94 98 05 	call	0xb30	; 0xb30 <__subsf3>
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e4       	ldi	r19, 0x40	; 64
     758:	4c e1       	ldi	r20, 0x1C	; 28
     75a:	56 e4       	ldi	r21, 0x46	; 70
     75c:	0e 94 3b 07 	call	0xe76	; 0xe76 <__mulsf3>
     760:	0e 94 77 06 	call	0xcee	; 0xcee <__fixsfsi>
     764:	9b 01       	movw	r18, r22
	if(temp_frac < 0) temp_frac = -temp_frac; // Ensure the fractional part is positive
     766:	77 23       	and	r23, r23
     768:	24 f4       	brge	.+8      	; 0x772 <LeerTemperatura+0x84>
     76a:	22 27       	eor	r18, r18
     76c:	33 27       	eor	r19, r19
     76e:	26 1b       	sub	r18, r22
     770:	37 0b       	sbc	r19, r23
	// Now print both parts separately
	sprintf(buf, "%d.%04d", temp_whole, temp_frac);
     772:	3f 93       	push	r19
     774:	2f 93       	push	r18
     776:	df 92       	push	r13
     778:	cf 92       	push	r12
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	9f 93       	push	r25
     780:	8f 93       	push	r24
     782:	ce 01       	movw	r24, r28
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	9f 93       	push	r25
     788:	8f 93       	push	r24
     78a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <sprintf>
	// Send the temperature string over UART
	uart_send_string("");
     78e:	88 e1       	ldi	r24, 0x18	; 24
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	0e 94 5d 04 	call	0x8ba	; 0x8ba <uart_send_string>
uart_init();
//init MCP9800 sensor
mcp_init();
mcp_set_adc_resolution(MCP_ADC_RES_12);
mcp_set_power_mode(MCP_POWER_UP);
for (i=1; i<=250; i++)
     796:	0f 5f       	subi	r16, 0xFF	; 255
     798:	1f 4f       	sbci	r17, 0xFF	; 255
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	de bf       	out	0x3e, r29	; 62
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	cd bf       	out	0x3d, r28	; 61
     7a4:	0b 3f       	cpi	r16, 0xFB	; 251
     7a6:	11 05       	cpc	r17, r1
     7a8:	0c f2       	brlt	.-126    	; 0x72c <LeerTemperatura+0x3e>
	// Now print both parts separately
	sprintf(buf, "%d.%04d", temp_whole, temp_frac);
	// Send the temperature string over UART
	uart_send_string("");
}
uart_send_newline();
     7aa:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <uart_send_newline>
//uart_send_string("Temperatura: ");
//uart_send_string(buf);
//uart_send_newline();
// Convert the formatted string to an integer
int MedicionTemperatura = atoi(buf);
     7ae:	ce 01       	movw	r24, r28
     7b0:	01 96       	adiw	r24, 0x01	; 1
     7b2:	0e 94 a8 07 	call	0xf50	; 0xf50 <atoi>
char buffer[10]; // Espacio para la cadena de caracteres
sprintf(buffer, "%d", MedicionTemperatura); // Convierte el entero a una cadena
     7b6:	9f 93       	push	r25
     7b8:	8f 93       	push	r24
     7ba:	89 e1       	ldi	r24, 0x19	; 25
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	9f 93       	push	r25
     7c0:	8f 93       	push	r24
     7c2:	8e 01       	movw	r16, r28
     7c4:	0f 5d       	subi	r16, 0xDF	; 223
     7c6:	1f 4f       	sbci	r17, 0xFF	; 255
     7c8:	1f 93       	push	r17
     7ca:	0f 93       	push	r16
     7cc:	0e 94 ce 07 	call	0xf9c	; 0xf9c <sprintf>
MedicionTemperatura = atoi(buffer);
     7d0:	c8 01       	movw	r24, r16
     7d2:	0e 94 a8 07 	call	0xf50	; 0xf50 <atoi>
    return MedicionTemperatura;}
     7d6:	0f 90       	pop	r0
     7d8:	0f 90       	pop	r0
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	aa 96       	adiw	r28, 0x2a	; 42
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	f8 94       	cli
     7e8:	de bf       	out	0x3e, r29	; 62
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	cd bf       	out	0x3d, r28	; 61
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	ff 90       	pop	r15
     7f8:	ef 90       	pop	r14
     7fa:	df 90       	pop	r13
     7fc:	cf 90       	pop	r12
     7fe:	bf 90       	pop	r11
     800:	af 90       	pop	r10
     802:	9f 90       	pop	r9
     804:	8f 90       	pop	r8
     806:	08 95       	ret

00000808 <ConfigurarPinesSensores>:
	uint8_t BotonSeleccionar = 0; // Estado del sensor de la taza (0 o 1)
	uint8_t BotonAceptar = 0; // Estado del sensor de la puerta (0 o 1)
	char Buffer[2];
void ConfigurarPinesSensores() {
	// ConfiGURAMOS CIERTOS PINES DEL PUERTO D COMO ENTRADAS DIGITALES
	DDRD &= ~(1 << PD3); // PD3 
     808:	8a b1       	in	r24, 0x0a	; 10
     80a:	87 7f       	andi	r24, 0xF7	; 247
     80c:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << PD4); // PD4
     80e:	8a b1       	in	r24, 0x0a	; 10
     810:	8f 7e       	andi	r24, 0xEF	; 239
     812:	8a b9       	out	0x0a, r24	; 10
	
	// Activamos las resistencias de pull-up internas
	// esto quiere decir que los sensores actuan por nivel bajo
	PORTD |= (1 << PD3); // PD3
     814:	8b b1       	in	r24, 0x0b	; 11
     816:	88 60       	ori	r24, 0x08	; 8
     818:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << PD4); // PD4
     81a:	8b b1       	in	r24, 0x0b	; 11
     81c:	80 61       	ori	r24, 0x10	; 16
     81e:	8b b9       	out	0x0b, r24	; 11
     820:	08 95       	ret

00000822 <LeerSensorPuerta>:

}

int LeerSensorPuerta(void){   //NOTA: SE DA POR ENTENDIDO QUE SESNSOR PUERTA ESTÁ EN EL PIN PD3
						   //      Y SENSOR TAZA EN PD4
  SensorPuerta = !((PIND & (1 << PD4)) ? 1 : 0); // Obtiene el nivel  lógico del sensor de la puerta
     822:	89 b1       	in	r24, 0x09	; 9
     824:	82 95       	swap	r24
     826:	8f 70       	andi	r24, 0x0F	; 15
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	89 27       	eor	r24, r25
     82c:	81 70       	andi	r24, 0x01	; 1
     82e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <SensorPuerta>
  return SensorPuerta;
}
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	08 95       	ret

00000836 <LeerSensorTaza>:

int LeerSensorTaza(void){   //NOTA: SE DA POR ENTENDIDO QUE SESNSOR PUERTA ESTÁ EN EL PIN PD3
	//      Y SENSOR TAZA EN PD4
	SensorTaza = !((PIND & (1 << PD3)) ? 1 : 0); // Obtiene el nivel lógico de SensorTaza
     836:	89 b1       	in	r24, 0x09	; 9
     838:	86 95       	lsr	r24
     83a:	86 95       	lsr	r24
     83c:	86 95       	lsr	r24
     83e:	91 e0       	ldi	r25, 0x01	; 1
     840:	89 27       	eor	r24, r25
     842:	81 70       	andi	r24, 0x01	; 1
     844:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <SensorTaza>
	return SensorTaza;
}
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	08 95       	ret

0000084c <ConfigurarBotones>:
void ConfigurarBotones(void){
	DDRD &= ~(1 << PPD5); // PD5 como entrada
     84c:	8a b1       	in	r24, 0x0a	; 10
     84e:	8f 7d       	andi	r24, 0xDF	; 223
     850:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << PPD6); // PD6 como entrada
     852:	8a b1       	in	r24, 0x0a	; 10
     854:	8f 7b       	andi	r24, 0xBF	; 191
     856:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PPD5); // Resistencia de pull up
     858:	8b b1       	in	r24, 0x0b	; 11
     85a:	80 62       	ori	r24, 0x20	; 32
     85c:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << PPD6); // Resistencia de pull up
     85e:	8b b1       	in	r24, 0x0b	; 11
     860:	80 64       	ori	r24, 0x40	; 64
     862:	8b b9       	out	0x0b, r24	; 11
     864:	08 95       	ret

00000866 <LeerBotonSeleccionar>:
}
int LeerBotonSeleccionar(void){   //NOTA: SE DA POR ENTENDIDO QUE SESNSOR PUERTA ESTÁ EN EL PIN PD3
	//      Y SENSOR TAZA EN PD4
	BotonSeleccionar = !((PIND & (1 << PPD5)) ? 1 : 0); // Obtiene el nivel  lógico del sensor de la puerta
     866:	89 b1       	in	r24, 0x09	; 9
     868:	82 95       	swap	r24
     86a:	86 95       	lsr	r24
     86c:	87 70       	andi	r24, 0x07	; 7
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	89 27       	eor	r24, r25
     872:	81 70       	andi	r24, 0x01	; 1
     874:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <BotonSeleccionar>
	return BotonSeleccionar;
}
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	08 95       	ret

0000087c <LeerBotonAceptar>:

int LeerBotonAceptar(void){   //NOTA: SE DA POR ENTENDIDO QUE SESNSOR PUERTA ESTÁ EN EL PIN PD3
	//      Y SENSOR TAZA EN PD4
	BotonAceptar = !((PIND & (1 << PPD6)) ? 1 : 0); // Obtiene el nivel lógico de SensorTaza
     87c:	89 b1       	in	r24, 0x09	; 9
     87e:	82 95       	swap	r24
     880:	86 95       	lsr	r24
     882:	86 95       	lsr	r24
     884:	83 70       	andi	r24, 0x03	; 3
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	89 27       	eor	r24, r25
     88a:	81 70       	andi	r24, 0x01	; 1
     88c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>
	return BotonAceptar;
}	
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	08 95       	ret

00000894 <uart_init>:

#include "UART.h"
void uart_init() {
	// Configurar la velocidad de transmisión a 9600
	UBRR0H = 0;
     894:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 103;
     898:	87 e6       	ldi	r24, 0x67	; 103
     89a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilitar el transmisor y el receptor
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);
     89e:	88 e1       	ldi	r24, 0x18	; 24
     8a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// Configurar el formato del trama: 8 bits de datos, 1 bit de parada
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     8a4:	86 e0       	ldi	r24, 0x06	; 6
     8a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     8aa:	08 95       	ret

000008ac <uart_send_char>:
}

// Enviar un solo carácter por la UART
void uart_send_char(char c) {
	while (!(UCSR0A & (1 << UDRE0))); // Esperar hasta que el buffer esté vacío
     8ac:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     8b0:	95 ff       	sbrs	r25, 5
     8b2:	fc cf       	rjmp	.-8      	; 0x8ac <uart_send_char>
	UDR0 = c;
     8b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     8b8:	08 95       	ret

000008ba <uart_send_string>:
}

// Enviar una cadena (texto) terminada en nulo por la UART
void uart_send_string(const char* str) {
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	ec 01       	movw	r28, r24
	while (*str) {
     8c0:	03 c0       	rjmp	.+6      	; 0x8c8 <uart_send_string+0xe>
		uart_send_char(*str);
     8c2:	0e 94 56 04 	call	0x8ac	; 0x8ac <uart_send_char>
		str++;
     8c6:	21 96       	adiw	r28, 0x01	; 1
	UDR0 = c;
}

// Enviar una cadena (texto) terminada en nulo por la UART
void uart_send_string(const char* str) {
	while (*str) {
     8c8:	88 81       	ld	r24, Y
     8ca:	81 11       	cpse	r24, r1
     8cc:	fa cf       	rjmp	.-12     	; 0x8c2 <uart_send_string+0x8>
		uart_send_char(*str);
		str++;
	}
}
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <uart_send_newline>:

// Enviar un carácter de salto de línea por la UART
void uart_send_newline() {
	uart_send_char(13);
     8d4:	8d e0       	ldi	r24, 0x0D	; 13
     8d6:	0e 94 56 04 	call	0x8ac	; 0x8ac <uart_send_char>
	uart_send_char(10);
     8da:	8a e0       	ldi	r24, 0x0A	; 10
     8dc:	0e 94 56 04 	call	0x8ac	; 0x8ac <uart_send_char>
     8e0:	08 95       	ret

000008e2 <LeerBotones>:
        uint8_t SelectorMenuLCD=1; // Menús de selección de bebidas
		uint8_t BotonSeleccionarr = 0; // Estado del sensor de la taza (0 o 1)
		uint8_t BotonAceptarr = 0; // Estado del sensor de la puerta (0 o 1)
		
void LeerBotones(void){
		BotonSeleccionarr=LeerBotonSeleccionar();
     8e2:	0e 94 33 04 	call	0x866	; 0x866 <LeerBotonSeleccionar>
     8e6:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <BotonSeleccionarr>
		BotonAceptarr=LeerBotonAceptar();
     8ea:	0e 94 3e 04 	call	0x87c	; 0x87c <LeerBotonAceptar>
     8ee:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <BotonAceptarr>
		if (BotonSeleccionarr==1){
     8f2:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <BotonSeleccionarr>
     8f6:	81 30       	cpi	r24, 0x01	; 1
     8f8:	09 f0       	breq	.+2      	; 0x8fc <LeerBotones+0x1a>
     8fa:	4f c0       	rjmp	.+158    	; 0x99a <__stack+0x9b>
			    SelectorMenuLCD=SelectorMenuLCD+1;
     8fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     900:	8f 5f       	subi	r24, 0xFF	; 255
     902:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				while(BotonSeleccionarr==1){  // ESTO ES PARA EVITAR REBOTES
     906:	10 c0       	rjmp	.+32     	; 0x928 <__stack+0x29>
		         BotonSeleccionarr=LeerBotonSeleccionar();  // HASTA QUE EL USUARIO NO SUELTA EL BOTON  NO HACE NADA
     908:	0e 94 33 04 	call	0x866	; 0x866 <LeerBotonSeleccionar>
     90c:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <BotonSeleccionarr>
				 if(BotonAceptarr==1){ // ESTO SE EJECUTA SI AMBOS BOTONES SON PRESIONADO A LA VEZ
     910:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <BotonAceptarr>
     914:	81 30       	cpi	r24, 0x01	; 1
     916:	41 f4       	brne	.+16     	; 0x928 <__stack+0x29>
		          lcd_init();
     918:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_init>
				  escribirEnLCD(" aca van estd");
     91c:	8c e1       	ldi	r24, 0x1C	; 28
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
				  i2c_stop();
     924:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_stop>
void LeerBotones(void){
		BotonSeleccionarr=LeerBotonSeleccionar();
		BotonAceptarr=LeerBotonAceptar();
		if (BotonSeleccionarr==1){
			    SelectorMenuLCD=SelectorMenuLCD+1;
				while(BotonSeleccionarr==1){  // ESTO ES PARA EVITAR REBOTES
     928:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <BotonSeleccionarr>
     92c:	81 30       	cpi	r24, 0x01	; 1
     92e:	61 f3       	breq	.-40     	; 0x908 <__stack+0x9>
		          lcd_init();
				  escribirEnLCD(" aca van estd");
				  i2c_stop();
				 }
				}
				if (SelectorMenuLCD==5){
     930:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     934:	85 30       	cpi	r24, 0x05	; 5
     936:	39 f4       	brne	.+14     	; 0x946 <__stack+0x47>
	            SelectorMenuLCD=1;
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				escribirEnLCD(" Bebida 1");
     93e:	8a e2       	ldi	r24, 0x2A	; 42
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
				}
			lcd_init(); //Inicializamos el Lcd 
     946:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_init>
			if (SelectorMenuLCD==1){
     94a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     94e:	81 30       	cpi	r24, 0x01	; 1
     950:	31 f4       	brne	.+12     	; 0x95e <__stack+0x5f>
				 escribirEnLCD(" Bebida 1");	
     952:	8a e2       	ldi	r24, 0x2A	; 42
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
				 i2c_stop();}
     95a:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_stop>
			if (SelectorMenuLCD==2){
     95e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     962:	82 30       	cpi	r24, 0x02	; 2
     964:	31 f4       	brne	.+12     	; 0x972 <__stack+0x73>
				escribirEnLCD(" Bebida2");
     966:	84 e3       	ldi	r24, 0x34	; 52
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
				i2c_stop();}
     96e:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_stop>
			if (SelectorMenuLCD==3){
     972:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     976:	83 30       	cpi	r24, 0x03	; 3
     978:	31 f4       	brne	.+12     	; 0x986 <__stack+0x87>
				escribirEnLCD(" Bebida3");
     97a:	8d e3       	ldi	r24, 0x3D	; 61
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
			i2c_stop();}
     982:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_stop>
			if (SelectorMenuLCD==4){
     986:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     98a:	84 30       	cpi	r24, 0x04	; 4
     98c:	31 f4       	brne	.+12     	; 0x99a <__stack+0x9b>
				escribirEnLCD(" Bebida4");
     98e:	86 e4       	ldi	r24, 0x46	; 70
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	0e 94 a3 01 	call	0x346	; 0x346 <escribirEnLCD>
			i2c_stop();}
     996:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_stop>
     99a:	08 95       	ret

0000099c <LeerSensores>:
	  
   }
	

void LeerSensores(void){
	 SensorrTaza=LeerSensorTaza();
     99c:	0e 94 1b 04 	call	0x836	; 0x836 <LeerSensorTaza>
     9a0:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <SensorrTaza>
	 SensorrPuerta=LeerSensorPuerta();
     9a4:	0e 94 11 04 	call	0x822	; 0x822 <LeerSensorPuerta>
     9a8:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <SensorrPuerta>
     9ac:	08 95       	ret

000009ae <MedicionPolvos>:
	 }
	 
void MedicionPolvos(void){
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
	leer_ADC(0); // Lee el valor del pin PC0
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	0e 94 64 00 	call	0xc8	; 0xc8 <leer_ADC>
	NivelPolvo1 = ((float)ADC/1023)*100; // Guarda el valor del ADC en porcentaje (por eso dividimos por la resolución y por 100)
     9ba:	c8 e7       	ldi	r28, 0x78	; 120
     9bc:	d0 e0       	ldi	r29, 0x00	; 0
     9be:	68 81       	ld	r22, Y
     9c0:	79 81       	ldd	r23, Y+1	; 0x01
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__floatunsisf>
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 ec       	ldi	r19, 0xC0	; 192
     9ce:	4f e7       	ldi	r20, 0x7F	; 127
     9d0:	54 e4       	ldi	r21, 0x44	; 68
     9d2:	0e 94 05 06 	call	0xc0a	; 0xc0a <__divsf3>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	48 ec       	ldi	r20, 0xC8	; 200
     9dc:	52 e4       	ldi	r21, 0x42	; 66
     9de:	0e 94 3b 07 	call	0xe76	; 0xe76 <__mulsf3>
     9e2:	0e 94 77 06 	call	0xcee	; 0xcee <__fixsfsi>
     9e6:	70 93 76 01 	sts	0x0176, r23	; 0x800176 <NivelPolvo1+0x1>
     9ea:	60 93 75 01 	sts	0x0175, r22	; 0x800175 <NivelPolvo1>
    leer_ADC(1); // Lee el valor del pin PC0
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 64 00 	call	0xc8	; 0xc8 <leer_ADC>
    NivelPolvo2 = ((float)ADC/1023)*100; // Guarda el valor del ADC en porcentaje (por eso dividimos por la resolución y por 100)
     9f6:	68 81       	ld	r22, Y
     9f8:	79 81       	ldd	r23, Y+1	; 0x01
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__floatunsisf>
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	30 ec       	ldi	r19, 0xC0	; 192
     a06:	4f e7       	ldi	r20, 0x7F	; 127
     a08:	54 e4       	ldi	r21, 0x44	; 68
     a0a:	0e 94 05 06 	call	0xc0a	; 0xc0a <__divsf3>
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	48 ec       	ldi	r20, 0xC8	; 200
     a14:	52 e4       	ldi	r21, 0x42	; 66
     a16:	0e 94 3b 07 	call	0xe76	; 0xe76 <__mulsf3>
     a1a:	0e 94 77 06 	call	0xcee	; 0xcee <__fixsfsi>
     a1e:	70 93 7e 01 	sts	0x017E, r23	; 0x80017e <NivelPolvo2+0x1>
     a22:	60 93 7d 01 	sts	0x017D, r22	; 0x80017d <NivelPolvo2>
	 leer_ADC(2); // Lee el valor del pin PC0
     a26:	82 e0       	ldi	r24, 0x02	; 2
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	0e 94 64 00 	call	0xc8	; 0xc8 <leer_ADC>
	 NivelPolvo3 = ((float)ADC/1023)*100; // Guarda el valor del ADC en porcentaje (por eso dividimos por la resolución y por 100)
     a2e:	68 81       	ld	r22, Y
     a30:	79 81       	ldd	r23, Y+1	; 0x01
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__floatunsisf>
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	30 ec       	ldi	r19, 0xC0	; 192
     a3e:	4f e7       	ldi	r20, 0x7F	; 127
     a40:	54 e4       	ldi	r21, 0x44	; 68
     a42:	0e 94 05 06 	call	0xc0a	; 0xc0a <__divsf3>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	48 ec       	ldi	r20, 0xC8	; 200
     a4c:	52 e4       	ldi	r21, 0x42	; 66
     a4e:	0e 94 3b 07 	call	0xe76	; 0xe76 <__mulsf3>
     a52:	0e 94 77 06 	call	0xcee	; 0xcee <__fixsfsi>
     a56:	70 93 7c 01 	sts	0x017C, r23	; 0x80017c <NivelPolvo3+0x1>
     a5a:	60 93 7b 01 	sts	0x017B, r22	; 0x80017b <NivelPolvo3>
	leer_ADC(3); // Lee el valor del pin PC0
     a5e:	83 e0       	ldi	r24, 0x03	; 3
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 64 00 	call	0xc8	; 0xc8 <leer_ADC>
	 NivelPolvo4 = ((float)ADC/1023)*100; // Guarda el valor del ADC en porcentaje (por eso dividimos por la resolución y por 100)
     a66:	68 81       	ld	r22, Y
     a68:	79 81       	ldd	r23, Y+1	; 0x01
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__floatunsisf>
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	30 ec       	ldi	r19, 0xC0	; 192
     a76:	4f e7       	ldi	r20, 0x7F	; 127
     a78:	54 e4       	ldi	r21, 0x44	; 68
     a7a:	0e 94 05 06 	call	0xc0a	; 0xc0a <__divsf3>
     a7e:	20 e0       	ldi	r18, 0x00	; 0
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	48 ec       	ldi	r20, 0xC8	; 200
     a84:	52 e4       	ldi	r21, 0x42	; 66
     a86:	0e 94 3b 07 	call	0xe76	; 0xe76 <__mulsf3>
     a8a:	0e 94 77 06 	call	0xcee	; 0xcee <__fixsfsi>
     a8e:	70 93 7a 01 	sts	0x017A, r23	; 0x80017a <NivelPolvo4+0x1>
     a92:	60 93 79 01 	sts	0x0179, r22	; 0x800179 <NivelPolvo4>
	};
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	08 95       	ret

00000a9c <MedirBidon>:
	
void MedirBidon(void){
	TWI_ini(); //INCIALIZA EL i2c del mcp3421 (TIENE UNA CONFIGURACIÓN ESPECIAL, NO HAY QUE TOCAR)
     a9c:	0e 94 b0 01 	call	0x360	; 0x360 <TWI_ini>
	MCP3421_config(); //configura el sensor MCP3421
     aa0:	0e 94 07 02 	call	0x40e	; 0x40e <MCP3421_config>
	MCP3421_read(); //Leemos el dato
     aa4:	0e 94 12 02 	call	0x424	; 0x424 <MCP3421_read>
	PesoBidon = (((int)a1 << 10) | ((int)a2 << 2) | ((int)a3 >> 6))-2;
     aa8:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <a1>
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	38 2f       	mov	r19, r24
     ab2:	33 0f       	add	r19, r19
     ab4:	33 0f       	add	r19, r19
     ab6:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <a2>
     aba:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <a2+0x1>
     abe:	88 0f       	add	r24, r24
     ac0:	99 1f       	adc	r25, r25
     ac2:	88 0f       	add	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	82 2b       	or	r24, r18
     ac8:	93 2b       	or	r25, r19
     aca:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <a3>
     ace:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <a3+0x1>
     ad2:	02 2e       	mov	r0, r18
     ad4:	23 2f       	mov	r18, r19
     ad6:	00 0c       	add	r0, r0
     ad8:	22 1f       	adc	r18, r18
     ada:	33 0b       	sbc	r19, r19
     adc:	00 0c       	add	r0, r0
     ade:	22 1f       	adc	r18, r18
     ae0:	33 1f       	adc	r19, r19
     ae2:	82 2b       	or	r24, r18
     ae4:	93 2b       	or	r25, r19
     ae6:	02 97       	sbiw	r24, 0x02	; 2
     ae8:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <PesoBidon+0x1>
     aec:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <PesoBidon>
	TWI_Stop(); //cerramos 
     af0:	0e 94 03 02 	call	0x406	; 0x406 <TWI_Stop>
	TemperaturaBidon=LeerTemperatura();
     af4:	0e 94 77 03 	call	0x6ee	; 0x6ee <LeerTemperatura>
     af8:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <TemperaturaBidon+0x1>
     afc:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <TemperaturaBidon>
     b00:	08 95       	ret

00000b02 <MedirVariables>:
	}
	
void MedirVariables(void){
		MedicionPolvos();
     b02:	0e 94 d7 04 	call	0x9ae	; 0x9ae <MedicionPolvos>
		MedirBidon();
     b06:	0e 94 4e 05 	call	0xa9c	; 0xa9c <MedirBidon>
        LeerSensores();
     b0a:	0e 94 ce 04 	call	0x99c	; 0x99c <LeerSensores>
		LeerBotones();
     b0e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <LeerBotones>
     b12:	08 95       	ret

00000b14 <ConfiguracionIncial>:
	}
   void ConfiguracionIncial(void){
	   iniciar_ADC();					// Inicializamos el ADC
     b14:	0e 94 53 00 	call	0xa6	; 0xa6 <iniciar_ADC>
       uart_init();						//Inicializamos la uart
     b18:	0e 94 4a 04 	call	0x894	; 0x894 <uart_init>
	   ConfigurarPinesSensores();		//Configuramos los pines de los sensores 
     b1c:	0e 94 04 04 	call	0x808	; 0x808 <ConfigurarPinesSensores>
	   ConfigurarBotones();				//Configuramos los botones.
     b20:	0e 94 26 04 	call	0x84c	; 0x84c <ConfigurarBotones>
     b24:	08 95       	ret

00000b26 <main>:
   }
   
   
   int main(void){
	   ConfiguracionIncial();//Configuramos todo
     b26:	0e 94 8a 05 	call	0xb14	; 0xb14 <ConfiguracionIncial>
	while(1){	 
	MedirVariables();// Sensamos todas nuestras variables
     b2a:	0e 94 81 05 	call	0xb02	; 0xb02 <MedirVariables>
     b2e:	fd cf       	rjmp	.-6      	; 0xb2a <main+0x4>

00000b30 <__subsf3>:
     b30:	50 58       	subi	r21, 0x80	; 128

00000b32 <__addsf3>:
     b32:	bb 27       	eor	r27, r27
     b34:	aa 27       	eor	r26, r26
     b36:	0e 94 b0 05 	call	0xb60	; 0xb60 <__addsf3x>
     b3a:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__fp_round>
     b3e:	0e 94 f3 06 	call	0xde6	; 0xde6 <__fp_pscA>
     b42:	38 f0       	brcs	.+14     	; 0xb52 <__addsf3+0x20>
     b44:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__fp_pscB>
     b48:	20 f0       	brcs	.+8      	; 0xb52 <__addsf3+0x20>
     b4a:	39 f4       	brne	.+14     	; 0xb5a <__addsf3+0x28>
     b4c:	9f 3f       	cpi	r25, 0xFF	; 255
     b4e:	19 f4       	brne	.+6      	; 0xb56 <__addsf3+0x24>
     b50:	26 f4       	brtc	.+8      	; 0xb5a <__addsf3+0x28>
     b52:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__fp_nan>
     b56:	0e f4       	brtc	.+2      	; 0xb5a <__addsf3+0x28>
     b58:	e0 95       	com	r30
     b5a:	e7 fb       	bst	r30, 7
     b5c:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__fp_inf>

00000b60 <__addsf3x>:
     b60:	e9 2f       	mov	r30, r25
     b62:	0e 94 12 07 	call	0xe24	; 0xe24 <__fp_split3>
     b66:	58 f3       	brcs	.-42     	; 0xb3e <__addsf3+0xc>
     b68:	ba 17       	cp	r27, r26
     b6a:	62 07       	cpc	r22, r18
     b6c:	73 07       	cpc	r23, r19
     b6e:	84 07       	cpc	r24, r20
     b70:	95 07       	cpc	r25, r21
     b72:	20 f0       	brcs	.+8      	; 0xb7c <__addsf3x+0x1c>
     b74:	79 f4       	brne	.+30     	; 0xb94 <__addsf3x+0x34>
     b76:	a6 f5       	brtc	.+104    	; 0xbe0 <__addsf3x+0x80>
     b78:	0c 94 34 07 	jmp	0xe68	; 0xe68 <__fp_zero>
     b7c:	0e f4       	brtc	.+2      	; 0xb80 <__addsf3x+0x20>
     b7e:	e0 95       	com	r30
     b80:	0b 2e       	mov	r0, r27
     b82:	ba 2f       	mov	r27, r26
     b84:	a0 2d       	mov	r26, r0
     b86:	0b 01       	movw	r0, r22
     b88:	b9 01       	movw	r22, r18
     b8a:	90 01       	movw	r18, r0
     b8c:	0c 01       	movw	r0, r24
     b8e:	ca 01       	movw	r24, r20
     b90:	a0 01       	movw	r20, r0
     b92:	11 24       	eor	r1, r1
     b94:	ff 27       	eor	r31, r31
     b96:	59 1b       	sub	r21, r25
     b98:	99 f0       	breq	.+38     	; 0xbc0 <__addsf3x+0x60>
     b9a:	59 3f       	cpi	r21, 0xF9	; 249
     b9c:	50 f4       	brcc	.+20     	; 0xbb2 <__addsf3x+0x52>
     b9e:	50 3e       	cpi	r21, 0xE0	; 224
     ba0:	68 f1       	brcs	.+90     	; 0xbfc <__addsf3x+0x9c>
     ba2:	1a 16       	cp	r1, r26
     ba4:	f0 40       	sbci	r31, 0x00	; 0
     ba6:	a2 2f       	mov	r26, r18
     ba8:	23 2f       	mov	r18, r19
     baa:	34 2f       	mov	r19, r20
     bac:	44 27       	eor	r20, r20
     bae:	58 5f       	subi	r21, 0xF8	; 248
     bb0:	f3 cf       	rjmp	.-26     	; 0xb98 <__addsf3x+0x38>
     bb2:	46 95       	lsr	r20
     bb4:	37 95       	ror	r19
     bb6:	27 95       	ror	r18
     bb8:	a7 95       	ror	r26
     bba:	f0 40       	sbci	r31, 0x00	; 0
     bbc:	53 95       	inc	r21
     bbe:	c9 f7       	brne	.-14     	; 0xbb2 <__addsf3x+0x52>
     bc0:	7e f4       	brtc	.+30     	; 0xbe0 <__addsf3x+0x80>
     bc2:	1f 16       	cp	r1, r31
     bc4:	ba 0b       	sbc	r27, r26
     bc6:	62 0b       	sbc	r22, r18
     bc8:	73 0b       	sbc	r23, r19
     bca:	84 0b       	sbc	r24, r20
     bcc:	ba f0       	brmi	.+46     	; 0xbfc <__addsf3x+0x9c>
     bce:	91 50       	subi	r25, 0x01	; 1
     bd0:	a1 f0       	breq	.+40     	; 0xbfa <__addsf3x+0x9a>
     bd2:	ff 0f       	add	r31, r31
     bd4:	bb 1f       	adc	r27, r27
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	88 1f       	adc	r24, r24
     bdc:	c2 f7       	brpl	.-16     	; 0xbce <__addsf3x+0x6e>
     bde:	0e c0       	rjmp	.+28     	; 0xbfc <__addsf3x+0x9c>
     be0:	ba 0f       	add	r27, r26
     be2:	62 1f       	adc	r22, r18
     be4:	73 1f       	adc	r23, r19
     be6:	84 1f       	adc	r24, r20
     be8:	48 f4       	brcc	.+18     	; 0xbfc <__addsf3x+0x9c>
     bea:	87 95       	ror	r24
     bec:	77 95       	ror	r23
     bee:	67 95       	ror	r22
     bf0:	b7 95       	ror	r27
     bf2:	f7 95       	ror	r31
     bf4:	9e 3f       	cpi	r25, 0xFE	; 254
     bf6:	08 f0       	brcs	.+2      	; 0xbfa <__addsf3x+0x9a>
     bf8:	b0 cf       	rjmp	.-160    	; 0xb5a <__addsf3+0x28>
     bfa:	93 95       	inc	r25
     bfc:	88 0f       	add	r24, r24
     bfe:	08 f0       	brcs	.+2      	; 0xc02 <__addsf3x+0xa2>
     c00:	99 27       	eor	r25, r25
     c02:	ee 0f       	add	r30, r30
     c04:	97 95       	ror	r25
     c06:	87 95       	ror	r24
     c08:	08 95       	ret

00000c0a <__divsf3>:
     c0a:	0e 94 19 06 	call	0xc32	; 0xc32 <__divsf3x>
     c0e:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__fp_round>
     c12:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__fp_pscB>
     c16:	58 f0       	brcs	.+22     	; 0xc2e <__divsf3+0x24>
     c18:	0e 94 f3 06 	call	0xde6	; 0xde6 <__fp_pscA>
     c1c:	40 f0       	brcs	.+16     	; 0xc2e <__divsf3+0x24>
     c1e:	29 f4       	brne	.+10     	; 0xc2a <__divsf3+0x20>
     c20:	5f 3f       	cpi	r21, 0xFF	; 255
     c22:	29 f0       	breq	.+10     	; 0xc2e <__divsf3+0x24>
     c24:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__fp_inf>
     c28:	51 11       	cpse	r21, r1
     c2a:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_szero>
     c2e:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__fp_nan>

00000c32 <__divsf3x>:
     c32:	0e 94 12 07 	call	0xe24	; 0xe24 <__fp_split3>
     c36:	68 f3       	brcs	.-38     	; 0xc12 <__divsf3+0x8>

00000c38 <__divsf3_pse>:
     c38:	99 23       	and	r25, r25
     c3a:	b1 f3       	breq	.-20     	; 0xc28 <__divsf3+0x1e>
     c3c:	55 23       	and	r21, r21
     c3e:	91 f3       	breq	.-28     	; 0xc24 <__divsf3+0x1a>
     c40:	95 1b       	sub	r25, r21
     c42:	55 0b       	sbc	r21, r21
     c44:	bb 27       	eor	r27, r27
     c46:	aa 27       	eor	r26, r26
     c48:	62 17       	cp	r22, r18
     c4a:	73 07       	cpc	r23, r19
     c4c:	84 07       	cpc	r24, r20
     c4e:	38 f0       	brcs	.+14     	; 0xc5e <__divsf3_pse+0x26>
     c50:	9f 5f       	subi	r25, 0xFF	; 255
     c52:	5f 4f       	sbci	r21, 0xFF	; 255
     c54:	22 0f       	add	r18, r18
     c56:	33 1f       	adc	r19, r19
     c58:	44 1f       	adc	r20, r20
     c5a:	aa 1f       	adc	r26, r26
     c5c:	a9 f3       	breq	.-22     	; 0xc48 <__divsf3_pse+0x10>
     c5e:	35 d0       	rcall	.+106    	; 0xcca <__divsf3_pse+0x92>
     c60:	0e 2e       	mov	r0, r30
     c62:	3a f0       	brmi	.+14     	; 0xc72 <__divsf3_pse+0x3a>
     c64:	e0 e8       	ldi	r30, 0x80	; 128
     c66:	32 d0       	rcall	.+100    	; 0xccc <__divsf3_pse+0x94>
     c68:	91 50       	subi	r25, 0x01	; 1
     c6a:	50 40       	sbci	r21, 0x00	; 0
     c6c:	e6 95       	lsr	r30
     c6e:	00 1c       	adc	r0, r0
     c70:	ca f7       	brpl	.-14     	; 0xc64 <__divsf3_pse+0x2c>
     c72:	2b d0       	rcall	.+86     	; 0xcca <__divsf3_pse+0x92>
     c74:	fe 2f       	mov	r31, r30
     c76:	29 d0       	rcall	.+82     	; 0xcca <__divsf3_pse+0x92>
     c78:	66 0f       	add	r22, r22
     c7a:	77 1f       	adc	r23, r23
     c7c:	88 1f       	adc	r24, r24
     c7e:	bb 1f       	adc	r27, r27
     c80:	26 17       	cp	r18, r22
     c82:	37 07       	cpc	r19, r23
     c84:	48 07       	cpc	r20, r24
     c86:	ab 07       	cpc	r26, r27
     c88:	b0 e8       	ldi	r27, 0x80	; 128
     c8a:	09 f0       	breq	.+2      	; 0xc8e <__divsf3_pse+0x56>
     c8c:	bb 0b       	sbc	r27, r27
     c8e:	80 2d       	mov	r24, r0
     c90:	bf 01       	movw	r22, r30
     c92:	ff 27       	eor	r31, r31
     c94:	93 58       	subi	r25, 0x83	; 131
     c96:	5f 4f       	sbci	r21, 0xFF	; 255
     c98:	3a f0       	brmi	.+14     	; 0xca8 <__divsf3_pse+0x70>
     c9a:	9e 3f       	cpi	r25, 0xFE	; 254
     c9c:	51 05       	cpc	r21, r1
     c9e:	78 f0       	brcs	.+30     	; 0xcbe <__divsf3_pse+0x86>
     ca0:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__fp_inf>
     ca4:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_szero>
     ca8:	5f 3f       	cpi	r21, 0xFF	; 255
     caa:	e4 f3       	brlt	.-8      	; 0xca4 <__divsf3_pse+0x6c>
     cac:	98 3e       	cpi	r25, 0xE8	; 232
     cae:	d4 f3       	brlt	.-12     	; 0xca4 <__divsf3_pse+0x6c>
     cb0:	86 95       	lsr	r24
     cb2:	77 95       	ror	r23
     cb4:	67 95       	ror	r22
     cb6:	b7 95       	ror	r27
     cb8:	f7 95       	ror	r31
     cba:	9f 5f       	subi	r25, 0xFF	; 255
     cbc:	c9 f7       	brne	.-14     	; 0xcb0 <__divsf3_pse+0x78>
     cbe:	88 0f       	add	r24, r24
     cc0:	91 1d       	adc	r25, r1
     cc2:	96 95       	lsr	r25
     cc4:	87 95       	ror	r24
     cc6:	97 f9       	bld	r25, 7
     cc8:	08 95       	ret
     cca:	e1 e0       	ldi	r30, 0x01	; 1
     ccc:	66 0f       	add	r22, r22
     cce:	77 1f       	adc	r23, r23
     cd0:	88 1f       	adc	r24, r24
     cd2:	bb 1f       	adc	r27, r27
     cd4:	62 17       	cp	r22, r18
     cd6:	73 07       	cpc	r23, r19
     cd8:	84 07       	cpc	r24, r20
     cda:	ba 07       	cpc	r27, r26
     cdc:	20 f0       	brcs	.+8      	; 0xce6 <__divsf3_pse+0xae>
     cde:	62 1b       	sub	r22, r18
     ce0:	73 0b       	sbc	r23, r19
     ce2:	84 0b       	sbc	r24, r20
     ce4:	ba 0b       	sbc	r27, r26
     ce6:	ee 1f       	adc	r30, r30
     ce8:	88 f7       	brcc	.-30     	; 0xccc <__divsf3_pse+0x94>
     cea:	e0 95       	com	r30
     cec:	08 95       	ret

00000cee <__fixsfsi>:
     cee:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__fixunssfsi>
     cf2:	68 94       	set
     cf4:	b1 11       	cpse	r27, r1
     cf6:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_szero>
     cfa:	08 95       	ret

00000cfc <__fixunssfsi>:
     cfc:	0e 94 1a 07 	call	0xe34	; 0xe34 <__fp_splitA>
     d00:	88 f0       	brcs	.+34     	; 0xd24 <__fixunssfsi+0x28>
     d02:	9f 57       	subi	r25, 0x7F	; 127
     d04:	98 f0       	brcs	.+38     	; 0xd2c <__fixunssfsi+0x30>
     d06:	b9 2f       	mov	r27, r25
     d08:	99 27       	eor	r25, r25
     d0a:	b7 51       	subi	r27, 0x17	; 23
     d0c:	b0 f0       	brcs	.+44     	; 0xd3a <__fixunssfsi+0x3e>
     d0e:	e1 f0       	breq	.+56     	; 0xd48 <__fixunssfsi+0x4c>
     d10:	66 0f       	add	r22, r22
     d12:	77 1f       	adc	r23, r23
     d14:	88 1f       	adc	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	1a f0       	brmi	.+6      	; 0xd20 <__fixunssfsi+0x24>
     d1a:	ba 95       	dec	r27
     d1c:	c9 f7       	brne	.-14     	; 0xd10 <__fixunssfsi+0x14>
     d1e:	14 c0       	rjmp	.+40     	; 0xd48 <__fixunssfsi+0x4c>
     d20:	b1 30       	cpi	r27, 0x01	; 1
     d22:	91 f0       	breq	.+36     	; 0xd48 <__fixunssfsi+0x4c>
     d24:	0e 94 34 07 	call	0xe68	; 0xe68 <__fp_zero>
     d28:	b1 e0       	ldi	r27, 0x01	; 1
     d2a:	08 95       	ret
     d2c:	0c 94 34 07 	jmp	0xe68	; 0xe68 <__fp_zero>
     d30:	67 2f       	mov	r22, r23
     d32:	78 2f       	mov	r23, r24
     d34:	88 27       	eor	r24, r24
     d36:	b8 5f       	subi	r27, 0xF8	; 248
     d38:	39 f0       	breq	.+14     	; 0xd48 <__fixunssfsi+0x4c>
     d3a:	b9 3f       	cpi	r27, 0xF9	; 249
     d3c:	cc f3       	brlt	.-14     	; 0xd30 <__fixunssfsi+0x34>
     d3e:	86 95       	lsr	r24
     d40:	77 95       	ror	r23
     d42:	67 95       	ror	r22
     d44:	b3 95       	inc	r27
     d46:	d9 f7       	brne	.-10     	; 0xd3e <__fixunssfsi+0x42>
     d48:	3e f4       	brtc	.+14     	; 0xd58 <__fixunssfsi+0x5c>
     d4a:	90 95       	com	r25
     d4c:	80 95       	com	r24
     d4e:	70 95       	com	r23
     d50:	61 95       	neg	r22
     d52:	7f 4f       	sbci	r23, 0xFF	; 255
     d54:	8f 4f       	sbci	r24, 0xFF	; 255
     d56:	9f 4f       	sbci	r25, 0xFF	; 255
     d58:	08 95       	ret

00000d5a <__floatunsisf>:
     d5a:	e8 94       	clt
     d5c:	09 c0       	rjmp	.+18     	; 0xd70 <__floatsisf+0x12>

00000d5e <__floatsisf>:
     d5e:	97 fb       	bst	r25, 7
     d60:	3e f4       	brtc	.+14     	; 0xd70 <__floatsisf+0x12>
     d62:	90 95       	com	r25
     d64:	80 95       	com	r24
     d66:	70 95       	com	r23
     d68:	61 95       	neg	r22
     d6a:	7f 4f       	sbci	r23, 0xFF	; 255
     d6c:	8f 4f       	sbci	r24, 0xFF	; 255
     d6e:	9f 4f       	sbci	r25, 0xFF	; 255
     d70:	99 23       	and	r25, r25
     d72:	a9 f0       	breq	.+42     	; 0xd9e <__floatsisf+0x40>
     d74:	f9 2f       	mov	r31, r25
     d76:	96 e9       	ldi	r25, 0x96	; 150
     d78:	bb 27       	eor	r27, r27
     d7a:	93 95       	inc	r25
     d7c:	f6 95       	lsr	r31
     d7e:	87 95       	ror	r24
     d80:	77 95       	ror	r23
     d82:	67 95       	ror	r22
     d84:	b7 95       	ror	r27
     d86:	f1 11       	cpse	r31, r1
     d88:	f8 cf       	rjmp	.-16     	; 0xd7a <__floatsisf+0x1c>
     d8a:	fa f4       	brpl	.+62     	; 0xdca <__floatsisf+0x6c>
     d8c:	bb 0f       	add	r27, r27
     d8e:	11 f4       	brne	.+4      	; 0xd94 <__floatsisf+0x36>
     d90:	60 ff       	sbrs	r22, 0
     d92:	1b c0       	rjmp	.+54     	; 0xdca <__floatsisf+0x6c>
     d94:	6f 5f       	subi	r22, 0xFF	; 255
     d96:	7f 4f       	sbci	r23, 0xFF	; 255
     d98:	8f 4f       	sbci	r24, 0xFF	; 255
     d9a:	9f 4f       	sbci	r25, 0xFF	; 255
     d9c:	16 c0       	rjmp	.+44     	; 0xdca <__floatsisf+0x6c>
     d9e:	88 23       	and	r24, r24
     da0:	11 f0       	breq	.+4      	; 0xda6 <__floatsisf+0x48>
     da2:	96 e9       	ldi	r25, 0x96	; 150
     da4:	11 c0       	rjmp	.+34     	; 0xdc8 <__floatsisf+0x6a>
     da6:	77 23       	and	r23, r23
     da8:	21 f0       	breq	.+8      	; 0xdb2 <__floatsisf+0x54>
     daa:	9e e8       	ldi	r25, 0x8E	; 142
     dac:	87 2f       	mov	r24, r23
     dae:	76 2f       	mov	r23, r22
     db0:	05 c0       	rjmp	.+10     	; 0xdbc <__floatsisf+0x5e>
     db2:	66 23       	and	r22, r22
     db4:	71 f0       	breq	.+28     	; 0xdd2 <__floatsisf+0x74>
     db6:	96 e8       	ldi	r25, 0x86	; 134
     db8:	86 2f       	mov	r24, r22
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	2a f0       	brmi	.+10     	; 0xdca <__floatsisf+0x6c>
     dc0:	9a 95       	dec	r25
     dc2:	66 0f       	add	r22, r22
     dc4:	77 1f       	adc	r23, r23
     dc6:	88 1f       	adc	r24, r24
     dc8:	da f7       	brpl	.-10     	; 0xdc0 <__floatsisf+0x62>
     dca:	88 0f       	add	r24, r24
     dcc:	96 95       	lsr	r25
     dce:	87 95       	ror	r24
     dd0:	97 f9       	bld	r25, 7
     dd2:	08 95       	ret

00000dd4 <__fp_inf>:
     dd4:	97 f9       	bld	r25, 7
     dd6:	9f 67       	ori	r25, 0x7F	; 127
     dd8:	80 e8       	ldi	r24, 0x80	; 128
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	08 95       	ret

00000de0 <__fp_nan>:
     de0:	9f ef       	ldi	r25, 0xFF	; 255
     de2:	80 ec       	ldi	r24, 0xC0	; 192
     de4:	08 95       	ret

00000de6 <__fp_pscA>:
     de6:	00 24       	eor	r0, r0
     de8:	0a 94       	dec	r0
     dea:	16 16       	cp	r1, r22
     dec:	17 06       	cpc	r1, r23
     dee:	18 06       	cpc	r1, r24
     df0:	09 06       	cpc	r0, r25
     df2:	08 95       	ret

00000df4 <__fp_pscB>:
     df4:	00 24       	eor	r0, r0
     df6:	0a 94       	dec	r0
     df8:	12 16       	cp	r1, r18
     dfa:	13 06       	cpc	r1, r19
     dfc:	14 06       	cpc	r1, r20
     dfe:	05 06       	cpc	r0, r21
     e00:	08 95       	ret

00000e02 <__fp_round>:
     e02:	09 2e       	mov	r0, r25
     e04:	03 94       	inc	r0
     e06:	00 0c       	add	r0, r0
     e08:	11 f4       	brne	.+4      	; 0xe0e <__fp_round+0xc>
     e0a:	88 23       	and	r24, r24
     e0c:	52 f0       	brmi	.+20     	; 0xe22 <__fp_round+0x20>
     e0e:	bb 0f       	add	r27, r27
     e10:	40 f4       	brcc	.+16     	; 0xe22 <__fp_round+0x20>
     e12:	bf 2b       	or	r27, r31
     e14:	11 f4       	brne	.+4      	; 0xe1a <__fp_round+0x18>
     e16:	60 ff       	sbrs	r22, 0
     e18:	04 c0       	rjmp	.+8      	; 0xe22 <__fp_round+0x20>
     e1a:	6f 5f       	subi	r22, 0xFF	; 255
     e1c:	7f 4f       	sbci	r23, 0xFF	; 255
     e1e:	8f 4f       	sbci	r24, 0xFF	; 255
     e20:	9f 4f       	sbci	r25, 0xFF	; 255
     e22:	08 95       	ret

00000e24 <__fp_split3>:
     e24:	57 fd       	sbrc	r21, 7
     e26:	90 58       	subi	r25, 0x80	; 128
     e28:	44 0f       	add	r20, r20
     e2a:	55 1f       	adc	r21, r21
     e2c:	59 f0       	breq	.+22     	; 0xe44 <__fp_splitA+0x10>
     e2e:	5f 3f       	cpi	r21, 0xFF	; 255
     e30:	71 f0       	breq	.+28     	; 0xe4e <__fp_splitA+0x1a>
     e32:	47 95       	ror	r20

00000e34 <__fp_splitA>:
     e34:	88 0f       	add	r24, r24
     e36:	97 fb       	bst	r25, 7
     e38:	99 1f       	adc	r25, r25
     e3a:	61 f0       	breq	.+24     	; 0xe54 <__fp_splitA+0x20>
     e3c:	9f 3f       	cpi	r25, 0xFF	; 255
     e3e:	79 f0       	breq	.+30     	; 0xe5e <__fp_splitA+0x2a>
     e40:	87 95       	ror	r24
     e42:	08 95       	ret
     e44:	12 16       	cp	r1, r18
     e46:	13 06       	cpc	r1, r19
     e48:	14 06       	cpc	r1, r20
     e4a:	55 1f       	adc	r21, r21
     e4c:	f2 cf       	rjmp	.-28     	; 0xe32 <__fp_split3+0xe>
     e4e:	46 95       	lsr	r20
     e50:	f1 df       	rcall	.-30     	; 0xe34 <__fp_splitA>
     e52:	08 c0       	rjmp	.+16     	; 0xe64 <__fp_splitA+0x30>
     e54:	16 16       	cp	r1, r22
     e56:	17 06       	cpc	r1, r23
     e58:	18 06       	cpc	r1, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	f1 cf       	rjmp	.-30     	; 0xe40 <__fp_splitA+0xc>
     e5e:	86 95       	lsr	r24
     e60:	71 05       	cpc	r23, r1
     e62:	61 05       	cpc	r22, r1
     e64:	08 94       	sec
     e66:	08 95       	ret

00000e68 <__fp_zero>:
     e68:	e8 94       	clt

00000e6a <__fp_szero>:
     e6a:	bb 27       	eor	r27, r27
     e6c:	66 27       	eor	r22, r22
     e6e:	77 27       	eor	r23, r23
     e70:	cb 01       	movw	r24, r22
     e72:	97 f9       	bld	r25, 7
     e74:	08 95       	ret

00000e76 <__mulsf3>:
     e76:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__mulsf3x>
     e7a:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__fp_round>
     e7e:	0e 94 f3 06 	call	0xde6	; 0xde6 <__fp_pscA>
     e82:	38 f0       	brcs	.+14     	; 0xe92 <__mulsf3+0x1c>
     e84:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__fp_pscB>
     e88:	20 f0       	brcs	.+8      	; 0xe92 <__mulsf3+0x1c>
     e8a:	95 23       	and	r25, r21
     e8c:	11 f0       	breq	.+4      	; 0xe92 <__mulsf3+0x1c>
     e8e:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__fp_inf>
     e92:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__fp_nan>
     e96:	11 24       	eor	r1, r1
     e98:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_szero>

00000e9c <__mulsf3x>:
     e9c:	0e 94 12 07 	call	0xe24	; 0xe24 <__fp_split3>
     ea0:	70 f3       	brcs	.-36     	; 0xe7e <__mulsf3+0x8>

00000ea2 <__mulsf3_pse>:
     ea2:	95 9f       	mul	r25, r21
     ea4:	c1 f3       	breq	.-16     	; 0xe96 <__mulsf3+0x20>
     ea6:	95 0f       	add	r25, r21
     ea8:	50 e0       	ldi	r21, 0x00	; 0
     eaa:	55 1f       	adc	r21, r21
     eac:	62 9f       	mul	r22, r18
     eae:	f0 01       	movw	r30, r0
     eb0:	72 9f       	mul	r23, r18
     eb2:	bb 27       	eor	r27, r27
     eb4:	f0 0d       	add	r31, r0
     eb6:	b1 1d       	adc	r27, r1
     eb8:	63 9f       	mul	r22, r19
     eba:	aa 27       	eor	r26, r26
     ebc:	f0 0d       	add	r31, r0
     ebe:	b1 1d       	adc	r27, r1
     ec0:	aa 1f       	adc	r26, r26
     ec2:	64 9f       	mul	r22, r20
     ec4:	66 27       	eor	r22, r22
     ec6:	b0 0d       	add	r27, r0
     ec8:	a1 1d       	adc	r26, r1
     eca:	66 1f       	adc	r22, r22
     ecc:	82 9f       	mul	r24, r18
     ece:	22 27       	eor	r18, r18
     ed0:	b0 0d       	add	r27, r0
     ed2:	a1 1d       	adc	r26, r1
     ed4:	62 1f       	adc	r22, r18
     ed6:	73 9f       	mul	r23, r19
     ed8:	b0 0d       	add	r27, r0
     eda:	a1 1d       	adc	r26, r1
     edc:	62 1f       	adc	r22, r18
     ede:	83 9f       	mul	r24, r19
     ee0:	a0 0d       	add	r26, r0
     ee2:	61 1d       	adc	r22, r1
     ee4:	22 1f       	adc	r18, r18
     ee6:	74 9f       	mul	r23, r20
     ee8:	33 27       	eor	r19, r19
     eea:	a0 0d       	add	r26, r0
     eec:	61 1d       	adc	r22, r1
     eee:	23 1f       	adc	r18, r19
     ef0:	84 9f       	mul	r24, r20
     ef2:	60 0d       	add	r22, r0
     ef4:	21 1d       	adc	r18, r1
     ef6:	82 2f       	mov	r24, r18
     ef8:	76 2f       	mov	r23, r22
     efa:	6a 2f       	mov	r22, r26
     efc:	11 24       	eor	r1, r1
     efe:	9f 57       	subi	r25, 0x7F	; 127
     f00:	50 40       	sbci	r21, 0x00	; 0
     f02:	9a f0       	brmi	.+38     	; 0xf2a <__mulsf3_pse+0x88>
     f04:	f1 f0       	breq	.+60     	; 0xf42 <__mulsf3_pse+0xa0>
     f06:	88 23       	and	r24, r24
     f08:	4a f0       	brmi	.+18     	; 0xf1c <__mulsf3_pse+0x7a>
     f0a:	ee 0f       	add	r30, r30
     f0c:	ff 1f       	adc	r31, r31
     f0e:	bb 1f       	adc	r27, r27
     f10:	66 1f       	adc	r22, r22
     f12:	77 1f       	adc	r23, r23
     f14:	88 1f       	adc	r24, r24
     f16:	91 50       	subi	r25, 0x01	; 1
     f18:	50 40       	sbci	r21, 0x00	; 0
     f1a:	a9 f7       	brne	.-22     	; 0xf06 <__mulsf3_pse+0x64>
     f1c:	9e 3f       	cpi	r25, 0xFE	; 254
     f1e:	51 05       	cpc	r21, r1
     f20:	80 f0       	brcs	.+32     	; 0xf42 <__mulsf3_pse+0xa0>
     f22:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__fp_inf>
     f26:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_szero>
     f2a:	5f 3f       	cpi	r21, 0xFF	; 255
     f2c:	e4 f3       	brlt	.-8      	; 0xf26 <__mulsf3_pse+0x84>
     f2e:	98 3e       	cpi	r25, 0xE8	; 232
     f30:	d4 f3       	brlt	.-12     	; 0xf26 <__mulsf3_pse+0x84>
     f32:	86 95       	lsr	r24
     f34:	77 95       	ror	r23
     f36:	67 95       	ror	r22
     f38:	b7 95       	ror	r27
     f3a:	f7 95       	ror	r31
     f3c:	e7 95       	ror	r30
     f3e:	9f 5f       	subi	r25, 0xFF	; 255
     f40:	c1 f7       	brne	.-16     	; 0xf32 <__mulsf3_pse+0x90>
     f42:	fe 2b       	or	r31, r30
     f44:	88 0f       	add	r24, r24
     f46:	91 1d       	adc	r25, r1
     f48:	96 95       	lsr	r25
     f4a:	87 95       	ror	r24
     f4c:	97 f9       	bld	r25, 7
     f4e:	08 95       	ret

00000f50 <atoi>:
     f50:	fc 01       	movw	r30, r24
     f52:	88 27       	eor	r24, r24
     f54:	99 27       	eor	r25, r25
     f56:	e8 94       	clt
     f58:	21 91       	ld	r18, Z+
     f5a:	20 32       	cpi	r18, 0x20	; 32
     f5c:	e9 f3       	breq	.-6      	; 0xf58 <atoi+0x8>
     f5e:	29 30       	cpi	r18, 0x09	; 9
     f60:	10 f0       	brcs	.+4      	; 0xf66 <atoi+0x16>
     f62:	2e 30       	cpi	r18, 0x0E	; 14
     f64:	c8 f3       	brcs	.-14     	; 0xf58 <atoi+0x8>
     f66:	2b 32       	cpi	r18, 0x2B	; 43
     f68:	41 f0       	breq	.+16     	; 0xf7a <atoi+0x2a>
     f6a:	2d 32       	cpi	r18, 0x2D	; 45
     f6c:	39 f4       	brne	.+14     	; 0xf7c <atoi+0x2c>
     f6e:	68 94       	set
     f70:	04 c0       	rjmp	.+8      	; 0xf7a <atoi+0x2a>
     f72:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__mulhi_const_10>
     f76:	82 0f       	add	r24, r18
     f78:	91 1d       	adc	r25, r1
     f7a:	21 91       	ld	r18, Z+
     f7c:	20 53       	subi	r18, 0x30	; 48
     f7e:	2a 30       	cpi	r18, 0x0A	; 10
     f80:	c0 f3       	brcs	.-16     	; 0xf72 <atoi+0x22>
     f82:	1e f4       	brtc	.+6      	; 0xf8a <atoi+0x3a>
     f84:	90 95       	com	r25
     f86:	81 95       	neg	r24
     f88:	9f 4f       	sbci	r25, 0xFF	; 255
     f8a:	08 95       	ret

00000f8c <__mulhi_const_10>:
     f8c:	7a e0       	ldi	r23, 0x0A	; 10
     f8e:	97 9f       	mul	r25, r23
     f90:	90 2d       	mov	r25, r0
     f92:	87 9f       	mul	r24, r23
     f94:	80 2d       	mov	r24, r0
     f96:	91 0d       	add	r25, r1
     f98:	11 24       	eor	r1, r1
     f9a:	08 95       	ret

00000f9c <sprintf>:
     f9c:	ae e0       	ldi	r26, 0x0E	; 14
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e4 ed       	ldi	r30, 0xD4	; 212
     fa2:	f7 e0       	ldi	r31, 0x07	; 7
     fa4:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <__prologue_saves__+0x1c>
     fa8:	0d 89       	ldd	r16, Y+21	; 0x15
     faa:	1e 89       	ldd	r17, Y+22	; 0x16
     fac:	86 e0       	ldi	r24, 0x06	; 6
     fae:	8c 83       	std	Y+4, r24	; 0x04
     fb0:	1a 83       	std	Y+2, r17	; 0x02
     fb2:	09 83       	std	Y+1, r16	; 0x01
     fb4:	8f ef       	ldi	r24, 0xFF	; 255
     fb6:	9f e7       	ldi	r25, 0x7F	; 127
     fb8:	9e 83       	std	Y+6, r25	; 0x06
     fba:	8d 83       	std	Y+5, r24	; 0x05
     fbc:	ae 01       	movw	r20, r28
     fbe:	47 5e       	subi	r20, 0xE7	; 231
     fc0:	5f 4f       	sbci	r21, 0xFF	; 255
     fc2:	6f 89       	ldd	r22, Y+23	; 0x17
     fc4:	78 8d       	ldd	r23, Y+24	; 0x18
     fc6:	ce 01       	movw	r24, r28
     fc8:	01 96       	adiw	r24, 0x01	; 1
     fca:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <vfprintf>
     fce:	ef 81       	ldd	r30, Y+7	; 0x07
     fd0:	f8 85       	ldd	r31, Y+8	; 0x08
     fd2:	e0 0f       	add	r30, r16
     fd4:	f1 1f       	adc	r31, r17
     fd6:	10 82       	st	Z, r1
     fd8:	2e 96       	adiw	r28, 0x0e	; 14
     fda:	e4 e0       	ldi	r30, 0x04	; 4
     fdc:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <__epilogue_restores__+0x1c>

00000fe0 <vfprintf>:
     fe0:	ab e0       	ldi	r26, 0x0B	; 11
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e6 ef       	ldi	r30, 0xF6	; 246
     fe6:	f7 e0       	ldi	r31, 0x07	; 7
     fe8:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__prologue_saves__>
     fec:	6c 01       	movw	r12, r24
     fee:	7b 01       	movw	r14, r22
     ff0:	8a 01       	movw	r16, r20
     ff2:	fc 01       	movw	r30, r24
     ff4:	17 82       	std	Z+7, r1	; 0x07
     ff6:	16 82       	std	Z+6, r1	; 0x06
     ff8:	83 81       	ldd	r24, Z+3	; 0x03
     ffa:	81 ff       	sbrs	r24, 1
     ffc:	cc c1       	rjmp	.+920    	; 0x1396 <vfprintf+0x3b6>
     ffe:	ce 01       	movw	r24, r28
    1000:	01 96       	adiw	r24, 0x01	; 1
    1002:	3c 01       	movw	r6, r24
    1004:	f6 01       	movw	r30, r12
    1006:	93 81       	ldd	r25, Z+3	; 0x03
    1008:	f7 01       	movw	r30, r14
    100a:	93 fd       	sbrc	r25, 3
    100c:	85 91       	lpm	r24, Z+
    100e:	93 ff       	sbrs	r25, 3
    1010:	81 91       	ld	r24, Z+
    1012:	7f 01       	movw	r14, r30
    1014:	88 23       	and	r24, r24
    1016:	09 f4       	brne	.+2      	; 0x101a <vfprintf+0x3a>
    1018:	ba c1       	rjmp	.+884    	; 0x138e <vfprintf+0x3ae>
    101a:	85 32       	cpi	r24, 0x25	; 37
    101c:	39 f4       	brne	.+14     	; 0x102c <vfprintf+0x4c>
    101e:	93 fd       	sbrc	r25, 3
    1020:	85 91       	lpm	r24, Z+
    1022:	93 ff       	sbrs	r25, 3
    1024:	81 91       	ld	r24, Z+
    1026:	7f 01       	movw	r14, r30
    1028:	85 32       	cpi	r24, 0x25	; 37
    102a:	29 f4       	brne	.+10     	; 0x1036 <vfprintf+0x56>
    102c:	b6 01       	movw	r22, r12
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 e7 09 	call	0x13ce	; 0x13ce <fputc>
    1034:	e7 cf       	rjmp	.-50     	; 0x1004 <vfprintf+0x24>
    1036:	91 2c       	mov	r9, r1
    1038:	21 2c       	mov	r2, r1
    103a:	31 2c       	mov	r3, r1
    103c:	ff e1       	ldi	r31, 0x1F	; 31
    103e:	f3 15       	cp	r31, r3
    1040:	d8 f0       	brcs	.+54     	; 0x1078 <vfprintf+0x98>
    1042:	8b 32       	cpi	r24, 0x2B	; 43
    1044:	79 f0       	breq	.+30     	; 0x1064 <vfprintf+0x84>
    1046:	38 f4       	brcc	.+14     	; 0x1056 <vfprintf+0x76>
    1048:	80 32       	cpi	r24, 0x20	; 32
    104a:	79 f0       	breq	.+30     	; 0x106a <vfprintf+0x8a>
    104c:	83 32       	cpi	r24, 0x23	; 35
    104e:	a1 f4       	brne	.+40     	; 0x1078 <vfprintf+0x98>
    1050:	23 2d       	mov	r18, r3
    1052:	20 61       	ori	r18, 0x10	; 16
    1054:	1d c0       	rjmp	.+58     	; 0x1090 <vfprintf+0xb0>
    1056:	8d 32       	cpi	r24, 0x2D	; 45
    1058:	61 f0       	breq	.+24     	; 0x1072 <vfprintf+0x92>
    105a:	80 33       	cpi	r24, 0x30	; 48
    105c:	69 f4       	brne	.+26     	; 0x1078 <vfprintf+0x98>
    105e:	23 2d       	mov	r18, r3
    1060:	21 60       	ori	r18, 0x01	; 1
    1062:	16 c0       	rjmp	.+44     	; 0x1090 <vfprintf+0xb0>
    1064:	83 2d       	mov	r24, r3
    1066:	82 60       	ori	r24, 0x02	; 2
    1068:	38 2e       	mov	r3, r24
    106a:	e3 2d       	mov	r30, r3
    106c:	e4 60       	ori	r30, 0x04	; 4
    106e:	3e 2e       	mov	r3, r30
    1070:	2a c0       	rjmp	.+84     	; 0x10c6 <vfprintf+0xe6>
    1072:	f3 2d       	mov	r31, r3
    1074:	f8 60       	ori	r31, 0x08	; 8
    1076:	1d c0       	rjmp	.+58     	; 0x10b2 <vfprintf+0xd2>
    1078:	37 fc       	sbrc	r3, 7
    107a:	2d c0       	rjmp	.+90     	; 0x10d6 <vfprintf+0xf6>
    107c:	20 ed       	ldi	r18, 0xD0	; 208
    107e:	28 0f       	add	r18, r24
    1080:	2a 30       	cpi	r18, 0x0A	; 10
    1082:	40 f0       	brcs	.+16     	; 0x1094 <vfprintf+0xb4>
    1084:	8e 32       	cpi	r24, 0x2E	; 46
    1086:	b9 f4       	brne	.+46     	; 0x10b6 <vfprintf+0xd6>
    1088:	36 fc       	sbrc	r3, 6
    108a:	81 c1       	rjmp	.+770    	; 0x138e <vfprintf+0x3ae>
    108c:	23 2d       	mov	r18, r3
    108e:	20 64       	ori	r18, 0x40	; 64
    1090:	32 2e       	mov	r3, r18
    1092:	19 c0       	rjmp	.+50     	; 0x10c6 <vfprintf+0xe6>
    1094:	36 fe       	sbrs	r3, 6
    1096:	06 c0       	rjmp	.+12     	; 0x10a4 <vfprintf+0xc4>
    1098:	8a e0       	ldi	r24, 0x0A	; 10
    109a:	98 9e       	mul	r9, r24
    109c:	20 0d       	add	r18, r0
    109e:	11 24       	eor	r1, r1
    10a0:	92 2e       	mov	r9, r18
    10a2:	11 c0       	rjmp	.+34     	; 0x10c6 <vfprintf+0xe6>
    10a4:	ea e0       	ldi	r30, 0x0A	; 10
    10a6:	2e 9e       	mul	r2, r30
    10a8:	20 0d       	add	r18, r0
    10aa:	11 24       	eor	r1, r1
    10ac:	22 2e       	mov	r2, r18
    10ae:	f3 2d       	mov	r31, r3
    10b0:	f0 62       	ori	r31, 0x20	; 32
    10b2:	3f 2e       	mov	r3, r31
    10b4:	08 c0       	rjmp	.+16     	; 0x10c6 <vfprintf+0xe6>
    10b6:	8c 36       	cpi	r24, 0x6C	; 108
    10b8:	21 f4       	brne	.+8      	; 0x10c2 <vfprintf+0xe2>
    10ba:	83 2d       	mov	r24, r3
    10bc:	80 68       	ori	r24, 0x80	; 128
    10be:	38 2e       	mov	r3, r24
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <vfprintf+0xe6>
    10c2:	88 36       	cpi	r24, 0x68	; 104
    10c4:	41 f4       	brne	.+16     	; 0x10d6 <vfprintf+0xf6>
    10c6:	f7 01       	movw	r30, r14
    10c8:	93 fd       	sbrc	r25, 3
    10ca:	85 91       	lpm	r24, Z+
    10cc:	93 ff       	sbrs	r25, 3
    10ce:	81 91       	ld	r24, Z+
    10d0:	7f 01       	movw	r14, r30
    10d2:	81 11       	cpse	r24, r1
    10d4:	b3 cf       	rjmp	.-154    	; 0x103c <vfprintf+0x5c>
    10d6:	98 2f       	mov	r25, r24
    10d8:	9f 7d       	andi	r25, 0xDF	; 223
    10da:	95 54       	subi	r25, 0x45	; 69
    10dc:	93 30       	cpi	r25, 0x03	; 3
    10de:	28 f4       	brcc	.+10     	; 0x10ea <vfprintf+0x10a>
    10e0:	0c 5f       	subi	r16, 0xFC	; 252
    10e2:	1f 4f       	sbci	r17, 0xFF	; 255
    10e4:	9f e3       	ldi	r25, 0x3F	; 63
    10e6:	99 83       	std	Y+1, r25	; 0x01
    10e8:	0d c0       	rjmp	.+26     	; 0x1104 <vfprintf+0x124>
    10ea:	83 36       	cpi	r24, 0x63	; 99
    10ec:	31 f0       	breq	.+12     	; 0x10fa <vfprintf+0x11a>
    10ee:	83 37       	cpi	r24, 0x73	; 115
    10f0:	71 f0       	breq	.+28     	; 0x110e <vfprintf+0x12e>
    10f2:	83 35       	cpi	r24, 0x53	; 83
    10f4:	09 f0       	breq	.+2      	; 0x10f8 <vfprintf+0x118>
    10f6:	59 c0       	rjmp	.+178    	; 0x11aa <vfprintf+0x1ca>
    10f8:	21 c0       	rjmp	.+66     	; 0x113c <vfprintf+0x15c>
    10fa:	f8 01       	movw	r30, r16
    10fc:	80 81       	ld	r24, Z
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	0e 5f       	subi	r16, 0xFE	; 254
    1102:	1f 4f       	sbci	r17, 0xFF	; 255
    1104:	88 24       	eor	r8, r8
    1106:	83 94       	inc	r8
    1108:	91 2c       	mov	r9, r1
    110a:	53 01       	movw	r10, r6
    110c:	13 c0       	rjmp	.+38     	; 0x1134 <vfprintf+0x154>
    110e:	28 01       	movw	r4, r16
    1110:	f2 e0       	ldi	r31, 0x02	; 2
    1112:	4f 0e       	add	r4, r31
    1114:	51 1c       	adc	r5, r1
    1116:	f8 01       	movw	r30, r16
    1118:	a0 80       	ld	r10, Z
    111a:	b1 80       	ldd	r11, Z+1	; 0x01
    111c:	36 fe       	sbrs	r3, 6
    111e:	03 c0       	rjmp	.+6      	; 0x1126 <vfprintf+0x146>
    1120:	69 2d       	mov	r22, r9
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	02 c0       	rjmp	.+4      	; 0x112a <vfprintf+0x14a>
    1126:	6f ef       	ldi	r22, 0xFF	; 255
    1128:	7f ef       	ldi	r23, 0xFF	; 255
    112a:	c5 01       	movw	r24, r10
    112c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <strnlen>
    1130:	4c 01       	movw	r8, r24
    1132:	82 01       	movw	r16, r4
    1134:	f3 2d       	mov	r31, r3
    1136:	ff 77       	andi	r31, 0x7F	; 127
    1138:	3f 2e       	mov	r3, r31
    113a:	16 c0       	rjmp	.+44     	; 0x1168 <vfprintf+0x188>
    113c:	28 01       	movw	r4, r16
    113e:	22 e0       	ldi	r18, 0x02	; 2
    1140:	42 0e       	add	r4, r18
    1142:	51 1c       	adc	r5, r1
    1144:	f8 01       	movw	r30, r16
    1146:	a0 80       	ld	r10, Z
    1148:	b1 80       	ldd	r11, Z+1	; 0x01
    114a:	36 fe       	sbrs	r3, 6
    114c:	03 c0       	rjmp	.+6      	; 0x1154 <vfprintf+0x174>
    114e:	69 2d       	mov	r22, r9
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <vfprintf+0x178>
    1154:	6f ef       	ldi	r22, 0xFF	; 255
    1156:	7f ef       	ldi	r23, 0xFF	; 255
    1158:	c5 01       	movw	r24, r10
    115a:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <strnlen_P>
    115e:	4c 01       	movw	r8, r24
    1160:	f3 2d       	mov	r31, r3
    1162:	f0 68       	ori	r31, 0x80	; 128
    1164:	3f 2e       	mov	r3, r31
    1166:	82 01       	movw	r16, r4
    1168:	33 fc       	sbrc	r3, 3
    116a:	1b c0       	rjmp	.+54     	; 0x11a2 <vfprintf+0x1c2>
    116c:	82 2d       	mov	r24, r2
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	88 16       	cp	r8, r24
    1172:	99 06       	cpc	r9, r25
    1174:	b0 f4       	brcc	.+44     	; 0x11a2 <vfprintf+0x1c2>
    1176:	b6 01       	movw	r22, r12
    1178:	80 e2       	ldi	r24, 0x20	; 32
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	0e 94 e7 09 	call	0x13ce	; 0x13ce <fputc>
    1180:	2a 94       	dec	r2
    1182:	f4 cf       	rjmp	.-24     	; 0x116c <vfprintf+0x18c>
    1184:	f5 01       	movw	r30, r10
    1186:	37 fc       	sbrc	r3, 7
    1188:	85 91       	lpm	r24, Z+
    118a:	37 fe       	sbrs	r3, 7
    118c:	81 91       	ld	r24, Z+
    118e:	5f 01       	movw	r10, r30
    1190:	b6 01       	movw	r22, r12
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	0e 94 e7 09 	call	0x13ce	; 0x13ce <fputc>
    1198:	21 10       	cpse	r2, r1
    119a:	2a 94       	dec	r2
    119c:	21 e0       	ldi	r18, 0x01	; 1
    119e:	82 1a       	sub	r8, r18
    11a0:	91 08       	sbc	r9, r1
    11a2:	81 14       	cp	r8, r1
    11a4:	91 04       	cpc	r9, r1
    11a6:	71 f7       	brne	.-36     	; 0x1184 <vfprintf+0x1a4>
    11a8:	e8 c0       	rjmp	.+464    	; 0x137a <vfprintf+0x39a>
    11aa:	84 36       	cpi	r24, 0x64	; 100
    11ac:	11 f0       	breq	.+4      	; 0x11b2 <vfprintf+0x1d2>
    11ae:	89 36       	cpi	r24, 0x69	; 105
    11b0:	41 f5       	brne	.+80     	; 0x1202 <vfprintf+0x222>
    11b2:	f8 01       	movw	r30, r16
    11b4:	37 fe       	sbrs	r3, 7
    11b6:	07 c0       	rjmp	.+14     	; 0x11c6 <vfprintf+0x1e6>
    11b8:	60 81       	ld	r22, Z
    11ba:	71 81       	ldd	r23, Z+1	; 0x01
    11bc:	82 81       	ldd	r24, Z+2	; 0x02
    11be:	93 81       	ldd	r25, Z+3	; 0x03
    11c0:	0c 5f       	subi	r16, 0xFC	; 252
    11c2:	1f 4f       	sbci	r17, 0xFF	; 255
    11c4:	08 c0       	rjmp	.+16     	; 0x11d6 <vfprintf+0x1f6>
    11c6:	60 81       	ld	r22, Z
    11c8:	71 81       	ldd	r23, Z+1	; 0x01
    11ca:	07 2e       	mov	r0, r23
    11cc:	00 0c       	add	r0, r0
    11ce:	88 0b       	sbc	r24, r24
    11d0:	99 0b       	sbc	r25, r25
    11d2:	0e 5f       	subi	r16, 0xFE	; 254
    11d4:	1f 4f       	sbci	r17, 0xFF	; 255
    11d6:	f3 2d       	mov	r31, r3
    11d8:	ff 76       	andi	r31, 0x6F	; 111
    11da:	3f 2e       	mov	r3, r31
    11dc:	97 ff       	sbrs	r25, 7
    11de:	09 c0       	rjmp	.+18     	; 0x11f2 <vfprintf+0x212>
    11e0:	90 95       	com	r25
    11e2:	80 95       	com	r24
    11e4:	70 95       	com	r23
    11e6:	61 95       	neg	r22
    11e8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ea:	8f 4f       	sbci	r24, 0xFF	; 255
    11ec:	9f 4f       	sbci	r25, 0xFF	; 255
    11ee:	f0 68       	ori	r31, 0x80	; 128
    11f0:	3f 2e       	mov	r3, r31
    11f2:	2a e0       	ldi	r18, 0x0A	; 10
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	a3 01       	movw	r20, r6
    11f8:	0e 94 23 0a 	call	0x1446	; 0x1446 <__ultoa_invert>
    11fc:	88 2e       	mov	r8, r24
    11fe:	86 18       	sub	r8, r6
    1200:	45 c0       	rjmp	.+138    	; 0x128c <vfprintf+0x2ac>
    1202:	85 37       	cpi	r24, 0x75	; 117
    1204:	31 f4       	brne	.+12     	; 0x1212 <vfprintf+0x232>
    1206:	23 2d       	mov	r18, r3
    1208:	2f 7e       	andi	r18, 0xEF	; 239
    120a:	b2 2e       	mov	r11, r18
    120c:	2a e0       	ldi	r18, 0x0A	; 10
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	25 c0       	rjmp	.+74     	; 0x125c <vfprintf+0x27c>
    1212:	93 2d       	mov	r25, r3
    1214:	99 7f       	andi	r25, 0xF9	; 249
    1216:	b9 2e       	mov	r11, r25
    1218:	8f 36       	cpi	r24, 0x6F	; 111
    121a:	c1 f0       	breq	.+48     	; 0x124c <vfprintf+0x26c>
    121c:	18 f4       	brcc	.+6      	; 0x1224 <vfprintf+0x244>
    121e:	88 35       	cpi	r24, 0x58	; 88
    1220:	79 f0       	breq	.+30     	; 0x1240 <vfprintf+0x260>
    1222:	b5 c0       	rjmp	.+362    	; 0x138e <vfprintf+0x3ae>
    1224:	80 37       	cpi	r24, 0x70	; 112
    1226:	19 f0       	breq	.+6      	; 0x122e <vfprintf+0x24e>
    1228:	88 37       	cpi	r24, 0x78	; 120
    122a:	21 f0       	breq	.+8      	; 0x1234 <vfprintf+0x254>
    122c:	b0 c0       	rjmp	.+352    	; 0x138e <vfprintf+0x3ae>
    122e:	e9 2f       	mov	r30, r25
    1230:	e0 61       	ori	r30, 0x10	; 16
    1232:	be 2e       	mov	r11, r30
    1234:	b4 fe       	sbrs	r11, 4
    1236:	0d c0       	rjmp	.+26     	; 0x1252 <vfprintf+0x272>
    1238:	fb 2d       	mov	r31, r11
    123a:	f4 60       	ori	r31, 0x04	; 4
    123c:	bf 2e       	mov	r11, r31
    123e:	09 c0       	rjmp	.+18     	; 0x1252 <vfprintf+0x272>
    1240:	34 fe       	sbrs	r3, 4
    1242:	0a c0       	rjmp	.+20     	; 0x1258 <vfprintf+0x278>
    1244:	29 2f       	mov	r18, r25
    1246:	26 60       	ori	r18, 0x06	; 6
    1248:	b2 2e       	mov	r11, r18
    124a:	06 c0       	rjmp	.+12     	; 0x1258 <vfprintf+0x278>
    124c:	28 e0       	ldi	r18, 0x08	; 8
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	05 c0       	rjmp	.+10     	; 0x125c <vfprintf+0x27c>
    1252:	20 e1       	ldi	r18, 0x10	; 16
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	02 c0       	rjmp	.+4      	; 0x125c <vfprintf+0x27c>
    1258:	20 e1       	ldi	r18, 0x10	; 16
    125a:	32 e0       	ldi	r19, 0x02	; 2
    125c:	f8 01       	movw	r30, r16
    125e:	b7 fe       	sbrs	r11, 7
    1260:	07 c0       	rjmp	.+14     	; 0x1270 <vfprintf+0x290>
    1262:	60 81       	ld	r22, Z
    1264:	71 81       	ldd	r23, Z+1	; 0x01
    1266:	82 81       	ldd	r24, Z+2	; 0x02
    1268:	93 81       	ldd	r25, Z+3	; 0x03
    126a:	0c 5f       	subi	r16, 0xFC	; 252
    126c:	1f 4f       	sbci	r17, 0xFF	; 255
    126e:	06 c0       	rjmp	.+12     	; 0x127c <vfprintf+0x29c>
    1270:	60 81       	ld	r22, Z
    1272:	71 81       	ldd	r23, Z+1	; 0x01
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	0e 5f       	subi	r16, 0xFE	; 254
    127a:	1f 4f       	sbci	r17, 0xFF	; 255
    127c:	a3 01       	movw	r20, r6
    127e:	0e 94 23 0a 	call	0x1446	; 0x1446 <__ultoa_invert>
    1282:	88 2e       	mov	r8, r24
    1284:	86 18       	sub	r8, r6
    1286:	fb 2d       	mov	r31, r11
    1288:	ff 77       	andi	r31, 0x7F	; 127
    128a:	3f 2e       	mov	r3, r31
    128c:	36 fe       	sbrs	r3, 6
    128e:	0d c0       	rjmp	.+26     	; 0x12aa <vfprintf+0x2ca>
    1290:	23 2d       	mov	r18, r3
    1292:	2e 7f       	andi	r18, 0xFE	; 254
    1294:	a2 2e       	mov	r10, r18
    1296:	89 14       	cp	r8, r9
    1298:	58 f4       	brcc	.+22     	; 0x12b0 <vfprintf+0x2d0>
    129a:	34 fe       	sbrs	r3, 4
    129c:	0b c0       	rjmp	.+22     	; 0x12b4 <vfprintf+0x2d4>
    129e:	32 fc       	sbrc	r3, 2
    12a0:	09 c0       	rjmp	.+18     	; 0x12b4 <vfprintf+0x2d4>
    12a2:	83 2d       	mov	r24, r3
    12a4:	8e 7e       	andi	r24, 0xEE	; 238
    12a6:	a8 2e       	mov	r10, r24
    12a8:	05 c0       	rjmp	.+10     	; 0x12b4 <vfprintf+0x2d4>
    12aa:	b8 2c       	mov	r11, r8
    12ac:	a3 2c       	mov	r10, r3
    12ae:	03 c0       	rjmp	.+6      	; 0x12b6 <vfprintf+0x2d6>
    12b0:	b8 2c       	mov	r11, r8
    12b2:	01 c0       	rjmp	.+2      	; 0x12b6 <vfprintf+0x2d6>
    12b4:	b9 2c       	mov	r11, r9
    12b6:	a4 fe       	sbrs	r10, 4
    12b8:	0f c0       	rjmp	.+30     	; 0x12d8 <vfprintf+0x2f8>
    12ba:	fe 01       	movw	r30, r28
    12bc:	e8 0d       	add	r30, r8
    12be:	f1 1d       	adc	r31, r1
    12c0:	80 81       	ld	r24, Z
    12c2:	80 33       	cpi	r24, 0x30	; 48
    12c4:	21 f4       	brne	.+8      	; 0x12ce <vfprintf+0x2ee>
    12c6:	9a 2d       	mov	r25, r10
    12c8:	99 7e       	andi	r25, 0xE9	; 233
    12ca:	a9 2e       	mov	r10, r25
    12cc:	09 c0       	rjmp	.+18     	; 0x12e0 <vfprintf+0x300>
    12ce:	a2 fe       	sbrs	r10, 2
    12d0:	06 c0       	rjmp	.+12     	; 0x12de <vfprintf+0x2fe>
    12d2:	b3 94       	inc	r11
    12d4:	b3 94       	inc	r11
    12d6:	04 c0       	rjmp	.+8      	; 0x12e0 <vfprintf+0x300>
    12d8:	8a 2d       	mov	r24, r10
    12da:	86 78       	andi	r24, 0x86	; 134
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <vfprintf+0x300>
    12de:	b3 94       	inc	r11
    12e0:	a3 fc       	sbrc	r10, 3
    12e2:	11 c0       	rjmp	.+34     	; 0x1306 <vfprintf+0x326>
    12e4:	a0 fe       	sbrs	r10, 0
    12e6:	06 c0       	rjmp	.+12     	; 0x12f4 <vfprintf+0x314>
    12e8:	b2 14       	cp	r11, r2
    12ea:	88 f4       	brcc	.+34     	; 0x130e <vfprintf+0x32e>
    12ec:	28 0c       	add	r2, r8
    12ee:	92 2c       	mov	r9, r2
    12f0:	9b 18       	sub	r9, r11
    12f2:	0e c0       	rjmp	.+28     	; 0x1310 <vfprintf+0x330>
    12f4:	b2 14       	cp	r11, r2
    12f6:	60 f4       	brcc	.+24     	; 0x1310 <vfprintf+0x330>
    12f8:	b6 01       	movw	r22, r12
    12fa:	80 e2       	ldi	r24, 0x20	; 32
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	0e 94 e7 09 	call	0x13ce	; 0x13ce <fputc>
    1302:	b3 94       	inc	r11
    1304:	f7 cf       	rjmp	.-18     	; 0x12f4 <vfprintf+0x314>
    1306:	b2 14       	cp	r11, r2
    1308:	18 f4       	brcc	.+6      	; 0x1310 <vfprintf+0x330>
    130a:	2b 18       	sub	r2, r11
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <vfprintf+0x332>
    130e:	98 2c       	mov	r9, r8
    1310:	21 2c       	mov	r2, r1
    1312:	a4 fe       	sbrs	r10, 4
    1314:	10 c0       	rjmp	.+32     	; 0x1336 <vfprintf+0x356>
    1316:	b6 01       	movw	r22, r12
    1318:	80 e3       	ldi	r24, 0x30	; 48
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	0e 94 e7 09 	call	0x13ce	; 0x13ce <fputc>
    1320:	a2 fe       	sbrs	r10, 2
    1322:	17 c0       	rjmp	.+46     	; 0x1352 <vfprintf+0x372>
    1324:	a1 fc       	sbrc	r10, 1
    1326:	03 c0       	rjmp	.+6      	; 0x132e <vfprintf+0x34e>
    1328:	88 e7       	ldi	r24, 0x78	; 120
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <vfprintf+0x352>
    132e:	88 e5       	ldi	r24, 0x58	; 88
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	b6 01       	movw	r22, r12
    1334:	0c c0       	rjmp	.+24     	; 0x134e <vfprintf+0x36e>
    1336:	8a 2d       	mov	r24, r10
    1338:	86 78       	andi	r24, 0x86	; 134
    133a:	59 f0       	breq	.+22     	; 0x1352 <vfprintf+0x372>
    133c:	a1 fe       	sbrs	r10, 1
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <vfprintf+0x364>
    1340:	8b e2       	ldi	r24, 0x2B	; 43
    1342:	01 c0       	rjmp	.+2      	; 0x1346 <vfprintf+0x366>
    1344:	80 e2       	ldi	r24, 0x20	; 32
    1346:	a7 fc       	sbrc	r10, 7
    1348:	8d e2       	ldi	r24, 0x2D	; 45
    134a:	b6 01       	movw	r22, r12
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0e 94 e7 09 	call	0x13ce	; 0x13ce <fputc>
    1352:	89 14       	cp	r8, r9
    1354:	38 f4       	brcc	.+14     	; 0x1364 <vfprintf+0x384>
    1356:	b6 01       	movw	r22, r12
    1358:	80 e3       	ldi	r24, 0x30	; 48
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 e7 09 	call	0x13ce	; 0x13ce <fputc>
    1360:	9a 94       	dec	r9
    1362:	f7 cf       	rjmp	.-18     	; 0x1352 <vfprintf+0x372>
    1364:	8a 94       	dec	r8
    1366:	f3 01       	movw	r30, r6
    1368:	e8 0d       	add	r30, r8
    136a:	f1 1d       	adc	r31, r1
    136c:	80 81       	ld	r24, Z
    136e:	b6 01       	movw	r22, r12
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	0e 94 e7 09 	call	0x13ce	; 0x13ce <fputc>
    1376:	81 10       	cpse	r8, r1
    1378:	f5 cf       	rjmp	.-22     	; 0x1364 <vfprintf+0x384>
    137a:	22 20       	and	r2, r2
    137c:	09 f4       	brne	.+2      	; 0x1380 <vfprintf+0x3a0>
    137e:	42 ce       	rjmp	.-892    	; 0x1004 <vfprintf+0x24>
    1380:	b6 01       	movw	r22, r12
    1382:	80 e2       	ldi	r24, 0x20	; 32
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	0e 94 e7 09 	call	0x13ce	; 0x13ce <fputc>
    138a:	2a 94       	dec	r2
    138c:	f6 cf       	rjmp	.-20     	; 0x137a <vfprintf+0x39a>
    138e:	f6 01       	movw	r30, r12
    1390:	86 81       	ldd	r24, Z+6	; 0x06
    1392:	97 81       	ldd	r25, Z+7	; 0x07
    1394:	02 c0       	rjmp	.+4      	; 0x139a <vfprintf+0x3ba>
    1396:	8f ef       	ldi	r24, 0xFF	; 255
    1398:	9f ef       	ldi	r25, 0xFF	; 255
    139a:	2b 96       	adiw	r28, 0x0b	; 11
    139c:	e2 e1       	ldi	r30, 0x12	; 18
    139e:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <__epilogue_restores__>

000013a2 <strnlen_P>:
    13a2:	fc 01       	movw	r30, r24
    13a4:	05 90       	lpm	r0, Z+
    13a6:	61 50       	subi	r22, 0x01	; 1
    13a8:	70 40       	sbci	r23, 0x00	; 0
    13aa:	01 10       	cpse	r0, r1
    13ac:	d8 f7       	brcc	.-10     	; 0x13a4 <strnlen_P+0x2>
    13ae:	80 95       	com	r24
    13b0:	90 95       	com	r25
    13b2:	8e 0f       	add	r24, r30
    13b4:	9f 1f       	adc	r25, r31
    13b6:	08 95       	ret

000013b8 <strnlen>:
    13b8:	fc 01       	movw	r30, r24
    13ba:	61 50       	subi	r22, 0x01	; 1
    13bc:	70 40       	sbci	r23, 0x00	; 0
    13be:	01 90       	ld	r0, Z+
    13c0:	01 10       	cpse	r0, r1
    13c2:	d8 f7       	brcc	.-10     	; 0x13ba <strnlen+0x2>
    13c4:	80 95       	com	r24
    13c6:	90 95       	com	r25
    13c8:	8e 0f       	add	r24, r30
    13ca:	9f 1f       	adc	r25, r31
    13cc:	08 95       	ret

000013ce <fputc>:
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	fb 01       	movw	r30, r22
    13d8:	23 81       	ldd	r18, Z+3	; 0x03
    13da:	21 fd       	sbrc	r18, 1
    13dc:	03 c0       	rjmp	.+6      	; 0x13e4 <fputc+0x16>
    13de:	8f ef       	ldi	r24, 0xFF	; 255
    13e0:	9f ef       	ldi	r25, 0xFF	; 255
    13e2:	2c c0       	rjmp	.+88     	; 0x143c <fputc+0x6e>
    13e4:	22 ff       	sbrs	r18, 2
    13e6:	16 c0       	rjmp	.+44     	; 0x1414 <fputc+0x46>
    13e8:	46 81       	ldd	r20, Z+6	; 0x06
    13ea:	57 81       	ldd	r21, Z+7	; 0x07
    13ec:	24 81       	ldd	r18, Z+4	; 0x04
    13ee:	35 81       	ldd	r19, Z+5	; 0x05
    13f0:	42 17       	cp	r20, r18
    13f2:	53 07       	cpc	r21, r19
    13f4:	44 f4       	brge	.+16     	; 0x1406 <fputc+0x38>
    13f6:	a0 81       	ld	r26, Z
    13f8:	b1 81       	ldd	r27, Z+1	; 0x01
    13fa:	9d 01       	movw	r18, r26
    13fc:	2f 5f       	subi	r18, 0xFF	; 255
    13fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1400:	31 83       	std	Z+1, r19	; 0x01
    1402:	20 83       	st	Z, r18
    1404:	8c 93       	st	X, r24
    1406:	26 81       	ldd	r18, Z+6	; 0x06
    1408:	37 81       	ldd	r19, Z+7	; 0x07
    140a:	2f 5f       	subi	r18, 0xFF	; 255
    140c:	3f 4f       	sbci	r19, 0xFF	; 255
    140e:	37 83       	std	Z+7, r19	; 0x07
    1410:	26 83       	std	Z+6, r18	; 0x06
    1412:	14 c0       	rjmp	.+40     	; 0x143c <fputc+0x6e>
    1414:	8b 01       	movw	r16, r22
    1416:	ec 01       	movw	r28, r24
    1418:	fb 01       	movw	r30, r22
    141a:	00 84       	ldd	r0, Z+8	; 0x08
    141c:	f1 85       	ldd	r31, Z+9	; 0x09
    141e:	e0 2d       	mov	r30, r0
    1420:	09 95       	icall
    1422:	89 2b       	or	r24, r25
    1424:	e1 f6       	brne	.-72     	; 0x13de <fputc+0x10>
    1426:	d8 01       	movw	r26, r16
    1428:	16 96       	adiw	r26, 0x06	; 6
    142a:	8d 91       	ld	r24, X+
    142c:	9c 91       	ld	r25, X
    142e:	17 97       	sbiw	r26, 0x07	; 7
    1430:	01 96       	adiw	r24, 0x01	; 1
    1432:	17 96       	adiw	r26, 0x07	; 7
    1434:	9c 93       	st	X, r25
    1436:	8e 93       	st	-X, r24
    1438:	16 97       	sbiw	r26, 0x06	; 6
    143a:	ce 01       	movw	r24, r28
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	08 95       	ret

00001446 <__ultoa_invert>:
    1446:	fa 01       	movw	r30, r20
    1448:	aa 27       	eor	r26, r26
    144a:	28 30       	cpi	r18, 0x08	; 8
    144c:	51 f1       	breq	.+84     	; 0x14a2 <__ultoa_invert+0x5c>
    144e:	20 31       	cpi	r18, 0x10	; 16
    1450:	81 f1       	breq	.+96     	; 0x14b2 <__ultoa_invert+0x6c>
    1452:	e8 94       	clt
    1454:	6f 93       	push	r22
    1456:	6e 7f       	andi	r22, 0xFE	; 254
    1458:	6e 5f       	subi	r22, 0xFE	; 254
    145a:	7f 4f       	sbci	r23, 0xFF	; 255
    145c:	8f 4f       	sbci	r24, 0xFF	; 255
    145e:	9f 4f       	sbci	r25, 0xFF	; 255
    1460:	af 4f       	sbci	r26, 0xFF	; 255
    1462:	b1 e0       	ldi	r27, 0x01	; 1
    1464:	3e d0       	rcall	.+124    	; 0x14e2 <__ultoa_invert+0x9c>
    1466:	b4 e0       	ldi	r27, 0x04	; 4
    1468:	3c d0       	rcall	.+120    	; 0x14e2 <__ultoa_invert+0x9c>
    146a:	67 0f       	add	r22, r23
    146c:	78 1f       	adc	r23, r24
    146e:	89 1f       	adc	r24, r25
    1470:	9a 1f       	adc	r25, r26
    1472:	a1 1d       	adc	r26, r1
    1474:	68 0f       	add	r22, r24
    1476:	79 1f       	adc	r23, r25
    1478:	8a 1f       	adc	r24, r26
    147a:	91 1d       	adc	r25, r1
    147c:	a1 1d       	adc	r26, r1
    147e:	6a 0f       	add	r22, r26
    1480:	71 1d       	adc	r23, r1
    1482:	81 1d       	adc	r24, r1
    1484:	91 1d       	adc	r25, r1
    1486:	a1 1d       	adc	r26, r1
    1488:	20 d0       	rcall	.+64     	; 0x14ca <__ultoa_invert+0x84>
    148a:	09 f4       	brne	.+2      	; 0x148e <__ultoa_invert+0x48>
    148c:	68 94       	set
    148e:	3f 91       	pop	r19
    1490:	2a e0       	ldi	r18, 0x0A	; 10
    1492:	26 9f       	mul	r18, r22
    1494:	11 24       	eor	r1, r1
    1496:	30 19       	sub	r19, r0
    1498:	30 5d       	subi	r19, 0xD0	; 208
    149a:	31 93       	st	Z+, r19
    149c:	de f6       	brtc	.-74     	; 0x1454 <__ultoa_invert+0xe>
    149e:	cf 01       	movw	r24, r30
    14a0:	08 95       	ret
    14a2:	46 2f       	mov	r20, r22
    14a4:	47 70       	andi	r20, 0x07	; 7
    14a6:	40 5d       	subi	r20, 0xD0	; 208
    14a8:	41 93       	st	Z+, r20
    14aa:	b3 e0       	ldi	r27, 0x03	; 3
    14ac:	0f d0       	rcall	.+30     	; 0x14cc <__ultoa_invert+0x86>
    14ae:	c9 f7       	brne	.-14     	; 0x14a2 <__ultoa_invert+0x5c>
    14b0:	f6 cf       	rjmp	.-20     	; 0x149e <__ultoa_invert+0x58>
    14b2:	46 2f       	mov	r20, r22
    14b4:	4f 70       	andi	r20, 0x0F	; 15
    14b6:	40 5d       	subi	r20, 0xD0	; 208
    14b8:	4a 33       	cpi	r20, 0x3A	; 58
    14ba:	18 f0       	brcs	.+6      	; 0x14c2 <__ultoa_invert+0x7c>
    14bc:	49 5d       	subi	r20, 0xD9	; 217
    14be:	31 fd       	sbrc	r19, 1
    14c0:	40 52       	subi	r20, 0x20	; 32
    14c2:	41 93       	st	Z+, r20
    14c4:	02 d0       	rcall	.+4      	; 0x14ca <__ultoa_invert+0x84>
    14c6:	a9 f7       	brne	.-22     	; 0x14b2 <__ultoa_invert+0x6c>
    14c8:	ea cf       	rjmp	.-44     	; 0x149e <__ultoa_invert+0x58>
    14ca:	b4 e0       	ldi	r27, 0x04	; 4
    14cc:	a6 95       	lsr	r26
    14ce:	97 95       	ror	r25
    14d0:	87 95       	ror	r24
    14d2:	77 95       	ror	r23
    14d4:	67 95       	ror	r22
    14d6:	ba 95       	dec	r27
    14d8:	c9 f7       	brne	.-14     	; 0x14cc <__ultoa_invert+0x86>
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	61 05       	cpc	r22, r1
    14de:	71 05       	cpc	r23, r1
    14e0:	08 95       	ret
    14e2:	9b 01       	movw	r18, r22
    14e4:	ac 01       	movw	r20, r24
    14e6:	0a 2e       	mov	r0, r26
    14e8:	06 94       	lsr	r0
    14ea:	57 95       	ror	r21
    14ec:	47 95       	ror	r20
    14ee:	37 95       	ror	r19
    14f0:	27 95       	ror	r18
    14f2:	ba 95       	dec	r27
    14f4:	c9 f7       	brne	.-14     	; 0x14e8 <__ultoa_invert+0xa2>
    14f6:	62 0f       	add	r22, r18
    14f8:	73 1f       	adc	r23, r19
    14fa:	84 1f       	adc	r24, r20
    14fc:	95 1f       	adc	r25, r21
    14fe:	a0 1d       	adc	r26, r0
    1500:	08 95       	ret

00001502 <__prologue_saves__>:
    1502:	2f 92       	push	r2
    1504:	3f 92       	push	r3
    1506:	4f 92       	push	r4
    1508:	5f 92       	push	r5
    150a:	6f 92       	push	r6
    150c:	7f 92       	push	r7
    150e:	8f 92       	push	r8
    1510:	9f 92       	push	r9
    1512:	af 92       	push	r10
    1514:	bf 92       	push	r11
    1516:	cf 92       	push	r12
    1518:	df 92       	push	r13
    151a:	ef 92       	push	r14
    151c:	ff 92       	push	r15
    151e:	0f 93       	push	r16
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	ca 1b       	sub	r28, r26
    152c:	db 0b       	sbc	r29, r27
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	09 94       	ijmp

0000153a <__epilogue_restores__>:
    153a:	2a 88       	ldd	r2, Y+18	; 0x12
    153c:	39 88       	ldd	r3, Y+17	; 0x11
    153e:	48 88       	ldd	r4, Y+16	; 0x10
    1540:	5f 84       	ldd	r5, Y+15	; 0x0f
    1542:	6e 84       	ldd	r6, Y+14	; 0x0e
    1544:	7d 84       	ldd	r7, Y+13	; 0x0d
    1546:	8c 84       	ldd	r8, Y+12	; 0x0c
    1548:	9b 84       	ldd	r9, Y+11	; 0x0b
    154a:	aa 84       	ldd	r10, Y+10	; 0x0a
    154c:	b9 84       	ldd	r11, Y+9	; 0x09
    154e:	c8 84       	ldd	r12, Y+8	; 0x08
    1550:	df 80       	ldd	r13, Y+7	; 0x07
    1552:	ee 80       	ldd	r14, Y+6	; 0x06
    1554:	fd 80       	ldd	r15, Y+5	; 0x05
    1556:	0c 81       	ldd	r16, Y+4	; 0x04
    1558:	1b 81       	ldd	r17, Y+3	; 0x03
    155a:	aa 81       	ldd	r26, Y+2	; 0x02
    155c:	b9 81       	ldd	r27, Y+1	; 0x01
    155e:	ce 0f       	add	r28, r30
    1560:	d1 1d       	adc	r29, r1
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	ed 01       	movw	r28, r26
    156e:	08 95       	ret

00001570 <_exit>:
    1570:	f8 94       	cli

00001572 <__stop_program>:
    1572:	ff cf       	rjmp	.-2      	; 0x1572 <__stop_program>
